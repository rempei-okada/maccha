[{"C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\index.tsx":"1","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\serviceWorker.ts":"2","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\MacchaManager.tsx":"3","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Repositories\\config.ts":"4","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\main\\MacchaMain.tsx":"5","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Services\\index.ts":"6","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Routes\\index.ts":"7","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Commons\\lazyWithPreload.ts":"8","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\theme.ts":"9","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\main\\ecosystems\\HeaderToolbar.tsx":"10","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\frame\\Frame.tsx":"11","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Services\\UsersService.ts":"12","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Services\\WebSiteManagementsService.ts":"13","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Services\\PostManagementsService.ts":"14","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Services\\AuthService.ts":"15","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Services\\PostsService.ts":"16","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Services\\MediaService.ts":"17","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Services\\PostEditService.ts":"18","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Services\\PluginsService.ts":"19","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\main\\MainPage.tsx":"20","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\login\\LoginPage.tsx":"21","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\users\\UserPage.tsx":"22","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\web-sites\\WebSiteManagementsPage.tsx":"23","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\References\\ApiReferencePage.tsx":"24","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\Environments\\PostPreviewPage.tsx":"25","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\Environments\\PostsPage.tsx":"26","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\Environments\\PostEditPage.tsx":"27","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\Environments\\PostTypeEditPage.tsx":"28","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\Media\\Enviroments\\MediaPage.tsx":"29","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\Settings\\Environments\\SettingsPage.tsx":"30","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\main\\ecosystems\\ProfileCard.tsx":"31","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Repositories\\UsersRepository.ts":"32","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Repositories\\AuthRepository.ts":"33","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Repositories\\WebSiteManagementsRepository.ts":"34","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Repositories\\PostManagementsRepository.ts":"35","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Repositories\\MediaRepository.ts":"36","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Repositories\\PostsRepository.ts":"37","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Plugins\\PluginAdapter.ts":"38","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Models\\index.ts":"39","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Models\\auth\\login-info.ts":"40","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Models\\Contents\\Entities\\Content.ts":"41","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Models\\Contents\\Entities\\Field.ts":"42","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Models\\sites\\web-site.ts":"43","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Models\\Contents\\Entities\\Taxonomy.ts":"44","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\web-sites\\ecosystems\\WebSiteDetailDialog.tsx":"45","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\Media\\Ecosystems\\MediaListToolbar.tsx":"46","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\Settings\\Ecosystems\\WebSiteSettingPanel.tsx":"47","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\Settings\\Ecosystems\\showFilePickerAsync.tsx":"48","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\Settings\\Ecosystems\\UserSettingPanel.tsx":"49","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Models\\posts\\entities\\PostType.ts":"50","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\Ecosystems\\PostEditOptionPanel.tsx":"51","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\FieldEditors\\FieldEditor.tsx":"52","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Models\\Contents\\Entities\\Scheme.ts":"53","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Models\\users\\user.ts":"54","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Models\\auth\\role.ts":"55","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Models\\route.ts":"56","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Models\\Contents\\Enumes\\StatusType.ts":"57","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Plugins\\PluginComponent.tsx":"58","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\Media\\Ecosystems\\index.ts":"59","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\commons\\index.ts":"60","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\Ecosystems\\index.ts":"61","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\commons\\showDialog.tsx":"62","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\Media\\Ecosystems\\ImageGrid.tsx":"63","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\commons\\ValidationTextField.tsx":"64","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\commons\\messageAsync.tsx":"65","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\Ecosystems\\SchemeSettingPanel.tsx":"66","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\FieldEditors\\Editors\\index.ts":"67","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\commons\\confirmAsync.tsx":"68","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\FieldEditors\\Editors\\Switch.tsx":"69","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\FieldEditors\\Editors\\Text.tsx":"70","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\FieldEditors\\Editors\\Select.tsx":"71","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\FieldEditors\\Editors\\Rich.tsx":"72","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\FieldEditors\\Editors\\PhotoGallery.tsx":"73","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\FieldEditors\\Editors\\Image.tsx":"74","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\FieldEditors\\Editors\\Area.tsx":"75","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\Ecosystems\\FieldTypeEditDialog.tsx":"76","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\Ecosystems\\MediaSelectionDialog.tsx":"77","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\FieldEditors\\SchemeEditor.tsx":"78","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\commons\\Editor\\index.ts":"79","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\Ecosystems\\PostTypeBasicSettingPanel.tsx":"80","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\commons\\ColorPalette.tsx":"81","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\commons\\FileDropArea.tsx":"82","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\commons\\FlexSpacer.tsx":"83","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\commons\\ItemsWrapGrid.tsx":"84","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\commons\\Editor\\RitchEditor.tsx":"85","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\commons\\SearchBox.tsx":"86","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\commons\\DateTimeText.tsx":"87","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\commons\\WrappedTextBlock.tsx":"88","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\commons\\PhotoGridView\\index.ts":"89","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\commons\\PhotoGridView\\PhotoGridView.tsx":"90","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Models\\posts\\entities\\PostStatusType.ts":"91","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\Ecosystems\\confirmRemovePostTypeDialog.tsx":"92","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\Ecosystems\\PostListPanel.tsx":"93","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\Ecosystems\\PostPreviewPanel.tsx":"94","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\Ecosystems\\PostTypeSettingDisplayPanel.tsx":"95","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\users\\ecosystems\\UserDetailsDialog.tsx":"96","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\Molecles\\PostSearchPagingBar.tsx":"97","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\Organisms\\index.ts":"98","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\Organisms\\PostCard.tsx":"99","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\Molecles\\index.ts":"100","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\Molecles\\PostCardMenu.tsx":"101","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\commons\\Planet\\index.ts":"102","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\commons\\Planet\\Planet.tsx":"103","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\commons\\Planet\\Orbit.tsx":"104","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\commons\\Planet\\Satellite.tsx":"105"},{"size":704,"mtime":1604146772585,"results":"106","hashOfConfig":"107"},{"size":6297,"mtime":1601183759015,"results":"108","hashOfConfig":"107"},{"size":2434,"mtime":1604058214778,"results":"109","hashOfConfig":"107"},{"size":1359,"mtime":1604009412868,"results":"110","hashOfConfig":"107"},{"size":2781,"mtime":1604984888706,"results":"111","hashOfConfig":"107"},{"size":1441,"mtime":1602296097544,"results":"112","hashOfConfig":"107"},{"size":3218,"mtime":1604925352839,"results":"113","hashOfConfig":"107"},{"size":855,"mtime":1601183758965,"results":"114","hashOfConfig":"107"},{"size":2074,"mtime":1613394373285,"results":"115","hashOfConfig":"107"},{"size":1606,"mtime":1605004562914,"results":"116","hashOfConfig":"107"},{"size":16424,"mtime":1607765242884,"results":"117","hashOfConfig":"107"},{"size":3187,"mtime":1602066452308,"results":"118","hashOfConfig":"107"},{"size":2718,"mtime":1604912193493,"results":"119","hashOfConfig":"107"},{"size":3369,"mtime":1604010650458,"results":"120","hashOfConfig":"107"},{"size":3214,"mtime":1602066037658,"results":"121","hashOfConfig":"107"},{"size":1910,"mtime":1604290242674,"results":"122","hashOfConfig":"107"},{"size":1488,"mtime":1605003672921,"results":"123","hashOfConfig":"107"},{"size":4359,"mtime":1604962721796,"results":"124","hashOfConfig":"107"},{"size":1343,"mtime":1602066340578,"results":"125","hashOfConfig":"107"},{"size":146,"mtime":1604055875006,"results":"126","hashOfConfig":"107"},{"size":4733,"mtime":1613504578661,"results":"127","hashOfConfig":"107"},{"size":9503,"mtime":1605004444828,"results":"128","hashOfConfig":"107"},{"size":8015,"mtime":1601862650085,"results":"129","hashOfConfig":"107"},{"size":461,"mtime":1601686340560,"results":"130","hashOfConfig":"107"},{"size":2374,"mtime":1604161102614,"results":"131","hashOfConfig":"107"},{"size":11082,"mtime":1605002860244,"results":"132","hashOfConfig":"107"},{"size":5574,"mtime":1613394258175,"results":"133","hashOfConfig":"107"},{"size":3524,"mtime":1604988868878,"results":"134","hashOfConfig":"107"},{"size":938,"mtime":1605003172409,"results":"135","hashOfConfig":"107"},{"size":8967,"mtime":1605004470603,"results":"136","hashOfConfig":"107"},{"size":3296,"mtime":1613504773681,"results":"137","hashOfConfig":"107"},{"size":2881,"mtime":1601708208064,"results":"138","hashOfConfig":"107"},{"size":2802,"mtime":1601985588375,"results":"139","hashOfConfig":"107"},{"size":1702,"mtime":1601862005613,"results":"140","hashOfConfig":"107"},{"size":3217,"mtime":1604293193818,"results":"141","hashOfConfig":"107"},{"size":716,"mtime":1605003745330,"results":"142","hashOfConfig":"107"},{"size":4069,"mtime":1604259932058,"results":"143","hashOfConfig":"107"},{"size":666,"mtime":1606854328434,"results":"144","hashOfConfig":"107"},{"size":75,"mtime":1601183758998,"results":"145","hashOfConfig":"107"},{"size":631,"mtime":1601858277008,"results":"146","hashOfConfig":"107"},{"size":1166,"mtime":1604912134623,"results":"147","hashOfConfig":"107"},{"size":615,"mtime":1604912093427,"results":"148","hashOfConfig":"107"},{"size":910,"mtime":1601862595201,"results":"149","hashOfConfig":"107"},{"size":538,"mtime":1604912093432,"results":"150","hashOfConfig":"107"},{"size":7022,"mtime":1602326454127,"results":"151","hashOfConfig":"107"},{"size":4689,"mtime":1605004169473,"results":"152","hashOfConfig":"107"},{"size":3468,"mtime":1604972513517,"results":"153","hashOfConfig":"107"},{"size":1708,"mtime":1602064108804,"results":"154","hashOfConfig":"107"},{"size":3542,"mtime":1604979689883,"results":"155","hashOfConfig":"107"},{"size":528,"mtime":1604975888892,"results":"156","hashOfConfig":"107"},{"size":9700,"mtime":1605004690498,"results":"157","hashOfConfig":"107"},{"size":425,"mtime":1604175677934,"results":"158","hashOfConfig":"107"},{"size":966,"mtime":1604912093429,"results":"159","hashOfConfig":"107"},{"size":1759,"mtime":1601707783906,"results":"160","hashOfConfig":"107"},{"size":411,"mtime":1601183758997,"results":"161","hashOfConfig":"107"},{"size":398,"mtime":1601183759006,"results":"162","hashOfConfig":"107"},{"size":68,"mtime":1604912093474,"results":"163","hashOfConfig":"107"},{"size":380,"mtime":1601853966913,"results":"164","hashOfConfig":"107"},{"size":65,"mtime":1601183758968,"results":"165","hashOfConfig":"107"},{"size":336,"mtime":1602308402892,"results":"166","hashOfConfig":"107"},{"size":83,"mtime":1602317304920,"results":"167","hashOfConfig":"107"},{"size":4523,"mtime":1613394391771,"results":"168","hashOfConfig":"107"},{"size":2509,"mtime":1605004722796,"results":"169","hashOfConfig":"107"},{"size":1300,"mtime":1604989221870,"results":"170","hashOfConfig":"107"},{"size":1652,"mtime":1601700864411,"results":"171","hashOfConfig":"107"},{"size":12040,"mtime":1604991371889,"results":"172","hashOfConfig":"107"},{"size":624,"mtime":1604175803732,"results":"173","hashOfConfig":"107"},{"size":1657,"mtime":1608920167825,"results":"174","hashOfConfig":"107"},{"size":965,"mtime":1604175287542,"results":"175","hashOfConfig":"107"},{"size":1088,"mtime":1604175323637,"results":"176","hashOfConfig":"107"},{"size":2176,"mtime":1604175118971,"results":"177","hashOfConfig":"107"},{"size":935,"mtime":1604175218981,"results":"178","hashOfConfig":"107"},{"size":3210,"mtime":1613501605061,"results":"179","hashOfConfig":"107"},{"size":2669,"mtime":1613501521587,"results":"180","hashOfConfig":"107"},{"size":1194,"mtime":1604175621325,"results":"181","hashOfConfig":"107"},{"size":2642,"mtime":1604987981010,"results":"182","hashOfConfig":"107"},{"size":6638,"mtime":1606855557734,"results":"183","hashOfConfig":"107"},{"size":3302,"mtime":1604991654333,"results":"184","hashOfConfig":"107"},{"size":30,"mtime":1601183758971,"results":"185","hashOfConfig":"107"},{"size":6179,"mtime":1613498661347,"results":"186","hashOfConfig":"107"},{"size":2107,"mtime":1604979835969,"results":"187","hashOfConfig":"107"},{"size":7833,"mtime":1601183758972,"results":"188","hashOfConfig":"107"},{"size":305,"mtime":1601690531544,"results":"189","hashOfConfig":"107"},{"size":2516,"mtime":1604321625438,"results":"190","hashOfConfig":"107"},{"size":1330,"mtime":1601617338660,"results":"191","hashOfConfig":"107"},{"size":1170,"mtime":1601183758977,"results":"192","hashOfConfig":"107"},{"size":1391,"mtime":1601183758970,"results":"193","hashOfConfig":"107"},{"size":1108,"mtime":1601183758978,"results":"194","hashOfConfig":"107"},{"size":32,"mtime":1601183758974,"results":"195","hashOfConfig":"107"},{"size":6076,"mtime":1605003977547,"results":"196","hashOfConfig":"107"},{"size":462,"mtime":1601183759003,"results":"197","hashOfConfig":"107"},{"size":2030,"mtime":1604151573318,"results":"198","hashOfConfig":"107"},{"size":11691,"mtime":1605004488282,"results":"199","hashOfConfig":"107"},{"size":6388,"mtime":1613505306920,"results":"200","hashOfConfig":"107"},{"size":4740,"mtime":1613498916144,"results":"201","hashOfConfig":"107"},{"size":11145,"mtime":1601861838468,"results":"202","hashOfConfig":"107"},{"size":921,"mtime":1604321032598,"results":"203","hashOfConfig":"107"},{"size":27,"mtime":1601183758990,"results":"204","hashOfConfig":"107"},{"size":7587,"mtime":1613503605495,"results":"205","hashOfConfig":"107"},{"size":31,"mtime":1601183758989,"results":"206","hashOfConfig":"107"},{"size":2493,"mtime":1601726131047,"results":"207","hashOfConfig":"107"},{"size":27,"mtime":1601183758976,"results":"208","hashOfConfig":"107"},{"size":5342,"mtime":1601807112811,"results":"209","hashOfConfig":"107"},{"size":2096,"mtime":1601183758975,"results":"210","hashOfConfig":"107"},{"size":4246,"mtime":1601183758976,"results":"211","hashOfConfig":"107"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"215"},"1bcfii2",{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"215"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"215"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"215"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"215"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"215"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"215"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"215"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"215"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"215"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"215"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"215"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"215"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"215"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"215"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"215"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"215"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"215"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"273","messages":"274","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"215"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"215"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"215"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"215"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"215"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"215"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"215"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296","usedDeprecatedRules":"215"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299","usedDeprecatedRules":"215"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"302","messages":"303","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"215"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"215"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"215"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317","usedDeprecatedRules":"215"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"215"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"215"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328","usedDeprecatedRules":"215"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"215"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"215"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"215"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"215"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345","usedDeprecatedRules":"215"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348","usedDeprecatedRules":"215"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"215"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354","usedDeprecatedRules":"215"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"215"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"360","usedDeprecatedRules":"215"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"365","usedDeprecatedRules":"215"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"370","usedDeprecatedRules":"215"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"383","usedDeprecatedRules":"215"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"386","usedDeprecatedRules":"215"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"389","usedDeprecatedRules":"215"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"392","usedDeprecatedRules":"215"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"395","usedDeprecatedRules":"215"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"398","usedDeprecatedRules":"215"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"401","usedDeprecatedRules":"215"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"404","usedDeprecatedRules":"215"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"407","usedDeprecatedRules":"215"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"410","usedDeprecatedRules":"215"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"413","usedDeprecatedRules":"215"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"416","messages":"417","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"418","messages":"419","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"420","usedDeprecatedRules":"215"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"423","usedDeprecatedRules":"215"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"426","usedDeprecatedRules":"215"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"429","usedDeprecatedRules":"215"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"434","messages":"435","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"436","usedDeprecatedRules":"215"},{"filePath":"437","messages":"438","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"439","usedDeprecatedRules":"215"},{"filePath":"440","messages":"441","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"442","messages":"443","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"444","usedDeprecatedRules":"215"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"447","messages":"448","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"449","messages":"450","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"451","usedDeprecatedRules":"215"},{"filePath":"452","messages":"453","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"454","usedDeprecatedRules":"215"},{"filePath":"455","messages":"456","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"457","messages":"458","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"459","usedDeprecatedRules":"215"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"462","messages":"463","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"464","usedDeprecatedRules":"215"},{"filePath":"465","messages":"466","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"467","usedDeprecatedRules":"215"},{"filePath":"468","messages":"469","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"470","messages":"471","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"472","messages":"473","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"474","usedDeprecatedRules":"215"},{"filePath":"475","messages":"476","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"477","messages":"478","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"479","messages":"480","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"481","messages":"482","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"483","messages":"484","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"485","usedDeprecatedRules":"215"},{"filePath":"486","messages":"487","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"488","messages":"489","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"490","usedDeprecatedRules":"215"},{"filePath":"491","messages":"492","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"493","messages":"494","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},"C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\index.tsx",["495"],"import \"reflect-metadata\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { MacchaManager } from \"./MacchaManager\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport { RoleType } from \"./Models\";\r\n\r\n(async () => {\r\n    const App = await MacchaManager({\r\n        host: \"http://localhost:8081/\",\r\n        plugins: [\r\n        ]\r\n    });\r\n    ReactDOM.render(\r\n        <App />,\r\n        document.getElementById(\"root\")\r\n    );\r\n})();\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PW\r\nserviceWorker.unregister();\r\n",["496","497","498"],"C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\serviceWorker.ts",[],"C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\MacchaManager.tsx",["499","500","501","502","503","504","505"],"import React, { useEffect, useRef } from \"react\";\r\nimport { setUrl } from \"./Repositories/config\";\r\nimport { services } from \"./Services\";\r\nimport { config as routeConfig } from \"./Routes\";\r\nimport { lazyWithPreload } from \"./Commons/lazyWithPreload\";\r\nimport { createBrowserHistory } from \"history\";\r\nimport MacchaMain from \"./Components/main/MacchaMain\";\r\nimport { Route, ChildRoute } from \"./Models/route\";\r\nimport { LazyRoute } from \"./Components/frame/Frame\";\r\nimport \"./styles/style.scss\";\r\nimport { Theme } from \"@material-ui/core\";\r\n\r\n\r\n\r\ninterface MacchaAppContext {\r\n    theme: Theme;\r\n}\r\n\r\nexport interface MacchaCofig {\r\n    host: string,\r\n    plugins: Route[];\r\n}\r\n\r\nconst macchaConfig = {\r\n    host: \"\",\r\n};\r\n\r\nfunction setConfig(config?: Partial<MacchaCofig>) {\r\n    Object.assign(macchaConfig, config);\r\n    setUrl(macchaConfig.host);\r\n}\r\n\r\nasync function bootstrap() {\r\n    await (async () => {\r\n        await services.authService.refreshAsync();\r\n        await services.webSiteManagementsService.fetchWebsitesAsync();\r\n        await services.pluginsService.fetchAsync();\r\n    })();\r\n\r\n    services.usersService.fetchUesrsAsync();\r\n}\r\n\r\n\r\n/**\r\n * entry pont.\r\n * @param config config option params.\r\n */\r\nexport async function MacchaManager(config?: Partial<MacchaCofig>) {\r\n    services.authService.initialize();\r\n    setConfig(config);\r\n\r\n    const history = createBrowserHistory();\r\n\r\n    const loadPageTask = Promise.all(\r\n        routeConfig.hiddenRoutes.map(async route => ({ ...route, loadedComponent: (await route.component()).default })),\r\n    );\r\n\r\n    try {\r\n        if (!services.authService.isLogin) {\r\n            history.push(\"/login\");\r\n        }\r\n        else if (history.location.pathname === \"/\") {\r\n            history.push(\"/main\");\r\n            await bootstrap();\r\n        }\r\n        else {\r\n            await bootstrap();\r\n        }\r\n    }\r\n    catch {\r\n        history.push(\"/login\");\r\n    }\r\n\r\n    const hiddenLazyRoutes = await loadPageTask;\r\n\r\n    // AuthGuard\r\n    const filteredMenus = [\r\n        ...routeConfig.displayRoutes,// standard routes\r\n        ...(config?.plugins ?? []) // option specified\r\n    ];\r\n    const filteredSettings = routeConfig.footerRoutes;\r\n\r\n    return () => (\r\n        <MacchaMain\r\n            hiddenLazyRoutes={hiddenLazyRoutes}\r\n            menus={filteredMenus}\r\n            settings={filteredSettings}\r\n            history={history}\r\n        />\r\n    );\r\n}\r\n","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Repositories\\config.ts",["506","507","508","509"],"import Axios, { AxiosAdapter } from \"axios\";\r\nimport { LoginInfo } from \"../Models/auth/login-info\";\r\nimport { container } from \"tsyringe\";\r\nimport { ServiceContext, services } from \"../Services\";\r\n\r\nexport const repositoryConfig = {\r\n    path: {\r\n        auth: \"api/auth\"\r\n    }\r\n};\r\n\r\nexport const axios = Axios.create({\r\n    timeout: 1000,\r\n    headers: {},\r\n});\r\n\r\nfunction registerAutoTokeRefresh() {\r\n    let interceptor = 0;\r\n\r\n    const register = () => {\r\n        interceptor = axios.interceptors.response.use(\r\n            async response => response,\r\n            onError\r\n        );\r\n    };\r\n\r\n    const unresister = () => {\r\n        axios.interceptors.response.eject(interceptor);\r\n    };\r\n\r\n    const onError = async (error: any) => {\r\n        if (error.response.status !== 401) {\r\n            return Promise.resolve(error);\r\n        }\r\n\r\n        unresister();\r\n\r\n        await services.authService.refreshAsync();\r\n        const config = error.response.config;\r\n        config.headers.Authorization = services.authService.loginInfo.token;\r\n\r\n        register();\r\n\r\n        return axios.request(config);\r\n    };\r\n\r\n    register();\r\n}\r\nregisterAutoTokeRefresh();\r\n\r\nexport function setUrl(url: string) {\r\n    axios.defaults.baseURL = url;\r\n}\r\n\r\nexport function setToken(token: string) {\r\n    axios.defaults.headers.Authorization = `${token}`;\r\n}\r\n","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\main\\MacchaMain.tsx",["510","511","512","513","514","515"],"import React, { useState, ComponentType, useEffect } from \"react\";\r\nimport { useObserver } from \"mobx-react\";\r\nimport { services } from \"../../Services\";\r\nimport {\r\n    ThemeProvider\r\n} from \"@material-ui/core\";\r\nimport { Route as DomRoute } from \"react-router-dom\";\r\nimport { Router, Switch } from \"react-router\";\r\nimport { theme } from \"../../theme\";\r\nimport Frame, { LazyRoute } from \"../frame/Frame\";\r\nimport { History } from \"history\";\r\nimport { ChildRoute, Route } from \"../../Models\";\r\nimport HeaderToolbar from \"./ecosystems/HeaderToolbar\";\r\nimport { lazyWithPreload } from \"../../Commons/lazyWithPreload\";\r\n\r\ninterface MacchaMainProp {\r\n    history: History;\r\n    hiddenLazyRoutes: (Route & { loadedComponent: any })[];\r\n    settings: Route[];\r\n    menus: Route[];\r\n}\r\n\r\nexport default (props: MacchaMainProp) => useObserver(() => {\r\n    const [filteredMenus, setFilteredMenus] = useState([]);\r\n    const [filteredSettings, setFilteredSettings] = useState([]);\r\n    const { authService } = services;\r\n\r\n    useEffect(() => {\r\n        handleRoute();\r\n    }, [services.pluginsService.plugins]);\r\n\r\n    function handleRoute() {\r\n        setFilteredMenus(\r\n            loadAll([...props.menus, ...services.pluginsService.plugins]).filter((r: any) => r.role <= services.authService.loginInfo.role) as any\r\n        );\r\n        setFilteredSettings(\r\n            loadAll(props.settings).filter((r: any) => r.role <= services.authService.loginInfo.role) as any\r\n        );\r\n    }\r\n\r\n    return <ThemeProvider theme={theme}>\r\n        <Router history={props.history}>\r\n            <Switch>\r\n                {props.hiddenLazyRoutes.map((x, i) => (\r\n                    <DomRoute key={i}\r\n                        exact path={x.path}\r\n                        component={x.loadedComponent as any}>\r\n                    </DomRoute>\r\n                ))}\r\n                <DomRoute path=\"/\">\r\n                    <Frame\r\n                        logo=\"/maccha.png\"\r\n                        settings={filteredSettings}\r\n                        menus={filteredMenus}\r\n                        user={authService.loginInfo}\r\n                        toolbarContent={\r\n                            <HeaderToolbar />\r\n                        } />\r\n                </DomRoute>\r\n            </Switch>\r\n        </Router>\r\n    </ThemeProvider >;\r\n});\r\n\r\n\r\n// helpers\r\nfunction loadAll(root: Route[]) {\r\n    const load = (route: ChildRoute | Route) => ({ ...route, lazyComponent: lazyWithPreload(route.component) }) as any;\r\n\r\n    function loadChildren(route: ChildRoute | Route): LazyRoute & (ChildRoute | Route) {\r\n        return {\r\n            ...load(route),\r\n            lazyChildren: route.children?.map(r => loadChildren(r)) ?? []\r\n        };\r\n    }\r\n\r\n    return root.map(r => loadChildren(r));\r\n}","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Services\\index.ts",["516"],"import { AuthService } from \"./AuthService\";\r\nimport { UsersService } from \"./UsersService\";\r\nimport { WebSiteManagementsService } from \"./WebSiteManagementsService\";\r\nimport { PostsService } from \"./PostsService\";\r\nimport { PostManagementsService } from \"./PostManagementsService\";\r\nimport { MediaService } from \"./MediaService\";\r\nimport { PostsEditServic } from \"./PostEditService\";\r\nimport { container, singleton } from \"tsyringe\";\r\nimport { PluginsService } from \"./PluginsService\";\r\n\r\n@singleton()\r\nexport class ServiceContext {\r\n    constructor(\r\n        readonly authService: AuthService,\r\n        readonly usersService: UsersService,\r\n        readonly webSiteManagementsService: WebSiteManagementsService,\r\n        readonly postsService: PostsService,\r\n        readonly postEditService: PostsEditServic,\r\n        readonly postManagementsService: PostManagementsService,\r\n        readonly mediaService: MediaService,\r\n        readonly pluginsService: PluginsService\r\n    ) { }\r\n}\r\n\r\ncontainer\r\n    .registerType(AuthService, AuthService)\r\n    .registerType(UsersService, UsersService)\r\n    .registerType(WebSiteManagementsService, WebSiteManagementsService)\r\n    .registerType(PostsService, PostsService)\r\n    .registerType(MediaService, MediaService)\r\n    .registerType(PostsEditServic, PostsEditServic)\r\n    .registerType(PostManagementsService, PostManagementsService);\r\n\r\nexport const services = container.resolve(ServiceContext);","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Routes\\index.ts",["517","518"],"import { RoleType, Route } from \"../Models\";\r\nimport { timer } from \"rxjs\";\r\n\r\ninterface RouteConfig {\r\n    hiddenRoutes: Route[];\r\n    footerRoutes: Route[];\r\n    displayRoutes: Route[];\r\n}\r\n\r\ninterface NavbarItem {\r\n\r\n}\r\n\r\nexport const config: RouteConfig = {\r\n    hiddenRoutes: [\r\n        {\r\n            path: \"/login\",\r\n            title: \"ログイン\",\r\n            icon: \"Star\",\r\n            component: () => import(\"../Components/login/LoginPage\"),\r\n            role: RoleType.None\r\n        },\r\n    ],\r\n    displayRoutes: [\r\n        {\r\n            path: \"/main\",\r\n            title: \"メイン\",\r\n            icon: \"web\",\r\n            component: () => import(\"../Components/main/MainPage\"),\r\n            role: RoleType.Subscribe\r\n        },\r\n        {\r\n            path: \"/posts\",\r\n            title: \"投稿\",\r\n            icon: \"post_add\",\r\n            component: () => import(\"../Components/posts/Environments/PostsPage\"),\r\n            role: RoleType.Subscribe,\r\n            exact: true,\r\n            children: [\r\n                {\r\n                    path: \"/posts/:taxonomy\",\r\n                    component: () => import(\"../Components/posts/Environments/PostsPage\"),\r\n                    children: []\r\n                },\r\n                {\r\n                    path: \"/posts/:taxonomy/:contentId\",\r\n                    component: () => import(\"../Components/posts/Environments/PostPreviewPage\"),\r\n                    children: []\r\n                },\r\n                {\r\n                    path: \"/posts/:taxonomy/edit\",\r\n                    component: () => import(\"../Components/posts/Environments/PostTypeEditPage\"),\r\n                    children: []\r\n                },\r\n                {\r\n                    path: \"/posts/:taxonomy/:contentId/edit\",\r\n                    component: () => import(\"../Components/posts/Environments/PostEditPage\"),\r\n                    children: []\r\n                },\r\n            ]\r\n        },\r\n        {\r\n            path: \"/media\",\r\n            title: \"メディア\",\r\n            icon: \"insert_photo\",\r\n            component: () => import(\"../Components/Media/Enviroments/MediaPage\"),\r\n            role: RoleType.Post\r\n        },\r\n        {\r\n            path: \"/settings\",\r\n            title: \"設定\",\r\n            icon: \"settings\",\r\n            component: () => import(\"../Components/Settings/Environments/SettingsPage\"),\r\n            role: RoleType.Subscribe\r\n        },\r\n    ],\r\n    footerRoutes: [\r\n        {\r\n            path: \"/user-managements\",\r\n            title: \"ユーザー管理\",\r\n            icon: \"account_box\",\r\n            component: () => import(\"../Components/users/UserPage\"),\r\n            role: RoleType.Edit\r\n        },\r\n        {\r\n            path: \"/web-site-managements\",\r\n            title: \"WEBサイト管理\",\r\n            icon: \"language\",\r\n            component: () => import(\"../Components/web-sites/WebSiteManagementsPage\"),\r\n            role: RoleType.Edit\r\n        },\r\n        {\r\n            path: \"/api-reference\",\r\n            title: \"API定義\",\r\n            icon: \"live_help\",\r\n            component: () => import(\"../Components/References/ApiReferencePage\"),\r\n            role: RoleType.Subscribe\r\n        },\r\n    ]\r\n};","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Commons\\lazyWithPreload.ts",["519"],"import { ComponentType, createElement, forwardRef, lazy } from \"react\";\r\n\r\nexport type PreloadableComponent<T extends ComponentType<any>> = T & {\r\n    preload: () => Promise<void>;\r\n};\r\n\r\nexport function lazyWithPreload<T extends ComponentType<any>>(\r\n    factory: () => Promise<{ default: T }>\r\n): PreloadableComponent<T> {\r\n    const LazyComponent = lazy(factory);\r\n    let LoadedComponent: T | undefined;\r\n\r\n    const Component = (forwardRef(function LazyWithPreload(props, ref) {\r\n        return createElement(\r\n            LoadedComponent ?? LazyComponent,\r\n            Object.assign(ref ? { ref } : {}, props) as any\r\n        );\r\n    }) as any) as PreloadableComponent<T>;\r\n\r\n    Component.preload = async () => {\r\n        if (!LoadedComponent) {\r\n            LoadedComponent = (await factory()).default;\r\n        }\r\n    };\r\n    return Component;\r\n}","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\theme.ts",["520","521","522"],"import { createMuiTheme,makeStyles } from \"@material-ui/core/styles\";\r\nimport { cyan, grey, orange } from \"@material-ui/core/colors\";\r\n\r\nconst color = (() => {\r\n    const color = localStorage.getItem(\"color\");\r\n    if (!color) {\r\n        localStorage.setItem(\"color\", \"#8db860\");\r\n        return \"#8db860\";\r\n    }\r\n    return color;\r\n})();\r\n\r\nconst main = color;\r\nconst dark = color;\r\nconst light = color;\r\n\r\nexport const theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            light: light ?? cyan[300],\r\n            main: main ?? cyan[500],\r\n            dark: dark ?? cyan[700],\r\n            contrastText: \"#fff\",\r\n        },\r\n        secondary: {\r\n            light: \"rgb(46,46,46)\",\r\n            main: \"rgb(24,24,24)\",\r\n            dark: \"rgb(12,12,12)\",\r\n            contrastText: \"#fff\",\r\n        },\r\n    },\r\n    overrides: {\r\n        MuiDrawer: {\r\n            paper: {\r\n                backgroundColor: \"rgb(236, 236, 236)\"\r\n            }\r\n        },\r\n        MuiInput: {\r\n            underline: {\r\n                \"&:before\": {\r\n                    borderBottom: \"2px solid rgb(42, 42, 42)\"\r\n                },\r\n                \"&:hover:not(.Mui-disabled):before \": {\r\n                    borderBottom: \"2px solid rgb(42, 42, 42, 0.54)\",\r\n                }\r\n            },\r\n        },\r\n        MuiInputBase: {\r\n            root: {\r\n                marginTop: \"12px!important\"\r\n            },\r\n        },\r\n        MuiButton: {\r\n            root: {\r\n                borderRadius: \"2px\"\r\n            }\r\n        }\r\n    },\r\n    typography: {\r\n        fontFamily: \"Noto Sans JP\",\r\n        fontWeightRegular: 500,\r\n        fontWeightLight: 300,\r\n        fontWeightBold: 700,\r\n        fontWeightMedium: 500,\r\n        h1: {\r\n            fontWeight: 300\r\n        },\r\n        h2: {\r\n            fontWeight: 300\r\n        },\r\n        h3: {\r\n            fontWeight: 400\r\n        },\r\n        h4: {\r\n            fontWeight: 400\r\n        },\r\n        h5: {\r\n            fontWeight: 500\r\n        },\r\n        h6: {\r\n            fontWeight: 500\r\n        },\r\n    },\r\n});","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\main\\ecosystems\\HeaderToolbar.tsx",["523","524","525","526","527","528","529","530","531","532","533"],"import React, { useState, ComponentType } from \"react\";\r\nimport { services } from \"../../../Services\";\r\nimport {\r\n    ThemeProvider,\r\n    IconButton,\r\n    Box,\r\n    Typography,\r\n    Icon,\r\n    Select,\r\n    Menu,\r\n    MenuItem,\r\n    ListItemText, Avatar\r\n} from \"@material-ui/core\";\r\nimport ProfileImage from \"../../commons/ProfileImage\";\r\nimport { theme } from \"../../../theme\";\r\nimport ProfileCard from \"./ProfileCard\";\r\nimport { axios } from \"../../../Repositories/config\";\r\n\r\nexport default function HeaderToolbar() {\r\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n    const { authService, webSiteManagementsService } = services;\r\n\r\n    const handleOpenProfile = (event: React.MouseEvent<HTMLElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Box flex=\"1 1 auto\" />\r\n            <Avatar\r\n                onClick={handleOpenProfile}\r\n                style={{\r\n                    background: theme.palette.primary.main,\r\n                    height: \"40px\",\r\n                    width: \"40px\",\r\n                    cursor: \"pointer\"\r\n                }}\r\n                src={axios.defaults.baseURL + services.authService.loginInfo.avatar}\r\n            />\r\n            <Menu\r\n                id=\"lock-menu\"\r\n                keepMounted\r\n                open={!!anchorEl}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n            >\r\n                <ProfileCard></ProfileCard>\r\n            </Menu>\r\n        </>\r\n    );\r\n}","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\frame\\Frame.tsx",["534","535","536","537","538"],"import React, { Suspense, useState, useRef, useEffect } from \"react\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport { makeStyles, useTheme, Theme, createStyles } from \"@material-ui/core/styles\";\r\nimport { fromEvent, timer, from } from \"rxjs\";\r\nimport { pairwise, map, concatMap } from \"rxjs/operators\";\r\nimport { Route, Switch, useHistory, useLocation } from \"react-router-dom\";\r\nimport { PreloadableComponent } from \"../../Commons/lazyWithPreload\";\r\nimport { Route as RouteInfo, ChildRoute } from \"../../Models\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport {\r\n    Box,\r\n    ListItemText,\r\n    ListItemIcon,\r\n    ListItem,\r\n    List,\r\n    Icon,\r\n    IconButton,\r\n    Typography,\r\n    Hidden,\r\n    Drawer,\r\n    Toolbar,\r\n    Divider, Avatar\r\n} from \"@material-ui/core\";\r\nimport { LoginUser } from \"../../Models/auth/login-user\";\r\nimport { axios } from \"../../Repositories/config\";\r\n\r\n\r\nconst closeWidth = 52;\r\nconst drawerWidth = 320;\r\nconst AUTO_CLOSE_WIDTH = 960;\r\n\r\ninterface FrameProp {\r\n    menus: (LazyRoute & RouteInfo)[];\r\n    settings: (LazyRoute & RouteInfo)[];\r\n    user: LoginUser;\r\n    logo: string;\r\n    toolbarContent: React.ReactElement;\r\n}\r\n\r\ntype FramwRoute = (LazyRoute & ChildRoute);\r\n\r\nfunction flatten<T extends (ChildRoute | RouteInfo)>(route: (LazyRoute & T)): (LazyRoute & T)[] {\r\n    if (route.lazyChildren && route.lazyChildren.length) {\r\n        const c = route.lazyChildren.reduce(\r\n            (dst, route) => [...flatten<ChildRoute>(route), ...dst],\r\n            [] as (LazyRoute & ChildRoute)[]\r\n        ) as any;\r\n        return [route, ...c];\r\n    }\r\n    return [route];\r\n};\r\n\r\nexport default function Frame(props: FrameProp) {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [mobileOpen, setMobileOpen] = React.useState(AUTO_CLOSE_WIDTH <= window.innerWidth);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const theme = useTheme();\r\n    const opacityAnimationElement = useRef<HTMLDivElement | null>(null);\r\n\r\n    const menus = props.menus.reduce(\r\n        (dst, route) => [...flatten<RouteInfo>(route), ...dst],\r\n        [] as (FramwRoute)[]\r\n    );\r\n    const settings = props.settings.reduce(\r\n        (dst, route) => [...flatten<RouteInfo>(route), ...dst],\r\n        [] as (FramwRoute)[]\r\n    );\r\n\r\n    const routes = [...menus, ...settings];\r\n\r\n    const handleDrawerToggle = () => {\r\n        setMobileOpen(!mobileOpen);\r\n    };\r\n\r\n    fromEvent(window, \"resize\").pipe(\r\n        map(e => window.innerWidth),\r\n        pairwise(),\r\n    ).subscribe(e => {\r\n        const [beforeWidth, currentWidth] = e;\r\n\r\n        if (AUTO_CLOSE_WIDTH < currentWidth) {\r\n            if (beforeWidth < currentWidth) {\r\n                setMobileOpen(true);\r\n            }\r\n        }\r\n        else {\r\n            if (beforeWidth >= currentWidth) {\r\n                setMobileOpen(false);\r\n            }\r\n        }\r\n    });\r\n\r\n    const routePressed = async (route: FramwRoute) => {\r\n        const timeout = timer(1000).subscribe(() => setIsLoading(true));\r\n\r\n        if (opacityAnimationElement.current) {\r\n            const el = opacityAnimationElement.current;\r\n            el.style.transition = \"opacity 300ms\";\r\n            el.style.opacity = \"0\";\r\n        }\r\n\r\n        await from(route.lazyComponent.preload())\r\n            .pipe(\r\n                concatMap(_ => timer(300))\r\n            ).toPromise();\r\n        timeout.unsubscribe();\r\n        queueMicrotask(() => {\r\n            if (isLoading) setIsLoading(false);\r\n        });\r\n        history.push(route.path);\r\n\r\n        if (opacityAnimationElement.current) {\r\n            const el = opacityAnimationElement.current;\r\n            el.style.transition = \"opacity 300ms\";\r\n            el.style.opacity = \"1\";\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline />\r\n            <Hidden xsUp implementation=\"js\">\r\n                <Drawer\r\n                    variant=\"temporary\"\r\n                    open={mobileOpen}\r\n                    onClose={handleDrawerToggle}\r\n                    classes={{\r\n                        paper: classes.drawerPaperOpen,\r\n                    }}\r\n                    ModalProps={{\r\n                        keepMounted: true, // Better open performance on mobile.\r\n                    }}\r\n                >\r\n                    <nav className={classes.drawer}\r\n                        aria-label=\"mailbox folders\">\r\n                        <div style={{ width: drawerWidth }}>\r\n                            <div className={classes.toolbar} />\r\n                            <NavigationList\r\n                                menus={props.menus}\r\n                                settings={props.settings}\r\n                                routePressed={routePressed} />\r\n                        </div>\r\n                    </nav>\r\n                </Drawer>\r\n            </Hidden>\r\n            <Hidden xsDown implementation=\"js\">\r\n                <nav className={classes.drawer}\r\n                    style={{ width: mobileOpen ? drawerWidth : closeWidth }}\r\n                    aria-label=\"mailbox folders\">\r\n                    <Drawer\r\n                        classes={{\r\n                            paper: mobileOpen ? classes.drawerPaperOpen : classes.drawerPaperClose\r\n                        }}\r\n                        variant=\"permanent\"\r\n                        open\r\n                    >\r\n                        <div style={{ width: drawerWidth }}>\r\n                            <IconButton\r\n                                color=\"inherit\"\r\n                                aria-label=\"open drawer\"\r\n                                onClick={handleDrawerToggle}\r\n                            >\r\n                                <MenuIcon />\r\n                            </IconButton>\r\n\r\n                            <Box ml={mobileOpen ? 4 : 1} display=\"flex\" alignItems=\"center\">\r\n                                <div style={{\r\n                                    marginTop: \"2px\",\r\n                                    marginRight:\"4px\",\r\n                                    height: mobileOpen ? \"48px\" : \"36px\",\r\n                                    width: mobileOpen ? \"48px\" : \"36px\",\r\n                                    background: theme.palette.primary.main,\r\n                                    borderRadius: \"50%\",\r\n                                    filter: \"blur(0.6px)\"\r\n                                }}></div>\r\n                                <img style={{\r\n                                    height: mobileOpen ? \"68px\" : \"56px\"\r\n                                }} src={props.logo} alt=\"maccha logo\" />\r\n                            </Box>\r\n\r\n                            {/* Profile */}\r\n                            <Box display=\"flex\"\r\n                                alignItems=\"center\"\r\n                                padding={mobileOpen ? \"8px\" : \"0px\"}\r\n                                mt={2}>\r\n                                <Box padding={\"8px\"}>\r\n                                    <Avatar src={`${axios.defaults.baseURL}${props.user.avatar}`}\r\n                                        alt={props.user.name}\r\n                                        style={{\r\n                                            width: mobileOpen ? \"72px\" : \"36px\",\r\n                                            height: mobileOpen ? \"72px\" : \"36px\",\r\n                                            background: theme.palette.primary.main\r\n                                        }}\r\n                                    />\r\n                                </Box>\r\n                                <Box flex=\"1 1 auto\" marginLeft=\"8px\" width=\"calc(100% - 94px)\">\r\n                                    <Typography\r\n                                        variant=\"h6\"\r\n                                        style={{ fontWeight: \"bold\" }}>\r\n                                        {props.user.name}\r\n                                    </Typography>\r\n                                    <Typography variant=\"caption\" style={{ color: \"rgb(168,168,168)\" }} >\r\n                                        {props.user.email}\r\n                                    </Typography>\r\n                                </Box>\r\n                            </Box>\r\n\r\n                            {/* Navigation */}\r\n                            <NavigationList\r\n                                menus={props.menus}\r\n                                settings={props.settings}\r\n                                routePressed={routePressed} />\r\n                        </div>\r\n                    </Drawer>\r\n                </nav>\r\n            </Hidden>\r\n            <main className={classes.content} >\r\n                <Toolbar className={classes.toolbar}\r\n                    style={{ marginRight: \"0px\", paddingRight: \"4px\" }}>\r\n                    <Hidden smUp implementation=\"js\">\r\n                        <IconButton\r\n                            color=\"inherit\"\r\n                            aria-label=\"open drawer\"\r\n                            onClick={handleDrawerToggle}\r\n                        >\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                    </Hidden>\r\n                    <Box\r\n                        display=\"flex\"\r\n                        alignItems=\"center\"\r\n                        width=\"100%\">\r\n                        {props.toolbarContent}\r\n                    </Box>\r\n                </Toolbar>\r\n\r\n                <Divider style={{ marginLeft: \"8px\", marginRight: \"8px\" }} />\r\n\r\n                <div className={classes.mainContainer} ref={opacityAnimationElement}>\r\n                    <Suspense fallback={\r\n                        !isLoading && <div style={{ display: \"none\" }}></div>\r\n                    }>\r\n                        <Switch>\r\n                            {routes.map((route, index) => (\r\n                                <Route key={index} exact={!!route.exact} path={route.path} component={route.lazyComponent} ></Route>\r\n                            ))}\r\n                        </Switch>\r\n                    </Suspense>\r\n                </div>\r\n            </main>\r\n        </div >\r\n    );\r\n}\r\n\r\nexport interface LazyRoute {\r\n    lazyComponent: PreloadableComponent<any>;\r\n    lazyChildren?: (LazyRoute & ChildRoute)[];\r\n}\r\n\r\ntype DrawerPropos<T extends RouteInfo> = {\r\n    menus: T[];\r\n    settings: T[];\r\n    routePressed: (route: T) => void | Promise<void>;\r\n}\r\n\r\nfunction NavigationList<T extends RouteInfo>(props: DrawerPropos<T>) {\r\n    const location = useLocation();\r\n    const theme = useTheme();\r\n    const parent = useRef<HTMLDivElement>(null);\r\n    const rectElement = useRef<HTMLDivElement>(null);\r\n\r\n    const [lastPeressed, setLastPressed] = useState(location.pathname);\r\n    const [lastTop, setLastTop] = useState(-1);\r\n    const [currentElement, setCurrentElement] = useState<HTMLDivElement | null>(null);\r\n\r\n    const isCurrentRoute = (path: string) => path.includes(lastPeressed) || lastPeressed.includes(path);\r\n\r\n    const routePressed = (e: React.MouseEvent<HTMLDivElement, MouseEvent>, route: T) => {\r\n        props.routePressed(route);\r\n        setLastPressed(route.path);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (currentElement) {\r\n            moveCaretPosition(currentElement, 6);\r\n        }\r\n    });\r\n\r\n    const moveCaretPosition = (targetElement: Element, margin: number) => {\r\n        const parentRect = parent.current?.getBoundingClientRect();\r\n        const rect = targetElement.getBoundingClientRect();\r\n        const style = rectElement.current?.style;\r\n\r\n        if (!parentRect || !rectElement.current || !style || rect.top === lastTop) return;\r\n\r\n        if (lastTop < rect.top) {\r\n            setTimeout(() => (style.top = `${rect.top + margin}px`), 150);\r\n            style.bottom = `calc(100% - ${rect.bottom - margin}px`;\r\n        }\r\n        else {\r\n            setTimeout(() => (style.bottom = `calc(100% - ${rect.bottom - margin}px`), 150);\r\n            style.top = `${rect.top + margin}px`;\r\n        }\r\n\r\n        setLastTop(rect.top);\r\n    };\r\n\r\n    return (\r\n        <div ref={parent}>\r\n            <List>\r\n                <Typography\r\n                    style={{ marginLeft: \"12px\", marginBottom: \"0px\", color: theme.palette.grey[500] }}\r\n                    variant=\"caption\"\r\n                >\r\n                    Menu\r\n                </Typography>\r\n                {props.menus.map((route, index) => (\r\n                    <Box\r\n                        key={index}\r\n                        margin=\"auto\"\r\n                        height=\"44px\"\r\n                        display=\"flex\"\r\n                        bgcolor={isCurrentRoute(route.path) ? \"rgba(127,127,127,0.08)\" : \"\"}\r\n                    >\r\n                        <ListItem button\r\n                            ref={elem => isCurrentRoute(route.path) && setCurrentElement(elem)}\r\n                            onClick={e => routePressed(e, route)}>\r\n                            <ListItemIcon >\r\n                                <Icon>{route.icon}</Icon>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={route.title} />\r\n                        </ListItem>\r\n                    </Box>\r\n                ))}\r\n            </List>\r\n\r\n            <List component=\"nav\">\r\n                {!!props.settings.length && <Typography\r\n                    style={{ marginLeft: \"12px\", marginBottom: \"0px\", color: theme.palette.grey[500] }}\r\n                    variant=\"caption\"\r\n                >\r\n                    Admin\r\n                </Typography>\r\n                }\r\n                {props.settings.map(route => (\r\n                    <Box\r\n                        key={route.path}\r\n                        margin=\"auto\"\r\n                        height=\"44px\"\r\n                        display=\"flex\"\r\n                        bgcolor={isCurrentRoute(route.path) ? \"rgba(127,127,127,0.08)\" : \"\"}\r\n                    >\r\n                        <ListItem button\r\n                            ref={elem => isCurrentRoute(route.path) && setCurrentElement(elem)}\r\n                            onClick={e => routePressed(e, route)}>\r\n                            <ListItemIcon >\r\n                                <Icon>{route.icon}</Icon>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={route.title} />\r\n                        </ListItem>\r\n                    </Box>\r\n                ))}\r\n            </List>\r\n            <div ref={rectElement} style={{\r\n                background: theme.palette.primary.main,\r\n                width: \"6px\",\r\n                transition: \"all 0.3s\",\r\n                position: \"absolute\"\r\n            }}></div>\r\n        </div >\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: \"flex\",\r\n            overflow: \"hidden\"\r\n        },\r\n        drawer: {\r\n            [theme.breakpoints.up(\"sm\")]: {\r\n                width: drawerWidth,\r\n                flexShrink: 0,\r\n            },\r\n            transition: theme.transitions.create([\"width\"], {\r\n                easing: theme.transitions.easing.easeInOut,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            }),\r\n        },\r\n        appBar: {\r\n            zIndex: 9999,\r\n        },\r\n        toolbar: {\r\n            marginRight: \"12px\",\r\n            marginLeft: \"12px\",\r\n            height: 60\r\n        },\r\n        drawerPaperOpen: {\r\n            overflow: \"auto\",\r\n            width: drawerWidth,\r\n            border: 0,\r\n            transition: theme.transitions.create([\"width\"], {\r\n                easing: theme.transitions.easing.easeInOut,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            }),\r\n        },\r\n        drawerPaperClose: {\r\n            overflow: \"auto\",\r\n            width: closeWidth,\r\n            border: 0,\r\n            transition: theme.transitions.create([\"width\"], {\r\n                easing: theme.transitions.easing.easeInOut,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            }),\r\n        },\r\n        content: {\r\n            flexGrow: 1,\r\n            padding: theme.spacing(0),\r\n            width: `calc(100vw - ${drawerWidth}px)`,\r\n        },\r\n        mainContainer: {\r\n            height: \"calc(100vh - 64px)\",\r\n            overflow: \"hidden\"\r\n        }\r\n    }),\r\n);","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Services\\UsersService.ts",["539","540","541","542","543","544","545","546"],"import { observable, computed, action, makeAutoObservable } from \"mobx\";\r\nimport { AuthRepository } from \"../Repositories/AuthRepository\";\r\nimport { LoginInfo } from \"../Models/auth/login-info\";\r\nimport { UsersRepository } from \"../Repositories/UsersRepository\";\r\nimport { User } from \"../Models/users/user\";\r\nimport { IUser } from \"../Models/users/user.interface\";\r\nimport { ICreateUserParams } from \"../Models/users/ICreateUserParams\";\r\n\r\n/**\r\n * Users serive.\r\n */\r\nexport class UsersService {\r\n    /**\r\n     * repository\r\n     */\r\n    private readonly repository = new UsersRepository();\r\n\r\n    /**\r\n     * All Users.\r\n     */\r\n    users: User[] = [];\r\n\r\n    /**\r\n     * Current selecetd user.\r\n     */\r\n    selected: User | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    /**\r\n     * Fetch users async.\r\n     */\r\n    public async fetchUesrsAsync() {\r\n        try {\r\n            const users = await this.repository.fetchUsersAsync();\r\n            console.log(users);\r\n            this.users = users;\r\n        }\r\n        catch {\r\n            throw new Error(\"failed to fetch users.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Save user async.\r\n     */\r\n    public async saveUserAsync(user: IUser) {\r\n        try {\r\n            await this.repository.saveUserAsync({\r\n                email: user.email,\r\n                isActive: user.isActive,\r\n                name: user.name,\r\n                role: user.role,\r\n                userId: user.userId,\r\n                identifiers: user.identifiers\r\n            });\r\n            await this.fetchUesrsAsync();\r\n        }\r\n        catch {\r\n            throw new Error(\"failed to save a user.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create new user async.\r\n     */\r\n    public async createNewUserAsync(user: ICreateUserParams) {\r\n        try {\r\n            await this.repository.createNewUserAsync({\r\n                email: user.email,\r\n                isActive: user.isActive,\r\n                name: user.name,\r\n                role: user.role,\r\n                identifiers: user.identifiers,\r\n                password: user.password\r\n            });\r\n            await this.fetchUesrsAsync();\r\n        }\r\n        catch {\r\n            throw new Error(\"failed to create a user.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fetch and select a user from user id.\r\n     * @param userId user id.\r\n     */\r\n    public async selectUserAsync(userId: string) {\r\n        try {\r\n            this.selected = await this.repository.fetchUserAsync(userId);\r\n        }\r\n        catch {\r\n            throw new Error(\"failed to fetch a user.\");\r\n        }\r\n    }\r\n\r\n    public async saveSelectedUserAsync() {\r\n        if (!this.selected) return;\r\n        await this.saveUserAsync(this.selected);\r\n    }\r\n\r\n    public async saveMyAvatarAsync(file: File) {\r\n        if (!this.selected) return;\r\n        await this.repository.saveAvatarAsync(file);\r\n        await this.selectUserAsync(this.selected.userId);\r\n    }\r\n\r\n    public setSelectedUser(value: User) {\r\n        this.selected = value;\r\n    }\r\n\r\n    /**\r\n     * clear current selected user.\r\n     */\r\n    public clearSelectedUser() {\r\n        this.selected = null;\r\n    }\r\n}\r\n","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Services\\WebSiteManagementsService.ts",["547","548","549","550","551","552"],"import { observable, computed, action, makeAutoObservable } from \"mobx\";\r\nimport { WebSiteManagementsRepository } from \"../Repositories/WebSiteManagementsRepository\";\r\nimport { WebSite } from \"../Models/sites/web-site\";\r\nimport { ICreateWebSiteParams } from \"../Models/sites/create-werb-site.params\";\r\nimport { IUpdateWebSiteParams } from \"../Models/sites/update-web-site.params\";\r\n\r\n/**\r\n * Users serive.\r\n */\r\nexport class WebSiteManagementsService {\r\n    private readonly repository = new WebSiteManagementsRepository();\r\n    private _webSites: WebSite[] = [];\r\n    private _selected: WebSite | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    /**\r\n     * WEBサイト一覧\r\n     */\r\n    public get webSites(): WebSite[] {\r\n        return this._webSites;\r\n    }\r\n\r\n    public get selected(): WebSite | null {\r\n        return this._selected;\r\n    }\r\n\r\n    /**\r\n     * clear current selected user.\r\n     */\r\n    public async fetchWebsitesAsync() {\r\n        try {\r\n            this._webSites = await this.repository.fetchWebSitesAync();\r\n        }\r\n        catch {\r\n            throw new Error(\"failed to fetch web site\");\r\n        }\r\n    }\r\n\r\n    public async saveWebSiteAsync(webSite: IUpdateWebSiteParams) {\r\n        try {\r\n            await this.repository.saveWebSiteAsync({\r\n                webSiteId: webSite.webSiteId,\r\n                name: webSite.name,\r\n                displayName: webSite.displayName,\r\n                description: webSite.description,\r\n                host: webSite.host\r\n            });\r\n            this.fetchWebsitesAsync();\r\n        }\r\n        catch {\r\n            throw new Error(\"failed to save web sites\");\r\n        }\r\n    }\r\n\r\n    public async createNewWwebSiteAsync(webSite: ICreateWebSiteParams) {\r\n        try {\r\n            await this.repository.createNewWebSiteAsync({\r\n                name: webSite.name,\r\n                displayName: webSite.displayName,\r\n                description: webSite.description,\r\n                host: webSite.host\r\n            });\r\n            this.fetchWebsitesAsync();\r\n        }\r\n        catch {\r\n            throw new Error(\"failed to create web site\");\r\n        }\r\n    }\r\n\r\n    public async saveAsync() {\r\n        if (!this.selected) return;\r\n        await this.saveWebSiteAsync(this.selected);\r\n    }\r\n\r\n    public async selectWebSiteAsync(identifier: string) {\r\n        try {\r\n            const webSite = await this.repository.fetchWebSiteAync(identifier);\r\n            this._selected = webSite;\r\n        }\r\n        catch {\r\n            throw new Error(\"failed to create web site\");\r\n        }\r\n    }\r\n\r\n    public async setSelectedWebSite(site: WebSite) {\r\n        this._selected = site;\r\n    }\r\n}\r\n","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Services\\PostManagementsService.ts",["553","554","555","556","557","558","559","560"],"import { observable, computed, action, makeAutoObservable } from \"mobx\";\r\nimport { PostsRepository } from \"../Repositories/PostsRepository\";\r\nimport { Post } from \"../Models/posts/entities/Post\";\r\nimport { PostManagementsRepository } from \"../Repositories/PostManagementsRepository\";\r\nimport { PostType } from \"../Models/posts/entities/PostType\";\r\nimport { ICreatePostTypeParams } from \"../Models/posts/params/ICreatePostTypeParams\";\r\nimport { ISavePostTypeParams } from \"../Models/posts/params/ISavePostTypeParams\";\r\n\r\n/**\r\n * Users serive.\r\n */\r\nexport class PostManagementsService {\r\n    private readonly repository = new PostManagementsRepository();\r\n    private _postTypes: PostType[] = [];\r\n    private _selectedIndex: number = 0;\r\n\r\n    public get postTypes() {\r\n        return this._postTypes;\r\n    }\r\n\r\n    public get selectedIndex() {\r\n        return this._selectedIndex;\r\n    }\r\n\r\n    public get selected(): PostType | null {\r\n        return this.postTypes[this.selectedIndex] ?? null;\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    /**\r\n     * clear current selected user.\r\n     * @param selectTaxonomy Taxonomy name if select.\r\n     */\r\n    public async fetchPostTypes(selectTaxonomy?: string) {\r\n        try {\r\n            this._postTypes = await this.repository.fetchPostTypesAsync();\r\n            if (selectTaxonomy) {\r\n                this.selectFromName(selectTaxonomy);\r\n            }\r\n        }\r\n        catch {\r\n            console.error(\"failed to fetch post types.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * clear current selected user.\r\n     */\r\n    public async createPostTypeAsync(postType: ICreatePostTypeParams) {\r\n        try {\r\n            const created = await this.repository.createPostType(postType);\r\n            await this.fetchPostTypes();\r\n            if (created) {\r\n                this.selectFromName(created.taxonomy.name);\r\n            }\r\n        }\r\n        catch {\r\n            console.error(\"failed to create post type.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * select post type.\r\n     * @param index post types index\r\n     */\r\n    public selectFromIndex(index: number) {\r\n        this._selectedIndex = Math.min(\r\n            this.postTypes.length, Math.max(0, index)\r\n        );\r\n    }\r\n\r\n    public async removeAsync(postTypeId: string) {\r\n        try {\r\n            const selected = this.selected;\r\n\r\n            await this.repository.removeAsync(postTypeId);\r\n            await this.fetchPostTypes();\r\n\r\n            if (selected) {\r\n                this.selectFromName(selected.taxonomy.name);\r\n            }\r\n\r\n            if (!this.selected) {\r\n                this.selectFromIndex(0);\r\n            }\r\n        }\r\n        catch {\r\n            throw new Error(\"Failed to delete.\");\r\n        }\r\n    }\r\n\r\n    public async savePostTypeAsync(params: ISavePostTypeParams) {\r\n        try {\r\n            await this.repository.saveAsync(params);\r\n            await this.fetchPostTypes();\r\n        }\r\n        catch {\r\n            throw new Error(\"Failed to save post type.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * select post type.\r\n     * @param index post types index\r\n     */\r\n    public selectFromName(name: string) {\r\n        const type = this.postTypes.find(t => t.taxonomy.name === name);\r\n        if (type) {\r\n            this._selectedIndex = this.postTypes.indexOf(type);\r\n        }\r\n    }\r\n}\r\n","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Services\\AuthService.ts",["561","562"],"import { observable, computed, action, makeObservable } from \"mobx\";\r\nimport { AuthRepository } from \"../Repositories/AuthRepository\";\r\nimport { LoginInfo } from \"../Models/auth/login-info\";\r\nimport { RoleType } from \"../Models\";\r\nimport { setToken } from \"../Repositories/config\";\r\n\r\nexport class AuthService {\r\n    private readonly repository = new AuthRepository();\r\n\r\n    /**\r\n     * login info\r\n     */\r\n    loginInfo!: LoginInfo;\r\n\r\n    /**\r\n     * is login.\r\n     */\r\n    isLogin = false;\r\n\r\n    /**\r\n     * Constructor.\r\n     */\r\n    constructor() {\r\n        makeObservable(this, {\r\n            loginInfo: observable,\r\n            isLogin: observable,\r\n            logout: action,\r\n            loadFromLocalStorage: action,\r\n            validateAuth: action,\r\n            refreshAsync: action,\r\n            login: action,\r\n            initialize: action\r\n        });\r\n    }\r\n\r\n    public logout() {\r\n        this.repository.clearLocalStorage();\r\n    }\r\n\r\n    /**\r\n     * load login info from local storage.\r\n     */\r\n    public loadFromLocalStorage() {\r\n        this.loginInfo = this.repository.loadFromLocalStorage();\r\n    }\r\n\r\n    /**\r\n     * valide is token enabled.\r\n     */\r\n    public async validateAuth() {\r\n        try {\r\n            if (await this.repository.validate(this.loginInfo.token)) {\r\n                this.repository.saveToLocalStorage(this.loginInfo);\r\n                this.isLogin = true;\r\n            }\r\n            else {\r\n                throw new Error();\r\n            }\r\n        }\r\n        catch {\r\n            console.error(\"Failed to login.\");\r\n            this.repository.clearLocalStorage();\r\n            this.isLogin = false;\r\n            this.loginInfo = new LoginInfo();\r\n            throw new Error(\"Failed to login.\");\r\n        }\r\n    }\r\n\r\n    public async refreshAsync(identifier?: string) {\r\n        try {\r\n            this.loginInfo = await this.repository.refresh(this.loginInfo.refreshToken, identifier ?? this.loginInfo.identifier);\r\n            this.repository.saveToLocalStorage(this.loginInfo);\r\n            setToken(this.loginInfo.token);\r\n            this.isLogin = true;\r\n        }\r\n        catch {\r\n            console.error(\"Failed to login.\");\r\n            this.repository.clearLocalStorage();\r\n            this.isLogin = false;\r\n            throw new Error(\"Failed to login.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * invoke login.\r\n     * @param email email\r\n     * @param password password\r\n     */\r\n    public async login(email: string, password: string) {\r\n        try {\r\n            this.loginInfo = await this.repository.login(email, password);\r\n            this.repository.saveToLocalStorage(this.loginInfo);\r\n            this.isLogin = true;\r\n        }\r\n        catch {\r\n            console.error(\"Failed to login.\");\r\n            this.isLogin = false;\r\n            this.repository.clearLocalStorage();\r\n            throw new Error(\"Failed to login.\");\r\n        }\r\n    }\r\n\r\n    public initialize() {\r\n        this.loadFromLocalStorage();\r\n        this.isLogin = this.checkIsLogin();\r\n    }\r\n\r\n    /**\r\n     * check login status from stored login info.\r\n     */\r\n    private checkIsLogin() {\r\n        return this.loginInfo.exp < Date.now();\r\n    }\r\n}\r\n","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Services\\PostsService.ts",["563","564","565","566","567","568","569"],"import { observable, computed, action, makeAutoObservable } from \"mobx\";\r\nimport { PostsRepository } from \"../Repositories/PostsRepository\";\r\nimport { Post } from \"../Models/posts/entities/Post\";\r\nimport { PostType } from \"../Models/posts/entities/PostType\";\r\nimport { Content } from \"../Models/Contents/Entities/Content\";\r\nimport { ISearchContentParams } from \"../Models/Contents/Params\";\r\n\r\n/**\r\n * Users serive.\r\n */\r\nexport class PostsService {\r\n    private readonly repository = new PostsRepository();\r\n    private _posts: Content[] = [];\r\n    private _hitCount = 0;\r\n    private _searchOption: ISearchContentParams = {\r\n        fetch: 30,\r\n        offset: 0,\r\n        filter: \"\",\r\n        limit: \"\",\r\n        order: \"\"\r\n    };\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    public get posts() {\r\n        return this._posts;\r\n    }\r\n\r\n    public get hitCount() {\r\n        return this._hitCount;\r\n    }\r\n\r\n    public get searchOption() {\r\n        return this._searchOption;\r\n    }\r\n\r\n    /**\r\n     * Set new search option.\r\n     * @param option search option.\r\n     */\r\n    public setSearchOption(option: ISearchContentParams) {\r\n        this._searchOption = option;\r\n    }\r\n\r\n    /**\r\n     * clear current selected user.\r\n     */\r\n    public async searchPostsAsync(postTypeName: string) {\r\n        try {\r\n            const searchResult = await this.repository.searchPostsAsync(postTypeName, this.searchOption);\r\n            this._hitCount = searchResult.hitCount;\r\n            this._posts = searchResult.collection;\r\n        }\r\n        catch {\r\n            console.error(\"failed to search posts.\");\r\n        }\r\n    }\r\n\r\n    public async deleteFromId(taxonomy: string, postId: string) {\r\n        try {\r\n            await this.repository.deletePostAsync(taxonomy, postId);\r\n        }\r\n        catch {\r\n            console.error(\"failed to fetch post types.\");\r\n        }\r\n    }\r\n}\r\n","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Services\\MediaService.ts",["570","571","572"],"import { observable, computed, action, makeAutoObservable } from \"mobx\";\r\nimport { MediaRepositry } from \"../Repositories/MediaRepository\";\r\n\r\nexport class MediaService {\r\n    private mediaRepository = new MediaRepositry();\r\n    private _files: string[] = [];\r\n    private _selected: string[] = [];\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    public get selected() {\r\n        return this._selected;\r\n    }\r\n\r\n    public get files() {\r\n        return this._files;\r\n    }\r\n\r\n    public setSelected(selected: string[]) {\r\n        this._selected = [...selected];\r\n    }\r\n\r\n    public async removeSelectedAsync() {\r\n        try {\r\n            await this.mediaRepository.removeAsync(this.selected);\r\n            await this.fetchAllFilesAsync();\r\n        }\r\n        catch {\r\n            throw new Error(\"Failed to remove files. Files: \"+ this.selected.join(\",\"));\r\n        }\r\n    }\r\n\r\n    public async fetchAllFilesAsync(): Promise<void> {\r\n        try {\r\n            this._files = await this.mediaRepository.fetchAllFilesAsync();\r\n        }\r\n        catch {\r\n            throw new Error(\"Failed to fetch files.\");\r\n        }\r\n    }\r\n\r\n    public async postAsync(file: File): Promise<string | undefined> {\r\n        try {\r\n            const path = await this.mediaRepository.postAsync(file);\r\n            await this.fetchAllFilesAsync();\r\n            return path;\r\n        }\r\n        catch {\r\n            throw new Error(\"Failed to fetch files.\");\r\n        }\r\n    }\r\n}","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Services\\PostEditService.ts",["573","574","575","576","577","578"],"import { observable, computed, action, makeAutoObservable } from \"mobx\";\r\nimport { PostsRepository } from \"../Repositories/PostsRepository\";\r\nimport { Post } from \"../Models/posts/entities/Post\";\r\nimport { PostType } from \"../Models/posts/entities/PostType\";\r\nimport { Content } from \"../Models/Contents/Entities/Content\";\r\nimport { Taxonomy } from \"../Models/Contents/Entities/Taxonomy\";\r\nimport { Field } from \"../Models/Contents/Entities/Field\";\r\n\r\n/**\r\n * Users serive.\r\n */\r\nexport class PostsEditServic {\r\n    private readonly repository = new PostsRepository();\r\n    private _content: Content | null = null;\r\n    private isNew = false;\r\n    private _taxonomy: string | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    public get content(): Content | null {\r\n        return this._content;\r\n    }\r\n\r\n    public get taxonomy() {\r\n        return this._taxonomy;\r\n    }\r\n\r\n    public setContent(content: Content) {\r\n        this._content = content;\r\n    }\r\n\r\n    public initializeAsNewPost(taxonomy: Taxonomy) {\r\n        this.setContent(new Content({\r\n            fields: taxonomy.schemes.map(s => new Field({\r\n                name: s.name,\r\n                schemeId: s.schemeId,\r\n                value: \"\"\r\n            }))\r\n        }));\r\n        this._taxonomy = taxonomy.name;\r\n        this.isNew = true;\r\n    }\r\n\r\n    public clear() {\r\n        this._content = null;\r\n        this.isNew = false;\r\n        this._taxonomy = null;\r\n    }\r\n\r\n    public async fetchAsync(taxonomy: string, contentId: string) {\r\n        try {\r\n            this._taxonomy = taxonomy;\r\n            const content = await this.repository.fetchPostAsync(taxonomy, contentId);\r\n            this.setContent(content);\r\n        }\r\n        catch {\r\n            console.error(\"failed to search posts.\");\r\n        }\r\n    }\r\n\r\n    public async saveAsync() {\r\n        const content = this.content;\r\n        if (content === null) {\r\n            throw new Error(\"post is not selected or initializeed.\");\r\n        }\r\n        else if (this.taxonomy === null) {\r\n            throw new Error(\"post type is not selected.\");\r\n        }\r\n\r\n        try {\r\n            if (this.isNew) {\r\n                await this.repository.createPostAsync(\r\n                    this.taxonomy,\r\n                    new Content({\r\n                        taxonomyId: content.taxonomyId,\r\n                        description: content.description,\r\n                        updatedAt: content.updatedAt.toISO() as any,\r\n                        createdAt: content.createdAt.toISO() as any,\r\n                        publishIn: content.publishIn?.toISO() as any ?? null,\r\n                        fields: content.fields.map(x => new Field({\r\n                            name: x.name,\r\n                            schemeId: x.schemeId,\r\n                            value: x.value\r\n                        })),\r\n                        status: content.status,\r\n                        thumbnail: content.thumbnail,\r\n                        title: content.title,\r\n                        metadata: content.metadata\r\n                    })\r\n                );\r\n            }\r\n            else {\r\n                await this.repository.saveAsync(\r\n                    this.taxonomy,\r\n                    new Content({\r\n                        contentId: content.contentId,\r\n                        taxonomyId: content.taxonomyId,\r\n                        description: content.description,\r\n                        updatedAt: content.updatedAt.toISO() as any,\r\n                        createdAt: content.createdAt.toISO() as any,\r\n                        publishIn: content.publishIn?.toISO() as any ?? null,\r\n                        fields: content.fields.map(x => new Field({\r\n                            name: x.name,\r\n                            schemeId: x.schemeId,\r\n                            value: x.value\r\n                        })),\r\n                        status: content.status,\r\n                        thumbnail: content.thumbnail,\r\n                        title: content.title,\r\n                        metadata: content.metadata\r\n                    })\r\n                );\r\n            }\r\n        }\r\n        catch {\r\n            console.error(\"failed to search posts.\");\r\n        }\r\n    }\r\n\r\n    public async deleteAsync() {\r\n        // :TODO delete current context\r\n    }\r\n}\r\n","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Services\\PluginsService.ts",["579","580","581","582","583","584"],"import { observable, computed, action, makeAutoObservable } from \"mobx\";\r\nimport { AuthRepository } from \"../Repositories/AuthRepository\";\r\nimport { LoginInfo } from \"../Models/auth/login-info\";\r\nimport { RoleType } from \"../Models\";\r\nimport { PluginAdapter } from \"../Plugins/PluginAdapter\";\r\nimport { Route } from \"../Models/route\";\r\n\r\nexport class PluginsService {\r\n    private pluginAdapter = new PluginAdapter();\r\n\r\n    private _plugins: Route[] = [];\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    public get plugins() {\r\n        return this._plugins;\r\n    }\r\n\r\n    public async fetchAsync(): Promise<void> {\r\n        const plugins = [{\r\n            pluginName: \"SamplePlugin\",\r\n            url: \"http://localhost:8080/index.js\",\r\n            role: RoleType.Subscribe,\r\n            icon: \"edit\",\r\n            path: \"/sample\",\r\n            title: \"サンプルプラグイン\"\r\n        }];\r\n\r\n        this._plugins = plugins.map(\r\n            plugin => ({\r\n                component: () => this.pluginAdapter.atatch({\r\n                    pluginName: plugin.pluginName,\r\n                    url: plugin.url\r\n                }),\r\n                role: plugin.role,\r\n                icon: plugin.icon,\r\n                path: plugin.path,\r\n                title: plugin.title,\r\n            })\r\n        );\r\n    }\r\n}\r\n","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\main\\MainPage.tsx",[],"C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\login\\LoginPage.tsx",["585","586","587"],"C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\users\\UserPage.tsx",["588","589","590","591","592","593","594","595","596","597","598","599","600","601","602","603","604","605","606","607"],"import React, { useEffect, useState, ReactComponentElement, cloneElement } from \"react\";\r\nimport { render, unmountComponentAtNode, } from \"react-dom\";\r\nimport { useObserver } from \"mobx-react\";\r\nimport { services } from \"../../Services\";\r\nimport {\r\n    Paper,\r\n    TableContainer,\r\n    Icon,\r\n    Table,\r\n    Fab,\r\n    Modal,\r\n    Backdrop,\r\n    Fade,\r\n    Toolbar,\r\n    IconButton, TableCell,\r\n    TableHead, TableRow, TableBody, TablePagination, makeStyles,\r\n    Checkbox, Box, InputBase, useTheme, Button, Chip, Avatar\r\n} from \"@material-ui/core\";\r\nimport {\r\n    Search,\r\n    Add\r\n} from \"@material-ui/icons\";\r\nimport ProfileImage from \"../commons/ProfileImage\";\r\nimport { showUserDetailsDialogAsync } from \"./ecosystems/UserDetailsDialog\";\r\nimport { IUser } from \"../../Models/users/user.interface\";\r\nimport { User } from \"../../Models/users/user\";\r\nimport { RoleType, displayRoles } from \"../../Models\";\r\nimport { axios } from \"../../Repositories/config\";\r\n\r\nexport default function UsersPage() {\r\n    const classes = useStyles();\r\n    const [selected, setSelected] = React.useState<string[]>([]);\r\n    const [page, setPage] = React.useState(0);\r\n    const [dense, setDense] = React.useState(false);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n    const theme = useTheme();\r\n\r\n    useEffect(() => {\r\n        services.usersService.fetchUesrsAsync();\r\n    }, []);\r\n\r\n    const createAsync = async () => {\r\n        const user = await showUserDetailsDialogAsync(\r\n            new User(\r\n                \"\",\r\n                \"\",\r\n                \"\",\r\n                RoleType.Subscribe,\r\n                true,\r\n                services.authService.loginInfo.identifier ?\r\n                    [services.authService.loginInfo.identifier] :\r\n                    [],\r\n                \"\"\r\n            ),\r\n            true\r\n        );\r\n        if (user) {\r\n            await services.usersService.createNewUserAsync({\r\n                email: user.email,\r\n                isActive: user.isActive,\r\n                name: user.name,\r\n                role: user.role,\r\n                identifiers: user.identifiers,\r\n                password: user.password ?? \"\"\r\n            });\r\n        }\r\n    };\r\n\r\n    const editEsync = async (user: IUser) => {\r\n        const edited = await showUserDetailsDialogAsync(user);\r\n        if (edited) {\r\n            await services.usersService.saveUserAsync(edited);\r\n        }\r\n    };\r\n\r\n\r\n    return useObserver(() => {\r\n        const { usersService } = services;\r\n        return (\r\n            <Box p={2} height=\"100%\" display=\"flex\" flexDirection=\"column\" >\r\n                <Toolbar style={{ paddingRight: \"0\" }}>\r\n                    <Paper style={{ marginLeft: \"auto\" }} elevation={2} >\r\n                        <InputBase\r\n                            style={{\r\n                                marginLeft: theme.spacing(2),\r\n                                flex: 1,\r\n                            }}\r\n                            placeholder=\"検索\"\r\n                            inputProps={{ \"aria-label\": \"検索\" }}\r\n                        />\r\n                        <IconButton type=\"submit\" style={{ padding: \"10px\" }} aria-label=\"search\">\r\n                            <Search />\r\n                        </IconButton>\r\n                    </Paper>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        style={{\r\n                            marginLeft: \"8px\",\r\n                            height: \"44px\",\r\n                            borderRadius: \"22px\"\r\n                        }}\r\n                        color=\"primary\"\r\n                        onClick={() => createAsync()}>\r\n                        <Add ></Add>\r\n                        追加\r\n                    </Button>\r\n                </Toolbar>\r\n\r\n                <Paper className={classes.root} elevation={2}>\r\n                    <TableContainer className={classes.container}>\r\n                        <Table stickyHeader aria-label=\"sticky table\">\r\n                            <TableHead >\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        Name\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        E-Mail\r\n                                    </TableCell>\r\n                                    <TableCell width=\"500px\">\r\n                                        Web Site\r\n                                    </TableCell>\r\n                                    <TableCell style={{ textAlign: \"center\" }}>\r\n                                        Role\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        Enabled\r\n                                    </TableCell>\r\n                                    <TableCell style={{ textAlign: \"center\" }}>\r\n                                        Detail\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {usersService.users.map((user, i) => (\r\n                                    <TableRow key={user.email}>\r\n                                        <TableCell padding=\"checkbox\">\r\n                                            <Checkbox\r\n                                                color=\"primary\"\r\n                                            // indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                                            // checked={rowCount > 0 && numSelected === rowCount}\r\n                                            // onChange={onSelectAllClick}\r\n                                            // inputProps={{ 'aria-label': 'select all desserts' }}\r\n                                            />\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            <Avatar src={axios.defaults.baseURL + user.avatar} alt={user.name} />\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            {user.name}\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            {user.email}\r\n                                        </TableCell>\r\n                                        <TableCell >\r\n                                            <Box style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n                                                {\r\n                                                    user.role === RoleType.Admin ?\r\n                                                        <Box padding=\"4px\">\r\n                                                            <Chip color=\"primary\" label=\"管理者\"></Chip>\r\n                                                        </Box>\r\n                                                        :\r\n                                                        user.identifiers.slice(0, 6).map(identifier => (\r\n                                                            <Box padding=\"4px\">\r\n                                                                <Chip color=\"primary\" label={identifier}></Chip>\r\n                                                            </Box>\r\n                                                        ))\r\n                                                }\r\n                                            </Box>\r\n                                        </TableCell>\r\n                                        <TableCell style={{ textAlign: \"center\" }}>\r\n                                            {displayRoles[user.role]}\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            {user.isActive ? \"有効\" : \"無効\"}\r\n                                        </TableCell>\r\n                                        <TableCell style={{ textAlign: \"center\" }}>\r\n                                            <IconButton onClick={() => editEsync(user)}><Icon>list</Icon></IconButton>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                    {/* // <TablePagination\r\n                //     rowsPerPageOptions={[10, 25, 100]}\r\n                //     component=\"div\"\r\n                //     count={rows.length}\r\n                //     rowsPerPage={rowsPerPage}\r\n                //     page={page}\r\n                //     onChangePage={handleChangePage}\r\n                //     onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                // /> */}\r\n                </Paper>\r\n            </Box >\r\n        );\r\n    });\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: \"100%\",\r\n        flex: \"1 1 auto\",\r\n        marginTop: \"8px\",\r\n        overflowY: \"auto\"\r\n    },\r\n    container: {\r\n        height: \"100%\",\r\n    },\r\n});","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\web-sites\\WebSiteManagementsPage.tsx",["608","609","610","611","612","613","614","615","616","617","618","619","620","621"],"import React, { useEffect } from \"react\";\r\nimport { useObserver } from \"mobx-react\";\r\nimport { services } from \"../../Services\";\r\nimport {\r\n    Paper,\r\n    TableContainer,\r\n    Icon,\r\n    Table,\r\n    IconButton, TableCell,\r\n    TableHead, TableRow, TableBody, TablePagination, makeStyles,\r\n    Checkbox, Box, useTheme, Modal, Fade, Backdrop, Toolbar, InputBase, Fab, Button\r\n} from \"@material-ui/core\";\r\nimport {\r\n    Search,\r\n    Add\r\n} from \"@material-ui/icons\";\r\n\r\nimport { showWebSiteDetailsDialogAsync } from \"./ecosystems/WebSiteDetailDialog\";\r\nimport { WebSite } from \"../../Models/sites/web-site\";\r\n\r\nexport default function WebSiteManagementsPage() {\r\n    const classes = useStyles();\r\n    // const [order, setOrder] = React.useState<Order>('asc');\r\n    // const [orderBy, setOrderBy] = React.useState<keyof Data>('calories');\r\n    const [selected, setSelected] = React.useState<string[]>([]);\r\n    const [page, setPage] = React.useState(0);\r\n    const [dense, setDense] = React.useState(false);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n    const theme = useTheme();\r\n\r\n    useEffect(() => {\r\n        services.webSiteManagementsService.fetchWebsitesAsync();\r\n    }, []);\r\n\r\n    const createAsync = async () => {\r\n        const webSite = await showWebSiteDetailsDialogAsync(new WebSite(\"\", \"\", \"\", \"\", \"\"));\r\n        if (webSite) {\r\n            await services.webSiteManagementsService.createNewWwebSiteAsync({\r\n                description: webSite.description,\r\n                displayName: webSite.displayName,\r\n                host: webSite.host,\r\n                name: webSite.name\r\n            });\r\n        }\r\n    };\r\n\r\n    const editAsync = async (webSite: WebSite) => {\r\n        const edited = await showWebSiteDetailsDialogAsync(webSite);\r\n        if (edited) {\r\n            await services.webSiteManagementsService.saveWebSiteAsync({\r\n                webSiteId: edited.webSiteId,\r\n                description: edited.description,\r\n                displayName: edited.displayName,\r\n                host: edited.host,\r\n                name: edited.name\r\n            });\r\n        }\r\n    };\r\n\r\n    return useObserver(() => {\r\n        const { webSiteManagementsService } = services;\r\n        return (\r\n            <Box p={2} height=\"100%\" display=\"flex\" flexDirection=\"column\" >\r\n                <Toolbar style={{ paddingRight: \"0\" }}>\r\n                    <Paper style={{ marginLeft: \"auto\" }} elevation={2} >\r\n                        <InputBase\r\n                            style={{\r\n                                marginLeft: theme.spacing(1),\r\n                                flex: 1,\r\n                            }}\r\n                            placeholder=\"検索\"\r\n                            inputProps={{ \"aria-label\": \"検索\" }}\r\n                        />\r\n                        <IconButton type=\"submit\" style={{ padding: \"10px\" }} aria-label=\"search\">\r\n                            <Search />\r\n                        </IconButton>\r\n                    </Paper>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        style={{\r\n                            marginLeft: \"8px\",\r\n                            height: \"44px\",\r\n                            borderRadius: \"22px\"\r\n                        }}\r\n                        color=\"primary\"\r\n                        onClick={() => createAsync()}>\r\n                        <Add ></Add>\r\n                        追加\r\n                    </Button>\r\n                </Toolbar>\r\n                <Paper className={classes.root} elevation={2}>\r\n                    <TableContainer className={classes.container}>\r\n                        <Table stickyHeader aria-label=\"sticky table\">\r\n                            <TableHead >\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        サイト名\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        識別名\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        ホスト\r\n                                    </TableCell>\r\n                                    <TableCell style={{ textAlign: \"center\" }}>\r\n                                        備考\r\n                                    </TableCell>\r\n                                    <TableCell style={{ textAlign: \"center\" }}>\r\n                                        詳細\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {webSiteManagementsService.webSites.map((site, i) => (\r\n                                    <TableRow key={i}>\r\n                                        <TableCell padding=\"checkbox\">\r\n                                            <Checkbox\r\n                                                color=\"primary\"\r\n                                            // indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                                            // checked={rowCount > 0 && numSelected === rowCount}\r\n                                            // onChange={onSelectAllClick}\r\n                                            // inputProps={{ 'aria-label': 'select all desserts' }}\r\n                                            />\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            {site.displayName}\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            {site.name}\r\n                                        </TableCell>\r\n                                        <TableCell style={{ textAlign: \"center\" }}>\r\n                                            <a\r\n                                                style={{\r\n                                                    color: theme.palette.primary.main\r\n                                                }}\r\n                                                target=\"_blank\"\r\n                                                href={site.host}\r\n                                            >\r\n                                                {site.host}\r\n                                            </a>\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            {site.description}\r\n                                        </TableCell>\r\n                                        <TableCell style={{ textAlign: \"center\" }}>\r\n                                            <IconButton onClick={() => editAsync(site)}><Icon>list</Icon></IconButton>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                    {/* // <TablePagination\r\n                //     rowsPerPageOptions={[10, 25, 100]}\r\n                //     component=\"div\"\r\n                //     count={rows.length}\r\n                //     rowsPerPage={rowsPerPage}\r\n                //     page={page}\r\n                //     onChangePage={handleChangePage}\r\n                //     onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                // /> */}\r\n                </Paper>\r\n            </Box>\r\n        );\r\n    });\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: \"100%\",\r\n        flex: \"1 1 auto\",\r\n        marginTop: \"8px\",\r\n        overflowY: \"auto\"\r\n    },\r\n    container: {\r\n        height: \"100%\"\r\n    },\r\n});","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\References\\ApiReferencePage.tsx",["622"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { axios } from \"../../Repositories/config\";\r\n\r\nexport default function ApiReferencePage() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <iframe className={classes.iframe} src={axios.defaults.baseURL + \"api\"}></iframe>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    iframe: {\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        border: \"none\"\r\n    }\r\n});","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\Environments\\PostPreviewPage.tsx",["623","624","625","626","627","628","629","630","631","632","633","634","635","636","637","638"],"import React, { useEffect, useState, ReactComponentElement, cloneElement } from \"react\";\r\nimport {\r\n    Tabs, Tab, Divider,\r\n    Icon,\r\n    TextField, Box, Typography, Button, Select, Fab\r\n} from \"@material-ui/core\";\r\nimport { Post } from \"../../../Models/posts/entities/Post\";\r\nimport SwipeableViews from \"react-swipeable-views\";\r\nimport { services } from \"../../../Services\";\r\nimport { Observer, useObserver } from \"mobx-react\";\r\nimport { useRouteMatch, useHistory } from \"react-router-dom\";\r\nimport { PostEditOptionPanel } from \"../Ecosystems/PostEditOptionPanel\";\r\nimport { RitchEditor } from \"../../commons/Editor/RitchEditor\";\r\n\r\nimport \"./style.scss\";\r\nimport { PostPreviewPanel } from \"../Ecosystems/PostPreviewPanel\";\r\n\r\ninterface TabPanelProps {\r\n    children?: React.ReactNode;\r\n    index: any;\r\n    value: any;\r\n}\r\n\r\nexport default function PostPreviewPage() {\r\n    const { postEditService, postManagementsService } = services;\r\n    const match = useRouteMatch<any>();\r\n    const hisptory = useHistory();\r\n\r\n    function handleEdit() {\r\n        const content = postEditService.content;\r\n        if (content || postEditService.taxonomy) {\r\n            hisptory.push(`/posts/${postEditService.taxonomy}/${content?.contentId}/edit`);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        postEditService.clear();\r\n        postEditService.fetchAsync(match.params.taxonomy, match.params.contentId);\r\n        postManagementsService.fetchPostTypes(match.params.taxonomy);\r\n    }, []);\r\n\r\n    return (\r\n        <Observer>\r\n            {\r\n                () => {\r\n                    return (\r\n                        <Box\r\n                            overflow=\"auto\"\r\n                            height=\"100%\"\r\n                            display=\"flex\"\r\n                            flexDirection=\"column\"\r\n                            position=\"relative\"\r\n                            alignItems=\"center\"\r\n                            width=\"100%\"\r\n                        >\r\n                            <PostPreviewPanel />\r\n                            <Fab color=\"primary\"\r\n                                onClick={() => handleEdit()} style={{ right: \"40px\", bottom: \"40px\", position: \"fixed\" }}\r\n                            ><Icon>edit</Icon></Fab>\r\n                        </Box >\r\n                    );\r\n                }\r\n            }\r\n        </Observer>\r\n    );\r\n}","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\Environments\\PostsPage.tsx",["639","640","641","642","643","644","645","646","647","648","649","650","651","652","653","654","655","656","657","658","659","660"],"import React, { useEffect, useState, ReactComponentElement, cloneElement } from \"react\";\r\nimport { render, unmountComponentAtNode, } from \"react-dom\";\r\nimport { Observer, useObserver } from \"mobx-react\";\r\nimport { services } from \"../../../Services\";\r\nimport {\r\n    List,\r\n    makeStyles,\r\n    ListItem,\r\n    ListItemIcon,\r\n    Checkbox, Box, InputBase, useTheme, Button, ListItemText,\r\n    Tabs, Tab,\r\n    Icon,\r\n    Divider,\r\n    Menu,\r\n    Fade,\r\n    MenuItem,\r\n    Slide,\r\n    IconButton,\r\n    Grow,\r\n    Fab,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {\r\n    Search,\r\n    Add,\r\n    MoreVert\r\n} from \"@material-ui/icons\";\r\nimport { PostTypeSettingPanel } from \"../Ecosystems/PostTypeSettingDisplayPanel\";\r\nimport ProfileImage from \"../../commons/ProfileImage\";\r\nimport { IUser } from \"../../../Models/users/user.interface\";\r\nimport { User } from \"../../../Models/users/user\";\r\nimport { RoleType, displayRoles } from \"../../../Models\";\r\nimport SwipeableViews from \"react-swipeable-views\";\r\nimport { theme } from \"../../../theme\";\r\nimport { PostType } from \"../../../Models/posts/entities/PostType\";\r\nimport PostListPanel from \"../Ecosystems/PostListPanel\";\r\nimport { useHistory, useRouteMatch, Route } from \"react-router-dom\";\r\nimport { confirmDeletePostTypeAsync } from \"../Ecosystems/confirmRemovePostTypeDialog\";\r\n\r\ninterface TabPanelProps {\r\n    children?: React.ReactNode;\r\n    index: any;\r\n    value: any;\r\n}\r\n\r\nfunction TabPanel(props: TabPanelProps) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`scrollable-force-tabpanel-${index}`}\r\n            aria-labelledby={`scrollable-force-tab-${index}`}\r\n            {...other}\r\n            style={{ height: \"100%\" }}\r\n        >\r\n            {value === index && (\r\n                <Box height=\"100%\" p={3}>\r\n                    {children}\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default function PostsPage() {\r\n    const classes = useStyles();\r\n    const routeMatch = useRouteMatch<{ taxonomy: string; }>();\r\n    const history = useHistory();\r\n\r\n    const [postTypeAnimation, setPostTypeAnimation] = useState(false);\r\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n\r\n    const [postTypeContext, setPostTypeContext] = useState<PostType | null>(null);\r\n\r\n    useEffect(() => {\r\n        services.postManagementsService.fetchPostTypes().then(() => {\r\n            const selected = services.postManagementsService.selected;\r\n            if (selected) {\r\n                if (!routeMatch.params.taxonomy) {\r\n                    history.replace(`/posts/${selected.taxonomy.name}`);\r\n                }\r\n                else {\r\n                    services.postManagementsService.selectFromName(routeMatch.params.taxonomy);\r\n                    setPostTypeAnimation(true);\r\n                }\r\n            }\r\n        });\r\n    }, [history, routeMatch]);\r\n\r\n    const handleNewPost = () => {\r\n        const selected = services.postManagementsService.selected;\r\n        if (selected) {\r\n            history.push(`/posts/${selected.taxonomy.name}/new/edit`);\r\n        }\r\n    };\r\n\r\n    const onAddPostTypeClicked = async () => {\r\n        history.push(\"/posts/new/edit\");\r\n    };\r\n\r\n    function onEditClicked() {\r\n        if (postTypeContext) {\r\n            history.push(`/posts/${postTypeContext.taxonomy.name}/edit`);\r\n        }\r\n    }\r\n\r\n    const onPostTypeListClicked = (index: number) => {\r\n        services.postManagementsService.selectFromIndex(index);\r\n        const selected = services.postManagementsService.selected;\r\n        if (selected) {\r\n            setPostTypeAnimation(false);\r\n            setTimeout(() => history.replace(`/posts/${selected.taxonomy.name}`), 10);\r\n        }\r\n        console.log(selected);\r\n    };\r\n\r\n    const onPostTypeMenu = (event: React.MouseEvent<HTMLElement>, postType: PostType) => {\r\n        event.stopPropagation();\r\n        setAnchorEl(event.currentTarget);\r\n        setPostTypeContext(postType);\r\n    };\r\n\r\n    const onRemovePostTypeClicked = async () => {\r\n        handleCloseMenu();\r\n\r\n        if (!postTypeContext) {\r\n            return;\r\n        }\r\n\r\n        if (await confirmDeletePostTypeAsync(`${postTypeContext.taxonomy.displayName}を本当に削除しますか？`)) {\r\n            await services.postManagementsService.removeAsync(postTypeContext.postTypeId);\r\n            console.log(services.postManagementsService.postTypes);\r\n        }\r\n    };\r\n\r\n    const handleCloseMenu = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return <Observer>\r\n        {\r\n            (() => {\r\n                const { postManagementsService, authService } = services;\r\n                if (!authService.loginInfo.identifier) {\r\n                    return (\r\n                        <Box width=\"100%\" height=\"100%\" display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\r\n                            <Typography variant=\"h5\" style={{ color: theme.palette.error.main }}>\r\n                                WEBサイトを選択してください\r\n                            </Typography>\r\n                        </Box>\r\n                    );\r\n                }\r\n\r\n                return (\r\n                    <Box height=\"100%\" display=\"flex\">\r\n                        <Box p={0}\r\n                            width=\"200px\"\r\n                            minWidth=\"200px\"\r\n                            maxWidth=\"200px\"\r\n                            overflow=\"auto\" >\r\n                            <Button\r\n                                disabled={!(authService.loginInfo.role >= RoleType.Edit)}\r\n                                onClick={onAddPostTypeClicked}\r\n                                color=\"primary\"\r\n                                variant=\"contained\"\r\n                                style={{\r\n                                    borderRadius: \"18px\",\r\n                                    margin: \"8px\", marginTop: \"16px\"\r\n                                }}\r\n                            >\r\n                                <Icon>add</Icon>\r\n                                投稿タイプを追加\r\n                            </Button>\r\n                            <List component=\"nav\" className={classes.postTypeBar} aria-label=\"contacts\">\r\n                                {\r\n                                    postManagementsService.postTypes.map(\r\n                                        (t, i) => (\r\n                                            <ListItem key={t.taxonomy.name} button className={postManagementsService.selected?.taxonomy.name === t.taxonomy.name ? classes.activeItem : \"\"}\r\n                                                onClick={() => onPostTypeListClicked(i)} >\r\n                                                <ListItemText primary={t.taxonomy.displayName} />\r\n                                                {\r\n                                                    authService.loginInfo.role >= RoleType.Edit && (\r\n                                                        <IconButton\r\n                                                            size=\"small\"\r\n                                                            onClick={e => onPostTypeMenu(e, t)}\r\n                                                        >\r\n                                                            <MoreVert />\r\n                                                        </IconButton>\r\n                                                    )\r\n                                                }\r\n                                            </ListItem>\r\n                                        )\r\n                                    )\r\n                                }\r\n                            </List>\r\n\r\n                            <Menu\r\n                                id=\"long-menu\"\r\n                                anchorEl={anchorEl}\r\n                                keepMounted\r\n                                open={!!anchorEl}\r\n                                onClose={handleCloseMenu}\r\n                                PaperProps={{\r\n                                    style: {\r\n                                        maxHeight: 48 * 4.5,\r\n                                        width: \"20ch\",\r\n                                    },\r\n                                }}\r\n                            >\r\n                                <MenuItem onClick={() => onEditClicked()}>\r\n                                    編集\r\n                                </MenuItem>\r\n                                <Divider />\r\n                                <MenuItem onClick={onRemovePostTypeClicked}>\r\n                                    削除\r\n                                </MenuItem>\r\n                            </Menu>\r\n                        </Box >\r\n\r\n                        <Divider orientation=\"vertical\" />\r\n\r\n                        <Slide\r\n                            direction=\"up\"\r\n                            timeout={{\r\n                                enter: 180,\r\n                                exit: 50\r\n                            }}\r\n                            in={postTypeAnimation}\r\n                        >\r\n                            <Box\r\n                                flex=\"1 1 auto\"\r\n                                position=\"relative\"\r\n                                overflow=\"hidden\"\r\n                                height=\"100%\"\r\n                            >\r\n                                <PostListPanel />\r\n                                <Fab\r\n                                    disabled={!services.postManagementsService.selected || !(authService.loginInfo.role >= RoleType.Post)}\r\n                                    style={{\r\n                                        position: \"absolute\",\r\n                                        zIndex: 9999,\r\n                                        right: \"24px\",\r\n                                        bottom: \"24px\"\r\n                                    }}\r\n                                    onClick={() => handleNewPost()}\r\n                                    color=\"primary\">\r\n                                    <Add />\r\n                                </Fab>\r\n                            </Box>\r\n                        </Slide>\r\n\r\n                        <Divider orientation=\"vertical\" />\r\n\r\n                        <Box minWidth=\"220px\" maxWidth=\"220px\" height=\"100%\" overflow=\"auto\">\r\n                            {services.postManagementsService.selected &&\r\n                                <PostTypeSettingPanel postType={services.postManagementsService.selected} />\r\n                            }\r\n                        </Box>\r\n                    </Box >\r\n                );\r\n            })\r\n        }\r\n    </Observer>;\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    postTypeBar: {\r\n        width: \"100%\",\r\n        flex: \"1 1 auto\",\r\n    },\r\n    container: {\r\n        height: \"100%\"\r\n    },\r\n    activeItem: {\r\n        background: theme.palette.primary.main + \"!important\",\r\n    }\r\n});","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\Environments\\PostEditPage.tsx",["661","662","663","664","665","666","667","668","669","670","671","672","673"],"import React, { useEffect, useState, ReactComponentElement, cloneElement } from \"react\";\r\nimport {\r\n    Tabs, Tab, Divider,\r\n    Icon,\r\n    TextField, Box, Typography, Button, Select,\r\n} from \"@material-ui/core\";\r\nimport { services } from \"../../../Services\";\r\nimport { Observer, useObserver } from \"mobx-react\";\r\nimport { useRouteMatch, useHistory } from \"react-router-dom\";\r\nimport { PostEditOptionPanel } from \"../Ecosystems/PostEditOptionPanel\";\r\nimport { FieldEditor } from \"../FieldEditors/FieldEditor\";\r\nimport \"./style.scss\";\r\nimport { Field } from \"../../../Models/Contents/Entities/Field\";\r\n\r\nexport default function PostEditPage() {\r\n    const { postEditService } = services;\r\n    const match = useRouteMatch<any>();\r\n\r\n    useEffect(() => {\r\n        setTimeout(async () => {\r\n            postEditService.clear();\r\n\r\n            await services.postManagementsService.fetchPostTypes(match.params.taxonomy);\r\n            const postType = services.postManagementsService.selected;\r\n\r\n            if (!postType) {\r\n                return;\r\n            }\r\n\r\n            if (match.params.taxonomy && match.params.contentId && match.params.contentId === \"new\") {\r\n                postEditService.initializeAsNewPost(postType.taxonomy);\r\n            }\r\n            else {\r\n                postEditService.fetchAsync(match.params.taxonomy, match.params.contentId);\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    return <Observer>\r\n        {\r\n            () => {\r\n                function handleChangeField(f: Field) {\r\n                    const content = postEditService.content;\r\n                    if (content) {\r\n                        const _f = content.fields.find(x => x.schemeId === f.schemeId);\r\n                        if (!_f) return;\r\n\r\n                        const i = content.fields.indexOf(_f);\r\n                        const fields = content.fields;\r\n                        fields[i] = f;\r\n                        postEditService.setContent(\r\n                            content.clone({\r\n                                fields,\r\n                            })\r\n                        );\r\n                    }\r\n                }\r\n\r\n                return postEditService.content && (\r\n                    <Box\r\n                        display=\"flex\"\r\n                        position=\"relative\"\r\n                        height=\"100%\"\r\n                    >\r\n                        <Box\r\n                            p={2}\r\n                            flex={\"1 1 auto\"}\r\n                            overflow=\"hidden\"\r\n                            height=\"100%\"\r\n                            style={{ overflowY: \"auto\" }}\r\n                            display=\"flex\"\r\n                            alignItems=\"center\"\r\n                            flexDirection=\"column\"\r\n                        >\r\n                            {\r\n                                services.postManagementsService.selected?.taxonomy.schemes.map(\r\n                                    scheme => {\r\n                                        const f = postEditService.content?.fields.find(s => s.schemeId === scheme.schemeId);\r\n                                        if (!f) {\r\n                                            return <Box key={scheme.schemeId} className=\"post\" maxWidth=\"100%\" width=\"780px\" mt={2}>\r\n                                                <Typography color=\"error\">\"{scheme.name} - {scheme.displayName}\" の読み込みに失敗しました</Typography>\r\n                                                <Box mt={2} />\r\n                                                <Divider />\r\n                                            </Box>;\r\n                                        }\r\n\r\n                                        return <Box key={scheme.schemeId} className=\"post\" maxWidth=\"100%\" width=\"780px\" mt={2}>\r\n                                            <Typography variant=\"h5\" style={{wordBreak:\"break-all\"}}>\r\n                                                {scheme.name} - {scheme.displayName}\r\n                                            </Typography>\r\n                                            <Divider />\r\n                                            <Box mt={2} />\r\n                                            <Typography color=\"textSecondary\" variant=\"caption\">\r\n                                                {scheme.description}\r\n                                            </Typography>\r\n                                            <Box mt={2} />\r\n                                            <FieldEditor\r\n                                                onChange={e => handleChangeField(e)}\r\n                                                field={{\r\n                                                    field: f,\r\n                                                    scheme\r\n                                                }}\r\n                                            />\r\n                                            <Box mt={4} />\r\n                                        </Box>;\r\n                                    }\r\n                                )\r\n                            }\r\n                        </Box>\r\n                        <Divider orientation=\"vertical\" />\r\n                        <Box p={2} minWidth=\"300px\" maxWidth=\"300px\" overflow=\"auto\">\r\n                            <PostEditOptionPanel\r\n                                contentEditContext={postEditService.content}\r\n                            />\r\n                        </Box>\r\n                    </Box>\r\n                );\r\n            }\r\n        }\r\n    </Observer>;\r\n}","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\Environments\\PostTypeEditPage.tsx",["674","675"],"import React, { useEffect, useState } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport { services } from \"../../../Services\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    Divider,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {\r\n    PostTypeBasicSettingPanel,\r\n    SchemeSettingPanel\r\n} from \"../Ecosystems\";\r\nimport { PostType } from \"../../../Models/posts/entities/PostType\";\r\nimport { Taxonomy } from \"../../../Models/Contents/Entities/Taxonomy\";\r\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\r\n\r\nexport default observer(() => {\r\n    const [postType, setPostType] = useState(new PostType({\r\n        taxonomy: new Taxonomy({\r\n            description: \"\",\r\n            name: \"\",\r\n            displayName: \"\",\r\n            identifier: \"\",\r\n            schemes: [],\r\n            taxonomyId: \"\"\r\n        })\r\n    }));\r\n    const [isNew, setIsNew] = useState(false);\r\n    const [isChanged, setIsChanged] = useState(false);\r\n\r\n    const taxonomyName = useRouteMatch<{ taxonomy: string }>();\r\n    const history = useHistory();\r\n\r\n    async function init() {\r\n        await services.postManagementsService.fetchPostTypes();\r\n        if (taxonomyName.params.taxonomy === \"new\") {\r\n            setIsNew(true);\r\n        }\r\n        else {\r\n            if (taxonomyName.params.taxonomy) {\r\n                services.postManagementsService.selectFromName(taxonomyName.params.taxonomy);\r\n            }\r\n\r\n            if (services.postManagementsService.selected) {\r\n                setPostType(services.postManagementsService.selected);\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        init();\r\n    }, []);\r\n\r\n    function handleCreate() {\r\n        console.log(postType);\r\n        if (isNew) {\r\n            services.postManagementsService.createPostTypeAsync({\r\n                taxonomy: postType.taxonomy,\r\n                displayFormat: postType.displayFormat\r\n            });\r\n        }\r\n        else {\r\n            services.postManagementsService.savePostTypeAsync({\r\n                postTypeId: postType.postTypeId,\r\n                taxonomy: postType.taxonomy,\r\n                displayFormat: postType.displayFormat\r\n            });\r\n        }\r\n        history.push(`/posts/${services.postManagementsService.selected?.taxonomy.name}`);\r\n    }\r\n\r\n    return <Box\r\n        width=\"100%\"\r\n        display=\"flex\"\r\n        flexDirection=\"column\"\r\n        alignItems=\"center\"\r\n        height=\"100%\"\r\n        overflow=\"auto\"\r\n        p={3}\r\n    >\r\n        <Box\r\n            mt={4}\r\n            display=\"flex\"\r\n            alignItems=\"center\"\r\n            maxWidth=\"960px\"\r\n            width=\"100%\"\r\n        >\r\n            <Typography variant=\"h4\" >{isNew ? \"投稿タイプを作成\" : \"投稿タイプを編集\"}</Typography>\r\n        </Box>\r\n\r\n        <PostTypeBasicSettingPanel\r\n            postType={postType} onChange={p => {\r\n                setPostType(p);\r\n                setIsChanged(true);\r\n            }}\r\n        />\r\n        <SchemeSettingPanel\r\n            postType={postType}\r\n            onChange={p => {\r\n                setPostType(p);\r\n                setIsChanged(true);\r\n            }}\r\n        />\r\n\r\n        <Box\r\n            mt={4}\r\n        >\r\n            <Button\r\n                disabled={!(postType.taxonomy.name && postType.taxonomy.displayName) || !isChanged}\r\n                color=\"primary\"\r\n                onClick={() => handleCreate()}\r\n                variant=\"contained\"\r\n            >{isNew ? \"作成\" : \"保存\"}</Button>\r\n        </Box>\r\n    </Box>;\r\n});\r\n","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\Media\\Enviroments\\MediaPage.tsx",["676","677","678","679"],"import React, { useState, useEffect } from \"react\";\r\nimport { Box, Input, Button, Divider, makeStyles } from \"@material-ui/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport { services } from \"../../../Services\";\r\nimport { MediaListToolbar } from \"../Ecosystems/MediaListToolbar\";\r\nimport { ImageGrid } from \"../Ecosystems\";\r\n\r\nexport default observer(() => {\r\n    useEffect(() => {\r\n        services.mediaService.fetchAllFilesAsync();\r\n    }, []);\r\n\r\n    return (\r\n        < Box p={1} height=\"100%\" overflow=\"auto\">\r\n            <Box>\r\n                <MediaListToolbar />\r\n            </Box>\r\n            <Divider style={{ marginTop: \"8px\" }} />\r\n            <Box mt={2} display=\"flex\" flexWrap=\"wrap\" width=\"100%\">\r\n                <ImageGrid />\r\n            </Box>\r\n        </Box >\r\n    );\r\n});\r\n\r\nconst useStyle = makeStyles({\r\n    imgContainer: {\r\n        height: \"160px\",\r\n    },\r\n    img: {\r\n        height: \"100%\"\r\n    }\r\n});","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\Settings\\Environments\\SettingsPage.tsx",["680","681","682","683","684","685","686","687","688"],"import React, { useEffect, useState, ReactComponentElement, cloneElement } from \"react\";\r\nimport {\r\n    Avatar,\r\n    Box,\r\n    Icon,\r\n    makeStyles,\r\n    TextField,\r\n    Typography,\r\n    useTheme,\r\n    Tab,\r\n    Tabs,\r\n    Paper,\r\n    Button,\r\n    Select,\r\n    MenuItem, ListItemText, Fab\r\n} from \"@material-ui/core\";\r\nimport { observer, useObserver } from \"mobx-react\";\r\nimport { services } from \"../../../Services\";\r\nimport { FlexSpacer, messageAsync } from \"../../../Components/commons\";\r\nimport SwipeableViews from \"react-swipeable-views\";\r\nimport { UserSettingPanel } from \"../Ecosystems/UserSettingPanel\";\r\nimport { WebSiteSettingPanel } from \"../Ecosystems/WebSiteSettingPanel\";\r\nimport { WebSite } from \"../../../Models/sites/web-site\";\r\nimport { User } from \"../../../Models/users/user\";\r\nimport { showFilePickerAsync } from \"../Ecosystems/showFilePickerAsync\";\r\nimport { axios } from \"../../../Repositories/config\";\r\n\r\ninterface TabPanelProps {\r\n    children?: React.ReactNode;\r\n    index: any;\r\n    value: any;\r\n}\r\n\r\nfunction TabPanel(props: TabPanelProps) {\r\n    const { children, value, index } = props;\r\n\r\n    return (\r\n        <>\r\n            {value === index && (children)}\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default observer(() => {\r\n    const theme = useTheme();\r\n    const [selectedTab, setSelectedTab] = useState(0);\r\n    const { usersService, authService, webSiteManagementsService } = services;\r\n    const [isChanged, setIsChanged] = useState(false);\r\n\r\n    useEffect(() => {\r\n        usersService.selectUserAsync(authService.loginInfo.userId);\r\n        webSiteManagementsService.selectWebSiteAsync(authService.loginInfo.identifier);\r\n    }, []);\r\n\r\n    async function handleChangeWebSiteIdentifier(webSite: WebSite) {\r\n        try {\r\n            await services.authService.refreshAsync(webSite.webSiteId);\r\n        }\r\n        catch {\r\n            console.log(\"failed to refresh\");\r\n        }\r\n        finally {\r\n            window.location.assign(\"/settings\");\r\n        }\r\n    };\r\n\r\n    function handleChangeWebSite(key: keyof WebSite, value: any) {\r\n        if (!isChanged) {\r\n            setIsChanged(true);\r\n        }\r\n\r\n        const webSite = webSiteManagementsService.selected;\r\n        if (webSite) {\r\n            webSiteManagementsService.setSelectedWebSite(webSite.with({\r\n                [key]: value\r\n            }));\r\n        }\r\n    }\r\n\r\n    function handleChangeUser(key: keyof User, value: any) {\r\n        if (!isChanged) {\r\n            setIsChanged(true);\r\n        }\r\n\r\n        const user = usersService.selected;\r\n        if (user) {\r\n            usersService.setSelectedUser(user.with({\r\n                [key]: value\r\n            }));\r\n        }\r\n    }\r\n\r\n    async function saveAsync() {\r\n        setIsChanged(false);\r\n        await Promise.all([\r\n            services.webSiteManagementsService.saveAsync(),\r\n            services.usersService.saveSelectedUserAsync()\r\n        ]);\r\n        messageAsync(\"保存しました\");\r\n    }\r\n\r\n    async function opanPickerAsync() {\r\n        const file = await showFilePickerAsync();\r\n        if (file) {\r\n            await usersService.saveMyAvatarAsync(file);\r\n            await services.authService.refreshAsync();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Box\r\n            display=\"flex\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"center\"\r\n            height=\"100%\"\r\n            style={{ background: theme.palette.background.default }}\r\n            flexWrap=\"wrap\"\r\n            overflow=\"auto\"\r\n        >\r\n            <Box\r\n                p={2}\r\n                display=\"flex\"\r\n                maxWidth=\"380px\"\r\n                width=\"100%\"\r\n                flexDirection=\"column\"\r\n                alignItems=\"center\"\r\n                maxHeight=\"100%\"\r\n                top=\"0px\"\r\n                overflow=\"auto\"\r\n                mb=\"auto\"\r\n            >\r\n                <Box mt={2}></Box>\r\n                <Box\r\n                    position=\"relative\"\r\n                >\r\n                    <Avatar\r\n                        src={axios.defaults.baseURL + services.authService.loginInfo.avatar}\r\n                        style={{\r\n                            width: \"180px\",\r\n                            height: \"180px\"\r\n                        }}\r\n                    />\r\n                    <Fab\r\n                        style={{\r\n                            position: \"absolute\",\r\n                            bottom: \"8px\",\r\n                            right: \"8px\"\r\n                        }}\r\n                        color=\"primary\"\r\n                        size=\"small\"\r\n                        onClick={() => opanPickerAsync()}\r\n                    >\r\n                        <Icon>edit</Icon>\r\n                    </Fab>\r\n                </Box>\r\n\r\n\r\n                <Box mt={4}></Box>\r\n                <Typography variant=\"h6\">Current Identifier </Typography>\r\n                <Select\r\n                    style={{ marginTop: \"16px\", color: theme.palette.text.primary }}\r\n                    variant=\"outlined\"\r\n                    value={authService.loginInfo.identifier}\r\n                    color=\"primary\"\r\n                    label=\"ログイン中のサイト\"\r\n                    fullWidth\r\n                >\r\n                    {\r\n                        webSiteManagementsService.webSites.map((w, i) => (\r\n                            <MenuItem\r\n                                key={i}\r\n                                value={w.webSiteId}\r\n                                button\r\n                                onClick={() => handleChangeWebSiteIdentifier(w)}\r\n                            >\r\n                                <ListItemText>\r\n                                    {w.name}\r\n                                </ListItemText>\r\n                            </MenuItem>\r\n                        ))\r\n                    }\r\n                </Select>\r\n\r\n                <Box mt={4}></Box>\r\n                <Tabs\r\n                    indicatorColor=\"primary\"\r\n                    orientation=\"vertical\"\r\n                    value={selectedTab}\r\n                    onChange={(_, e) => setSelectedTab(e)}\r\n                    style={{ width: \"100%\" }}\r\n                >\r\n                    <Tab icon={<Icon>account_circle</Icon>} label=\"プロフィール\" />\r\n                    <Tab icon={<Icon>view_module</Icon>} label=\"サイト管理\" />\r\n                </Tabs>\r\n            </Box>\r\n\r\n            {/* Tab content */}\r\n            <Box\r\n                flex=\"1 1 auto\"\r\n                overflow=\"auto\"\r\n                height=\"100%\"\r\n            >\r\n                <SwipeableViews index={selectedTab}\r\n                    axis=\"x\"\r\n                    style={{\r\n                        height: \"100%\",\r\n                        width: \"100%\",\r\n                        display: \"flex\",\r\n                        flexDirection: \"column\",\r\n                        alignItems: \"center\"\r\n                    }}\r\n                    onChangeIndex={(_, e) => setSelectedTab(e)}\r\n                >\r\n                    <TabPanel\r\n                        value={selectedTab}\r\n                        index={0}\r\n                    >\r\n                        <Box mt={4} p={2} display=\"flex\">\r\n                            <Typography variant=\"h4\">Profile Settings</Typography>\r\n                            <FlexSpacer />\r\n                            <Button\r\n                                disabled={!isChanged}\r\n                                color=\"primary\"\r\n                                variant=\"contained\"\r\n                                onClick={_ => saveAsync()}\r\n                            >\r\n                                <Icon style={{ marginRight: \"4px\" }}>save</Icon>\r\n                                保存\r\n                            </Button>\r\n                        </Box>\r\n                        <UserSettingPanel onChange={(k, v) => handleChangeUser(k, v)} />\r\n                    </TabPanel>\r\n                    <TabPanel\r\n                        value={selectedTab}\r\n                        index={1}\r\n                    >\r\n                        <Box mt={4} display=\"flex\" width=\"600px\">\r\n                            <Typography variant=\"h4\">Web Site Settings</Typography>\r\n                            <FlexSpacer />\r\n                            <Button\r\n                                disabled={!isChanged}\r\n                                color=\"primary\"\r\n                                variant=\"contained\"\r\n                                onClick={_ => saveAsync()}\r\n                            >\r\n                                <Icon style={{ marginRight: \"4px\" }}>save</Icon>\r\n                                保存\r\n                            </Button>\r\n                        </Box>\r\n                        <WebSiteSettingPanel onChange={(k, v) => handleChangeWebSite(k, v)} />\r\n                    </TabPanel>\r\n                </SwipeableViews>\r\n            </Box>\r\n        </Box>\r\n    );\r\n});","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\main\\ecosystems\\ProfileCard.tsx",["689","690"],"C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Repositories\\UsersRepository.ts",["691","692","693","694","695"],"import { axios, repositoryConfig } from \"./config\";\r\nimport { User } from \"../Models/users/user\";\r\nimport { IUser } from \"../Models/users/user.interface\";\r\nimport { IUpdateUserParams } from \"../Models/users/update-user-params\";\r\nimport { WebSite } from \"../Models/sites/web-site\";\r\nimport { ICreateUserParams } from \"../Models/users/ICreateUserParams\";\r\n\r\nexport class UsersRepository {\r\n    public async fetchUserAsync(userId: string) {\r\n        try {\r\n            const response = await axios.get<User>(`/api/users/${userId}`);\r\n            return this.toDomain(response.data);\r\n        }\r\n        catch (ex) {\r\n            console.error(\"failed to fetch user.\", ex);\r\n            throw new Error(\"failed to fetch user.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * fetch users.\r\n     */\r\n    public async fetchUsersAsync(): Promise<User[]> {\r\n        try {\r\n            const response = await axios.get<IUser[]>(\"/api/users?all=1\");\r\n            return response.data.map(x => this.toDomain(x));\r\n        }\r\n        catch (ex) {\r\n            console.error(\"failed to fetch users.\", ex);\r\n            throw new Error(\"failed to fetch users.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * save user.\r\n     * @param user user\r\n     */\r\n    public async saveUserAsync(user: IUpdateUserParams): Promise<User> {\r\n        try {\r\n            const response = await axios.put<User>(\"/api/users\", user);\r\n            return this.toDomain(response.data);\r\n        }\r\n        catch (ex) {\r\n            console.error(\"failed to save users.\", ex);\r\n            throw new Error(\"failed to save user.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * save user.\r\n     * @param user user\r\n     */\r\n    public async createNewUserAsync(user: ICreateUserParams): Promise<User> {\r\n        try {\r\n            const response = await axios.post<IUser>(\"/api/users\", user);\r\n            return this.toDomain(response.data);\r\n        }\r\n        catch (ex) {\r\n            console.error(\"failed to create users.\", ex);\r\n            throw new Error(\"failed to create user.\");\r\n        }\r\n    }\r\n\r\n    public async saveAvatarAsync(file: File): Promise<User> {\r\n        try {\r\n            const form = new FormData();\r\n            form.append(\"file\", file);\r\n            const response = await axios.post<IUser>(\"/api/users/avatar\", form);\r\n            return this.toDomain(response.data);\r\n        }\r\n        catch (ex) {\r\n            console.error(\"failed to upload avatar image.\", ex);\r\n            throw new Error(\"failed to upload avatar image.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * convert IUser to User instance.\r\n     * @param user user interface\r\n     */\r\n    private toDomain(user: IUser) {\r\n        return new User(\r\n            user.userId,\r\n            user.name,\r\n            user.email,\r\n            user.role,\r\n            user.isActive,\r\n            user.identifiers,\r\n            user.avatar\r\n        );\r\n    }\r\n}","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Repositories\\AuthRepository.ts",[],"C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Repositories\\WebSiteManagementsRepository.ts",["696","697","698","699"],"import { axios } from \"./config\";\r\nimport { from } from \"rxjs\";\r\nimport { concatMap } from \"rxjs/operators\";\r\nimport { WebSite } from \"../Models/sites/web-site\";\r\nimport { ICreateWebSiteParams } from \"../Models/sites/create-werb-site.params\";\r\nimport { IUpdateWebSiteParams } from \"../Models/sites/update-web-site.params\";\r\n\r\nexport class WebSiteManagementsRepository {\r\n\r\n    public async fetchWebSiteAync(identifier: string): Promise<WebSite> {\r\n        try {\r\n            const result = await axios.get<WebSite>(\"/api/web-sites/\" + identifier);\r\n            const x = result.data;\r\n            return new WebSite(x.webSiteId, x.displayName, x.name, x.host, x.description);\r\n        }\r\n        catch (ex) {\r\n            throw new Error(\"Failed to fetch data websites data.\");\r\n        }\r\n    }\r\n\r\n    public async fetchWebSitesAync(): Promise<WebSite[]> {\r\n        try {\r\n            const result = await axios.get<WebSite[]>(\"/api/web-sites\");\r\n            return result.data.map(x => new WebSite(x.webSiteId, x.displayName, x.name, x.host, x.description));\r\n        }\r\n        catch (ex) {\r\n            throw new Error(\"Failed to fetch data websites data.\");\r\n        }\r\n    }\r\n\r\n    public async createNewWebSiteAsync(webSite: ICreateWebSiteParams) {\r\n        try {\r\n            await axios.post(\"/api/web-sites/\", webSite);\r\n        }\r\n        catch (ex) {\r\n            throw new Error(\"failed to create new web site\");\r\n        }\r\n    }\r\n\r\n    public async saveWebSiteAsync(webSite: IUpdateWebSiteParams) {\r\n        try {\r\n            await axios.put(\"/api/web-sites\", webSite);\r\n        }\r\n        catch (ex) {\r\n            throw new Error(\"failed to create new web site\");\r\n        }\r\n    }\r\n}","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Repositories\\PostManagementsRepository.ts",["700","701","702","703","704","705"],"import { axios, repositoryConfig } from \"./config\";\r\nimport { IPostType } from \"../Models/posts/entities/IPostType\";\r\nimport { PostType } from \"../Models/posts/entities/PostType\";\r\nimport { IPostCategory } from \"../Models/posts/entities/IPostCategory copy\";\r\nimport { PostCategory } from \"../Models/posts/entities/PostCategory\";\r\nimport { ICreatePostTypeParams } from \"../Models/posts/params/ICreatePostTypeParams\";\r\nimport { ISavePostTypeParams } from \"../Models/posts/params/ISavePostTypeParams\";\r\nimport { Taxonomy } from \"../Models/Contents/Entities/Taxonomy\";\r\nimport { Scheme } from \"../Models/Contents/Entities/Scheme\";\r\n\r\nexport class PostManagementsRepository {\r\n    /**\r\n     * fetch posts.\r\n     */\r\n    public async fetchPostTypesAsync(): Promise<PostType[]> {\r\n        try {\r\n            const response = await axios.get<IPostType[]>(\"/api/post-types\");\r\n            return response.data.map(p => this.postTypeToDomain(p));\r\n        }\r\n        catch (ex) {\r\n            console.error(\"failed to fetch posts.\", ex);\r\n            throw new Error(\"failed to fetch posts.\");\r\n        }\r\n    }\r\n\r\n    public async removeAsync(postTypeId: string) {\r\n        try {\r\n            await axios.delete(\"/api/post-types/\" + postTypeId);\r\n        }\r\n        catch (ex) {\r\n            console.error(\"failed to remove post type.\", ex);\r\n            throw new Error(\"failed to remove post type.\");\r\n        }\r\n    }\r\n\r\n    public async saveAsync(params: ISavePostTypeParams) {\r\n        try {\r\n            await axios.put(\"/api/post-types\", params);\r\n        }\r\n        catch (ex) {\r\n            console.error(\"failed to remove post type.\", ex);\r\n            throw new Error(\"failed to remove post type.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * save user.\r\n     * ..param user user\r\n     */\r\n    public async createPostType(postType: ICreatePostTypeParams): Promise<PostType> {\r\n        try {\r\n            const response = await axios.post<IPostType>(\"/api/post-types\", postType);\r\n            return this.postTypeToDomain(response.data);\r\n        }\r\n        catch (ex) {\r\n            console.error(\"failed to fetch posts.\", ex);\r\n            throw new Error(\"failed to save user.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * convert IUser to User instance.\r\n     * ..param user user interface\r\n     */\r\n    private postTypeToDomain(post: IPostType) {\r\n        return new PostType({\r\n            postTypeId: post.postTypeId,\r\n            displayFormat: post.displayFormat,\r\n            taxonomy: new Taxonomy({\r\n                description: post.taxonomy.description,\r\n                displayName: post.taxonomy.displayName,\r\n                name: post.taxonomy.name,\r\n                identifier: post.taxonomy.identifier,\r\n                schemes: post.taxonomy.schemes.map(\r\n                    s => new Scheme({\r\n                        description: s.description,\r\n                        displayName: s.displayName,\r\n                        metadata: s.metadata,\r\n                        name: s.name,\r\n                        schemeId: s.schemeId,\r\n                        type: s.type\r\n                    })\r\n                ),\r\n                taxonomyId: post.taxonomy.taxonomyId\r\n            })\r\n        });\r\n    }\r\n}","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Repositories\\MediaRepository.ts",[],"C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Repositories\\PostsRepository.ts",["706","707","708","709","710","711","712","713"],"import { axios, repositoryConfig } from \"./config\";\r\nimport { WebSite } from \"../Models/sites/web-site\";\r\nimport { IPost } from \"../Models/posts/entities/IPost\";\r\nimport { Post } from \"../Models/posts/entities/Post\";\r\nimport { ISearchResultResponse } from \"../Models/commons/ISearchResultResponse\";\r\nimport { DateTime } from \"luxon\";\r\nimport { IPostResponse } from \"./Responses/IPostResponse\";\r\nimport { ISavePostParams } from \"../Models/posts/params/ISavePostParams\";\r\nimport { Content } from \"../Models/Contents/Entities/Content\";\r\nimport { Field } from \"../Models/Contents/Entities/Field\";\r\nimport { ISearchContentParams } from \"../Models/Contents/Params\";\r\n\r\n\r\nexport class PostsRepository {\r\n    public async fetchPostAsync(taxonomy: string, contentId: string) {\r\n        try {\r\n            const response = await axios.get<Content>(`/api/contents/${taxonomy}/${contentId}`);\r\n            return this.toDomain(response.data);\r\n        }\r\n        catch (ex) {\r\n            console.error(\"failed to fetch user.\", ex);\r\n            throw new Error(\"failed to fetch user.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * fetch posts.\r\n     */\r\n    public async searchPostsAsync(\r\n        postTypeName: string,\r\n        serchOption: ISearchContentParams\r\n    ): Promise<ISearchResultResponse<Content>> {\r\n        try {\r\n            const response = await axios.get<ISearchResultResponse<Content>>(`/api/contents/${postTypeName}`, {\r\n                params: serchOption,\r\n            });\r\n            return {\r\n                hitCount: response.data.hitCount,\r\n                collection: response.data.collection.map(x => this.toDomain(x))\r\n            };\r\n        }\r\n        catch (ex) {\r\n            console.error(\"failed to fetch posts.\", ex);\r\n            throw new Error(\"failed to fetch posts.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * save user.\r\n     * @param user user\r\n     */\r\n    public async saveAsync(identifier: string, post: Content): Promise<Content> {\r\n        try {\r\n            const response = await axios.put<Content>(\"/api/contents/\" + identifier, post);\r\n            return this.toDomain(response.data);\r\n        }\r\n        catch (ex) {\r\n            console.error(\"failed to fetch posts.\", ex);\r\n            throw new Error(\"failed to save user.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * save user.\r\n     * @param user user\r\n     */\r\n    public async createPostAsync(taxonomy: string, content: Content): Promise<Content> {\r\n        try {\r\n            const response = await axios.post<Content>(\"/api/contents/\" + taxonomy, content);\r\n            return this.toDomain(response.data);\r\n        }\r\n        catch (ex) {\r\n            console.error(\"failed to fetch posts.\", ex);\r\n            throw new Error(\"failed to save user.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete a post.\r\n     * @param postId post id.\r\n     */\r\n    public async deletePostAsync(taxonomy: string, postId: string) {\r\n        try {\r\n            await axios.delete(\"/api/contents/\" + taxonomy + \"/\" + postId);\r\n        }\r\n        catch (ex) {\r\n            throw new Error(\"failed to delete post.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * convert IUser to User instance.\r\n     * @param user user interface\r\n     */\r\n    private toDomain(post: Content) {\r\n        return new Content({\r\n            contentId: post.contentId,\r\n            status: post.status,\r\n            thumbnail: post.thumbnail,\r\n            title: post.title,\r\n            createdBy: post.createdBy,\r\n            description: post.description,\r\n            identifier: post.identifier,\r\n            taxonomyId: post.taxonomyId,\r\n            createdAt: DateTime.fromISO(post.createdAt as any),\r\n            updatedAt: DateTime.fromISO(post.updatedAt as any),\r\n            publishIn: post.publishIn ? DateTime.fromISO(post.publishIn as any) : null,\r\n            metadata: post.metadata,\r\n            fields: post.fields.map(f => new Field({\r\n                fieldId: f.fieldId,\r\n                name: f.name,\r\n                schemeId: f.schemeId,\r\n                value: f.value,\r\n            }))\r\n        });\r\n    }\r\n}","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Plugins\\PluginAdapter.ts",["714"],"import { installAsync } from \"./PluginComponent\";\r\nimport { PluginSchema } from \"./PluginSchema\";\r\n\r\nexport class PluginAdapter {\r\n    public async atatch(scheme: PluginSchema) {\r\n        await this.loadScriptAsync(scheme.url);\r\n        return await installAsync(scheme.pluginName);\r\n    }\r\n\r\n    private loadScriptAsync(url: string) {\r\n        return new Promise<void>(resolve => {\r\n            const script = document.createElement(\"script\");\r\n            script.src = url;\r\n            script.crossOrigin = \"*\";\r\n            script.onload = () => {\r\n                resolve();\r\n            };\r\n            document.body.appendChild(script);\r\n        });\r\n    }\r\n}","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Models\\index.ts",[],"C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Models\\auth\\login-info.ts",["715","716","717"],"import { LoginUser } from \"./login-user\";\r\nimport { Token } from \"./token\";\r\nimport { RoleType } from \"./role\";\r\n\r\nexport class LoginInfo implements LoginUser, Token {\r\n    public readonly token = \"\";\r\n    public readonly refreshToken = \"\";\r\n    public readonly email = \"\";\r\n    public readonly role: RoleType = 0;\r\n    public readonly identifier: string = \"\";\r\n    public readonly name = \"\";\r\n    public readonly iat = 0;\r\n    public readonly exp = Number.MAX_SAFE_INTEGER;\r\n    public readonly userId = \"\";\r\n    public readonly avatar = \"\";\r\n    constructor(params?: LoginInfo) {\r\n        Object.assign(this, params);\r\n    }\r\n}\r\n","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Models\\Contents\\Entities\\Content.ts",["718"],"import { DateTime } from \"luxon\";\r\nimport { StatusType } from \"../Enumes/StatusType\";\r\nimport { Field } from \"./Field\";\r\n\r\n/**\r\n * express content.\r\n */\r\nexport class Content {\r\n    readonly contentId: string = \"\";\r\n    readonly taxonomyId!: string;\r\n    readonly title: string = \"\";\r\n    readonly description: string = \"\";\r\n    readonly thumbnail: string = \"\";\r\n    readonly metadata: string = \"\";\r\n    readonly status: StatusType = StatusType.Public;\r\n    readonly updatedAt: DateTime = DateTime.local();\r\n    readonly createdAt: DateTime = DateTime.local();\r\n    readonly publishIn: DateTime | null = null;\r\n    readonly createdBy = { name: \"\", thumbnail: \"\" };\r\n    readonly identifier: string = \"\";\r\n    readonly fields: Field[] = [];\r\n\r\n    /**\r\n     * constructor\r\n     * @param value initial value\r\n     */\r\n    constructor(\r\n        params?: Partial<Content>\r\n    ) {\r\n        Object.assign(this, params);\r\n    }\r\n\r\n    /**\r\n     * clone with new params.\r\n     * @param params new params.\r\n     */\r\n    public clone(params?: Partial<Content>): Content {\r\n        const c = new Content(this);\r\n        Object.assign(c, params);\r\n        return c;\r\n    }\r\n}\r\n","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Models\\Contents\\Entities\\Field.ts",[],"C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Models\\sites\\web-site.ts",["719"],"import { IWebSite } from \"./web-site.interface\";\r\n\r\nexport class WebSite implements IWebSite {\r\n    webSiteId: string;\r\n    name: string;\r\n    host: string;\r\n    displayName: string;\r\n    description: string;\r\n    constructor(webSiteId: string,\r\n        displayName: string,\r\n        name: string,\r\n        host: string,\r\n        description: string) {\r\n        this.webSiteId = webSiteId;\r\n        this.name = name;\r\n        this.displayName = displayName;\r\n        this.host = host;\r\n        this.description = description;\r\n    }\r\n\r\n    /**\r\n     * close this instance.\r\n     * @returns cloned instance\r\n     */\r\n    public clone(): WebSite {\r\n        return new WebSite(this.webSiteId, this.displayName, this.name, this.host, this.description);\r\n    }\r\n\r\n    public with(params: Partial<WebSite>) {\r\n        const site = this.clone();\r\n        Object.assign(site, params);\r\n        return site;\r\n    }\r\n}\r\n","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Models\\Contents\\Entities\\Taxonomy.ts",["720"],"import { Scheme } from \"./Scheme\";\r\n\r\n/**\r\n * Express taxonomy entity.\r\n */\r\nexport class Taxonomy {\r\n    readonly taxonomyId: string = \"\";\r\n    readonly name: string = \"\";\r\n    readonly description: string = \"\";\r\n    readonly displayName: string = \"\";\r\n    readonly identifier: string = \"\";\r\n    readonly schemes: Scheme[] = [];\r\n\r\n    constructor(value?: Partial<Taxonomy>) {\r\n        Object.assign(this, value);\r\n    }\r\n\r\n    clone(params?: Partial<Taxonomy>): Taxonomy {\r\n        return new Taxonomy({ ...this, ...params });\r\n    }\r\n}","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\web-sites\\ecosystems\\WebSiteDetailDialog.tsx",["721","722","723","724","725","726","727","728","729","730","731","732","733"],"import { showDialogAsync, DialogContentProp } from \"../../commons/showDialog\";\r\nimport React, { useState } from \"react\";\r\nimport { Observer } from \"mobx-react\";\r\nimport { services } from \"../../../Services\";\r\nimport {\r\n    Button,\r\n    Box,\r\n    makeStyles,\r\n    Typography,\r\n    TextField,\r\n    Select,\r\n    MenuItem,\r\n    Switch,\r\n    ListItemText,\r\n    Checkbox,\r\n    Chip\r\n} from \"@material-ui/core\";\r\n\r\nimport { WebSite } from \"../../../Models/sites/web-site\";\r\nimport { IWebSite } from \"../../../Models/sites/web-site.interface\";\r\n\r\nfunction WebSiteDetailDialog(props: DialogContentProp<IWebSite, IWebSite | undefined>) {\r\n    const classes = useStyles();\r\n    const [webSite, setWebSite] = useState(props.context);\r\n\r\n    const [canClose, setCanClose] = useState(false);\r\n\r\n    const [displayNameErrorMessage, setdisplayNameErrorMessage] = useState<string | null>(null);\r\n    const [hostErrorMessage, setHostErrorMessage] = useState<string | null>(null);\r\n    const [nameErrorMessage, setnameErrorMessage] = useState<string | null>(null);\r\n\r\n    /**\r\n     * webサイトのパラメータをセットとバリデーション.\r\n     * @param key キー\r\n     * @param value 値\r\n     */\r\n    function setWebSiteParam(key: keyof WebSite, value: string) {\r\n        setWebSite({\r\n            ...webSite,\r\n            [key]: value\r\n        });\r\n\r\n        if (key === \"name\") {\r\n            if (/^[A-Za-z0-9]*$/.test(value) === false) {\r\n                setnameErrorMessage(\"英数字のみ入力可能です\");\r\n                setCanClose(false);\r\n            }\r\n            else if (!value.length) {\r\n                setnameErrorMessage(\"入力してください\");\r\n                setCanClose(false);\r\n            }\r\n            else if (webSite.displayName && webSite.host) {\r\n                setnameErrorMessage(null);\r\n                setCanClose(true);\r\n            }\r\n            else {\r\n                setnameErrorMessage(null);\r\n            }\r\n        }\r\n        if (key === \"displayName\") {\r\n            if (!value.length) {\r\n                setdisplayNameErrorMessage(\"入力してください\");\r\n                setCanClose(false);\r\n            }\r\n            else if (webSite.name && webSite.host) {\r\n                setdisplayNameErrorMessage(null);\r\n                setCanClose(true);\r\n            }\r\n            else {\r\n                setdisplayNameErrorMessage(null);\r\n            }\r\n        }\r\n        else if (key === \"host\") {\r\n            if (!value.length) {\r\n                setHostErrorMessage(\"入力してください\");\r\n                setCanClose(false);\r\n            }\r\n            else if (/(http[s]?):\\/\\/[^\\/\\.]+?\\..+\\w$/i.test(value) === false) {\r\n                setHostErrorMessage(\"無効なURLです\");\r\n                setCanClose(false);\r\n            }\r\n            else if (webSite.name && webSite.displayName) {\r\n                setHostErrorMessage(null);\r\n                setCanClose(true);\r\n            }\r\n            else {\r\n                setHostErrorMessage(null);\r\n            }\r\n        }\r\n        else if (webSite.name && webSite.displayName && webSite.host) {\r\n            setHostErrorMessage(null);\r\n            setCanClose(true);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Observer>\r\n            {() =>\r\n                <Box\r\n                    p={3}\r\n                    display=\"flex\"\r\n                    height=\"100%\"\r\n                    flexDirection=\"column\"\r\n                    justifyContent=\"space-between\">\r\n                    <Typography variant=\"h5\">ユーザー編集</Typography>\r\n                    <Box>\r\n                        <Typography style={{ marginTop: \"24px\" }}>\r\n                            WEBサイト名\r\n                        </Typography>\r\n                        <TextField\r\n                            fullWidth\r\n                            placeholder=\"サンプルサイト\"\r\n                            value={webSite.displayName}\r\n                            style={{ borderBottomWidth: \"2px\" }}\r\n                            onChange={e => setWebSiteParam(\"displayName\", e.target.value)}\r\n                            error={!!displayNameErrorMessage}\r\n                            helperText={!displayNameErrorMessage ? \"サイト名称\" : displayNameErrorMessage}\r\n                        />\r\n\r\n                        <Typography style={{ marginTop: \"24px\" }}>識別名</Typography>\r\n                        <TextField\r\n                            fullWidth\r\n                            placeholder=\"sample_site\"\r\n                            value={webSite.name}\r\n                            onChange={e => setWebSiteParam(\"name\", e.target.value)}\r\n                            error={!!nameErrorMessage}\r\n                            helperText={!nameErrorMessage ? \"英数字のみ\" : nameErrorMessage}\r\n                        />\r\n\r\n                        <Typography style={{ marginTop: \"24px\" }}>ホストアドレス</Typography>\r\n                        <TextField\r\n                            fullWidth\r\n                            placeholder=\"https://example.com\"\r\n                            value={webSite.host}\r\n                            onChange={e => setWebSiteParam(\"host\", e.target.value)}\r\n                            error={!!hostErrorMessage}\r\n                            helperText={!hostErrorMessage ? \"サイトのURL\" : hostErrorMessage}\r\n                        />\r\n\r\n                        <Typography style={{ marginTop: \"24px\" }}>備考</Typography>\r\n                        <TextField\r\n                            fullWidth\r\n                            multiline\r\n                            rows={6}\r\n                            placeholder=\"入力してください\"\r\n                            value={webSite.description}\r\n                            onChange={e => setWebSiteParam(\"description\", e.target.value)}\r\n                        />\r\n                    </Box>\r\n\r\n                    <Box marginTop=\"24px\" marginBottom=\"12px\" display=\"flex\">\r\n                        <Button\r\n                            variant=\"text\"\r\n                            color=\"primary\"\r\n                            style={{ marginLeft: \"auto\" }}\r\n                            onClick={() => props.onClose(undefined)}\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            style={{ marginLeft: \"12px\" }}\r\n                            onClick={() => props.onClose(webSite)}\r\n                            color=\"primary\"\r\n                            disabled={!canClose} >\r\n                            Ok\r\n                        </Button>\r\n                    </Box>\r\n                </Box >\r\n            }\r\n        </Observer>\r\n    );\r\n}\r\n\r\nexport async function showWebSiteDetailsDialogAsync(webSite: IWebSite) {\r\n    return await showDialogAsync(WebSiteDetailDialog, webSite);\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n\r\n    },\r\n});","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\Media\\Ecosystems\\MediaListToolbar.tsx",["734","735","736","737","738","739"],"import React, { useState, useEffect } from \"react\";\r\nimport { Box, Input, Button, Typography, Menu, ClickAwayListener, Divider } from \"@material-ui/core\";\r\nimport { useObserver } from \"mobx-react\";\r\nimport { FileDropArea, SearchBox } from \"../../commons\";\r\nimport { services } from \"../../../Services\";\r\nimport { confirmAsync } from \"../../commons/confirmAsync\";\r\n\r\nexport function MediaListToolbar() {\r\n    const [searchText, setSearchText] = useState(\"\");\r\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n\r\n    const upload = (event: React.MouseEvent<HTMLElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    function selectAll() {\r\n        services.mediaService.setSelected(\r\n            services.mediaService.files\r\n        );\r\n    }\r\n\r\n    function clearAll() {\r\n        services.mediaService.setSelected([]);\r\n    }\r\n\r\n    async function handleDelete() {\r\n        if (await confirmAsync(`${services.mediaService.selected.length}件を削除しますか?`)) {\r\n            services.mediaService.removeSelectedAsync();\r\n        }\r\n    }\r\n\r\n    return useObserver(() => {\r\n        return (\r\n            < Box p={1} height=\"100%\" overflow=\"auto\" display=\"flex\" alignItems=\"center\">\r\n                <Typography variant=\"h4\">\r\n                    Files\r\n                </Typography>\r\n                {\r\n                    services.mediaService.selected.length\r\n                        ?\r\n                        // when any items are selected\r\n                        <>\r\n                            <Box flex=\"1 1 auto\" />\r\n                            <Typography>\r\n                                {services.mediaService.selected.length} アイテム選択中\r\n                            </Typography>\r\n                            <Button\r\n                                color=\"primary\"\r\n                                style={{ marginLeft: \"8px\" }}\r\n                                onClick={() => clearAll()}\r\n                            >\r\n                                Cancel\r\n                            </Button>\r\n                            <Button\r\n                                onClick={() => selectAll()}\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                style={{ marginLeft: \"8px\" }}\r\n                            >\r\n                                全選択\r\n                            </Button>\r\n                            <Divider orientation=\"vertical\" />\r\n                            <Button\r\n                                onClick={() => handleDelete()}\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                style={{ marginLeft: \"8px\" }}\r\n                            >\r\n                                削除\r\n                            </Button>\r\n                        </>\r\n                        :\r\n                        // when no item is selected\r\n                        <>\r\n                            <Box ml=\"auto\">\r\n                                <Menu\r\n                                    id=\"long-menu\"\r\n                                    anchorEl={anchorEl}\r\n                                    keepMounted\r\n                                    open={!!anchorEl}\r\n                                    PaperProps={{\r\n                                        style: {\r\n                                            maxHeight: 400,\r\n                                            padding: \"12px\",\r\n                                            boxSizing: \"border-box\"\r\n                                        },\r\n                                    }}\r\n                                >\r\n                                    <FileDropArea\r\n                                        showCommend\r\n                                        commited={f => {\r\n                                            f && services.mediaService.postAsync(f);\r\n                                            setAnchorEl(null);\r\n                                        }}\r\n                                        onChange={e => 0}\r\n                                    />\r\n                                </Menu>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    onClick={upload}\r\n                                >\r\n                                    Upload\r\n                                </Button>\r\n                            </Box>\r\n                        </>\r\n                }\r\n            </Box >\r\n        );\r\n    });\r\n}","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\Settings\\Ecosystems\\WebSiteSettingPanel.tsx",["740","741","742","743","744","745","746","747"],"import React, { useState } from \"react\";\r\nimport {\r\n    Avatar,\r\n    Box,\r\n    TextField,\r\n    Typography,\r\n    ListItemText,\r\n    Select,\r\n    MenuItem,\r\n    useTheme\r\n} from \"@material-ui/core\";\r\nimport { useObserver } from \"mobx-react\";\r\nimport { services } from \"../../../Services\";\r\nimport { WebSite } from \"../../../Models/sites/web-site\";\r\nimport { displayRoles, RoleType } from \"../../../Models/auth/role\";\r\nimport { ColorPalette } from \"../../commons\";\r\n\r\ninterface WebSiteSettingPanelProps {\r\n    onChange: (key: keyof WebSite, value: any) => void;\r\n}\r\n\r\nexport function WebSiteSettingPanel(props: WebSiteSettingPanelProps) {\r\n    const { authService, webSiteManagementsService } = services;\r\n    const theme = useTheme();\r\n\r\n    return useObserver(() => (\r\n        <Box\r\n            p={2}\r\n            position=\"relative\"\r\n            width=\"100%\"\r\n            display=\"flex\"\r\n            alignItems=\"center\"\r\n            flexDirection=\"column\"\r\n        >\r\n            <Box mt={4}></Box>\r\n            <Box\r\n                width=\"100%\"\r\n                mt={4}\r\n            >\r\n                <Typography variant=\"subtitle2\" color=\"textSecondary\">Web Site Identifier</Typography>\r\n                <Typography variant=\"h6\">{webSiteManagementsService.selected?.webSiteId}</Typography>\r\n            </Box>\r\n\r\n            <Box\r\n                width=\"100%\"\r\n                mt={4}\r\n            >\r\n                <Typography variant=\"subtitle2\" color=\"textSecondary\">Web Site Name</Typography>\r\n                <Typography variant=\"h6\">{webSiteManagementsService.selected?.name}</Typography>\r\n            </Box>\r\n\r\n            <Box\r\n                width=\"100%\"\r\n                mt={4}\r\n            >\r\n                <Typography variant=\"subtitle2\" color=\"textSecondary\">Web Site Display Name</Typography>\r\n                <TextField\r\n                    style={{ marginTop: \"12px\" }}\r\n                    fullWidth\r\n                    disabled={!(authService.loginInfo.role >= RoleType.Edit)}\r\n                    value={webSiteManagementsService.selected?.displayName}\r\n                    onChange={e => props.onChange(\"name\", e.target.value)}\r\n                />\r\n            </Box>\r\n\r\n            <Box\r\n                width=\"100%\"\r\n                mt={4}\r\n            >\r\n                <Typography variant=\"subtitle2\" color=\"textSecondary\">Host URL</Typography>\r\n                <TextField\r\n                    style={{ marginTop: \"12px\" }}\r\n                    fullWidth\r\n                    disabled={!(authService.loginInfo.role >= RoleType.Edit)}\r\n                    value={webSiteManagementsService.selected?.host}\r\n                    onChange={e => props.onChange(\"host\", e.target.value)}\r\n                />\r\n            </Box>\r\n\r\n            <Box\r\n                width=\"100%\"\r\n                mt={4}\r\n            >\r\n                <Typography variant=\"subtitle2\" color=\"textSecondary\">Web Site Descrtiption</Typography>\r\n                <TextField\r\n                    style={{ marginTop: \"12px\" }}\r\n                    fullWidth\r\n                    multiline\r\n                    rows=\"6\"\r\n                    variant=\"filled\"\r\n                    disabled={!(authService.loginInfo.role >= RoleType.Edit)}\r\n                    value={webSiteManagementsService.selected?.description}\r\n                    onChange={e => props.onChange(\"description\", e.target.value)}\r\n                />\r\n            </Box>\r\n        </Box>\r\n    )\r\n    );\r\n}","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\Settings\\Ecosystems\\showFilePickerAsync.tsx",["748"],"import React, { useState } from \"react\";\r\nimport { showDialogAsync, DialogContentProp } from \"../../commons/showDialog\";\r\nimport { Box, Typography, Button } from \"@material-ui/core\";\r\nimport { FileDropArea } from \"../../commons\";\r\n\r\n/**\r\n * Dialog that can confirm Ok or Cancel.\r\n * @param props dialog props\r\n */\r\nfunction ConfirmDialog(props: DialogContentProp<undefined, File | null>) {\r\n    const [file, setFile] = useState<File | null>(null);\r\n\r\n    return (\r\n        <Box p={2}>\r\n            <Box>\r\n                <Typography variant=\"h6\">ファイルを選択してください</Typography>\r\n            </Box>\r\n\r\n            <Box mt={1}>\r\n                <FileDropArea onChange={e => setFile(e)} />\r\n            </Box>\r\n            <Box marginTop=\"24px\" display=\"flex\">\r\n                <Button\r\n                    variant=\"text\"\r\n                    color=\"primary\"\r\n                    style={{ marginLeft: \"auto\" }}\r\n                    onClick={() => props.onClose(null)}\r\n                >\r\n                    Cancel\r\n                </Button>\r\n                <Button\r\n                    disabled={!file}\r\n                    variant=\"contained\"\r\n                    style={{ marginLeft: \"12px\" }}\r\n                    onClick={() => props.onClose(file)}\r\n                    color=\"primary\" >\r\n                    Ok\r\n                </Button>\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n\r\ninterface ConfirmOption {\r\n    okText: string;\r\n    cancelText: string;\r\n}\r\n\r\n/**\r\n * show confirm dialog async.\r\n * @param message confirm message\r\n * @param option dialog option\r\n */\r\nexport async function showFilePickerAsync() {\r\n    return await showDialogAsync(ConfirmDialog, undefined);\r\n}","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\Settings\\Ecosystems\\UserSettingPanel.tsx",["749","750","751","752"],"import React, { useState } from \"react\";\r\nimport {\r\n    Box,\r\n    TextField,\r\n    Typography,\r\n    useTheme\r\n} from \"@material-ui/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport { services } from \"../../../Services\";\r\nimport { WebSite } from \"../../../Models/sites/web-site\";\r\nimport { displayRoles } from \"../../../Models/auth/role\";\r\nimport { ColorPalette } from \"../../commons\";\r\nimport { User } from \"../../../Models/users/user\";\r\n\r\ninterface UserSettingPanelProps {\r\n    onChange: (key: keyof User, value: any) => void;\r\n}\r\n\r\nexport const UserSettingPanel = observer((props: UserSettingPanelProps) => {\r\n    const { usersService, authService, webSiteManagementsService } = services;\r\n    const [selectedThemeColor, setSelectedThemeColor] = useState(localStorage.getItem(\"color\") ?? \"8db860\");\r\n\r\n    function handleThemeColor(value: string) {\r\n        setSelectedThemeColor(value);\r\n        localStorage.setItem(\"color\", value);\r\n        window.location.reload();\r\n    }\r\n\r\n    return (\r\n        <Box\r\n            p={2}\r\n            position=\"relative\"\r\n            width=\"100%\"\r\n            display=\"flex\"\r\n            alignItems=\"center\"\r\n            flexDirection=\"column\"\r\n        >\r\n            <Box\r\n                width=\"100%\"\r\n                mt={4}\r\n            >\r\n                <Typography variant=\"h6\">User ID</Typography>\r\n                <Typography variant=\"h6\">{services.usersService.selected?.userId}</Typography>\r\n            </Box>\r\n\r\n            <Box\r\n                width=\"100%\"\r\n                mt={4}\r\n            >\r\n                <Typography variant=\"h6\">User Name</Typography>\r\n                <TextField\r\n                    style={{ marginTop: \"12px\" }}\r\n                    fullWidth\r\n                    value={usersService.selected?.name}\r\n                    onChange={e => props.onChange(\"name\", e.target.value)}\r\n                />\r\n            </Box>\r\n\r\n            <Box\r\n                width=\"100%\"\r\n                mt={4}\r\n            >\r\n                <Typography variant=\"h6\">E-Mail</Typography>\r\n                <TextField\r\n                    onChange={e => props.onChange(\"email\", e.target.value)}\r\n                    style={{ marginTop: \"12px\" }}\r\n                    fullWidth\r\n                    value={usersService.selected?.email}\r\n                />\r\n            </Box>\r\n\r\n\r\n            <Box\r\n                width=\"100%\"\r\n                mt={4}\r\n            >\r\n                <Typography variant=\"h6\">Role</Typography>\r\n                <Typography variant=\"h6\">{usersService.selected ? displayRoles[usersService.selected.role] : \"None\"}</Typography>\r\n            </Box>\r\n\r\n            <Box\r\n                width=\"100%\"\r\n                mt={4}\r\n            >\r\n                <Typography variant=\"h6\">Theme Color</Typography>\r\n                <ColorPalette\r\n                    colors={[\r\n                        \"#e91e63\",\r\n                        \"#f44336\",\r\n                        \"#ff5722\",\r\n                        \"#ff9800\",\r\n                        \"#ffc107\",\r\n                        \"#ffeb3b\",\r\n                        \"#cddc39\",\r\n                        \"#8db860\",\r\n                        \"#4caf50\",\r\n                        \"#009688\",\r\n                        \"#00bcd4\",\r\n                        \"#2196f3\",\r\n                        \"#3f51b5\",\r\n                        \"#9c27b0\",\r\n                    ]}\r\n                    onChange={c => handleThemeColor(c)}\r\n                    value={selectedThemeColor} />\r\n            </Box>\r\n        </Box>\r\n    );\r\n});","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Models\\posts\\entities\\PostType.ts",["753"],"import { Taxonomy } from \"../../Contents/Entities/Taxonomy\";\r\nimport { IPostType } from \"./IPostType\";\r\n\r\n/**\r\n * post type entity.\r\n */\r\nexport class PostType implements IPostType {\r\n    readonly postTypeId: string = \"\";\r\n    readonly taxonomy: Taxonomy = new Taxonomy();\r\n    readonly displayFormat: string = \"table\";\r\n\r\n    constructor(value?: Partial<PostType>) {\r\n        Object.assign(this, value);\r\n    }\r\n\r\n    clone(params?: Partial<PostType>): PostType {\r\n        return new PostType({ ...this, ...params });\r\n    }\r\n}","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\Ecosystems\\PostEditOptionPanel.tsx",["754"],"import React, { useState } from \"react\";\r\nimport {\r\n    Divider, Select, MenuItem,\r\n    Icon,\r\n    TextField, Box, Typography, Button, Switch,\r\n} from \"@material-ui/core\";\r\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\r\nimport { services } from \"../../../Services\";\r\nimport { confirmAsync } from \"../../commons/confirmAsync\";\r\nimport { DateTime } from \"luxon\";\r\nimport { showMediaSelectionDialog } from \"./MediaSelectionDialog\";\r\nimport { postStatusTypes } from \"../../../Models/posts/entities/PostStatusType\";\r\nimport { Content } from \"../../../Models/Contents/Entities/Content\";\r\nimport { StatusType } from \"../../../Models/Contents/Enumes/StatusType\";\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n    KeyboardTimePicker,\r\n    KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport { axios } from \"../../../Repositories/config\";\r\n\r\ninterface PostEditOptionPanelProps {\r\n    contentEditContext: Content;\r\n}\r\n\r\n/**\r\n * Post settings edit panel.\r\n * @param props Props\r\n */\r\nexport function PostEditOptionPanel(props: PostEditOptionPanelProps) {\r\n    const { contentEditContext } = props;\r\n    const matches = useRouteMatch<{ taxonomy: string; }>();\r\n    const history = useHistory();\r\n    const [isReservationed, setIsReservation] = useState(!!props.contentEditContext.publishIn);\r\n\r\n    function setcontentEditContextParam(key: keyof Content, value: any) {\r\n        services.postEditService.setContent(contentEditContext.clone({ [key]: value }));\r\n    }\r\n\r\n    async function selectMedia() {\r\n        const path = await showMediaSelectionDialog();\r\n        if (path) {\r\n            setcontentEditContextParam(\"thumbnail\", path);\r\n        }\r\n    }\r\n\r\n    async function publishAsync() {\r\n        if (! await confirmAsync(\"記事を公開しますがよろしいですか？\", {\r\n            description: \"\"\r\n        })) {\r\n            return;\r\n        }\r\n\r\n        if (!isReservationed) {\r\n            setcontentEditContextParam(\"publishIn\", null);\r\n        }\r\n\r\n        services.postEditService.saveAsync();\r\n\r\n        history.push(\"/posts/\" + matches.params.taxonomy);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Box\r\n                width=\"100%\"\r\n                display=\"flex\"\r\n                mt={1}\r\n            >\r\n                <Select\r\n                    color=\"primary\"\r\n                    style={{ flex: \"1 1 auto\" }}\r\n                    value={contentEditContext.status}\r\n                    onChange={e => setcontentEditContextParam(\"status\", e.target.value)}\r\n                >\r\n                    {postStatusTypes.map(t => (<MenuItem key={t.value} value={t.value}>{t.display}</MenuItem >))}\r\n                </Select>\r\n                <Button\r\n                    style={{ marginLeft: \"8px\" }}\r\n                    onClick={publishAsync}\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                >\r\n                    投稿\r\n                </Button>\r\n            </Box>\r\n\r\n            <Box mt={3}>\r\n                <Divider />\r\n            </Box>\r\n\r\n            {\r\n                contentEditContext.status !== StatusType.Drafting && (\r\n                    <Box width=\"100%\" mt={3}>\r\n                        <Typography color=\"textSecondary\">\r\n                            公開時間予約\r\n                        </Typography>\r\n                        <Box display=\"flex\" alignItems=\"center\">\r\n                            <Switch\r\n                                color=\"primary\"\r\n                                checked={isReservationed}\r\n                                onChange={e => {\r\n                                    setcontentEditContextParam(\"publishIn\", DateTime.local());\r\n                                    setIsReservation(e.target.checked);\r\n                                }}\r\n                            ></Switch>\r\n                            {\r\n                                isReservationed ? \"ON\" : \"OFF\"\r\n                            }\r\n                        </Box>\r\n                        {\r\n                            isReservationed && <>\r\n                                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                    <KeyboardDatePicker\r\n                                        margin=\"normal\"\r\n                                        id=\"date-picker-dialog\"\r\n                                        label=\"公開日\"\r\n                                        format=\"MM/dd/yyyy\"\r\n                                        value={contentEditContext.publishIn?.toJSDate()}\r\n                                        onChange={e => setcontentEditContextParam(\"publishIn\", DateTime.fromISO(e?.toISOString() ?? \"\"))}\r\n                                        KeyboardButtonProps={{\r\n                                            \"aria-label\": \"change date\",\r\n                                        }}\r\n                                    />\r\n                                    <KeyboardTimePicker\r\n                                        margin=\"normal\"\r\n                                        id=\"time-picker\"\r\n                                        label=\"公開時間\"\r\n                                        value={contentEditContext.publishIn?.toJSDate()}\r\n                                        onChange={e => setcontentEditContextParam(\"publishIn\", DateTime.fromISO(e?.toISOString() ?? \"\"))}\r\n                                        KeyboardButtonProps={{\r\n                                            \"aria-label\": \"change time\",\r\n                                        }}\r\n                                    />\r\n                                </MuiPickersUtilsProvider>\r\n                            </>\r\n                        }\r\n                    </Box>\r\n                )\r\n            }\r\n\r\n\r\n            <Box width=\"100%\" mt={3}>\r\n                <Typography color=\"textSecondary\" variant=\"overline\">\r\n                    タイトル\r\n                </Typography>\r\n                <TextField\r\n                    onChange={e => setcontentEditContextParam(\"title\", e.target.value)}\r\n                    placeholder=\"新しい投稿です\"\r\n                    fullWidth\r\n                    value={contentEditContext.title}\r\n                    color=\"primary\"\r\n                />\r\n            </Box>\r\n\r\n            <Box width=\"100%\" mt={2}>\r\n                <Box display=\"flex\">\r\n                    <Typography color=\"textSecondary\" variant=\"overline\">\r\n                        サムネイル\r\n                    </Typography>\r\n                    <Button\r\n                        variant=\"text\"\r\n                        color=\"primary\"\r\n                        size=\"small\"\r\n                        disabled={!contentEditContext.thumbnail}\r\n                        style={{ marginLeft: \"auto\" }}\r\n                        onClick={() => setcontentEditContextParam(\"thumbnail\", \"\")}\r\n                    >\r\n                        クリア\r\n                    </Button>\r\n                </Box>\r\n                <Box\r\n                    height=\"120px\"\r\n                    width=\"100%\"\r\n                    mt={1}\r\n                    overflow=\"hidden\"\r\n                    style={{\r\n                        position: \"relative\",\r\n                        borderRadius: \"2px\",\r\n                        background: \"rgba(127,127,127,0.09)\",\r\n                    }}\r\n                >\r\n                    {\r\n                        contentEditContext.thumbnail && <img\r\n                            alt=\"thumbnail\"\r\n                            style={{\r\n                                height: \"100%\",\r\n                                width: \"100%\",\r\n                                objectFit: \"cover\",\r\n                                WebkitUserSelect: \"none\"\r\n                            }}\r\n                            src={axios.defaults.baseURL + contentEditContext.thumbnail}\r\n                        />\r\n                    }\r\n                    <Button\r\n                        variant=\"text\"\r\n                        color=\"primary\"\r\n                        onClick={() => selectMedia()}\r\n                        style={{\r\n                            position: \"absolute\",\r\n                            left: 0,\r\n                            right: 0,\r\n                            bottom: 0,\r\n                            top: 0,\r\n                            height: \"120px\",\r\n                            width: \"100%\"\r\n                        }}>\r\n                        <Icon>add</Icon>\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n\r\n            <Box mt={2}>\r\n                <Typography color=\"textSecondary\" variant=\"overline\">\r\n                    備考\r\n                </Typography>\r\n                <TextField\r\n                    multiline\r\n                    rows={6}\r\n                    variant=\"filled\"\r\n                    hiddenLabel\r\n                    fullWidth\r\n                    value={contentEditContext.description}\r\n                    onChange={e => setcontentEditContextParam(\"description\", e.target.value)}\r\n                />\r\n            </Box>\r\n\r\n            <Box mt={2}>\r\n                <Typography color=\"textSecondary\" variant=\"overline\">\r\n                    メタデータ\r\n                </Typography>\r\n                <TextField\r\n                    multiline\r\n                    rows={6}\r\n                    variant=\"filled\"\r\n                    hiddenLabel\r\n                    fullWidth\r\n                    value={contentEditContext.metadata}\r\n                    onChange={e => setcontentEditContextParam(\"metadata\", e.target.value)}\r\n                />\r\n            </Box>\r\n        </>\r\n    );\r\n}","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\FieldEditors\\FieldEditor.tsx",["755"],"import React from \"react\";\r\nimport { FieldEditorProps } from \"./FieldEditorProps\";\r\nimport {editors} from \"./Editors\";\r\n\r\nexport function FieldEditor(props: FieldEditorProps) {\r\n    const { field } = props;\r\n\r\n    const Element = editors[field.scheme.type].fieldEditor;\r\n\r\n    if (Element) {\r\n        return (\r\n            <Element field={field} onChange={props.onChange}></Element>\r\n        );\r\n    }\r\n\r\n    return <></>;\r\n}","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Models\\Contents\\Entities\\Scheme.ts",[],"C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Models\\users\\user.ts",["756","757","758"],"import { RoleType } from \"../auth/role\";\r\nimport { WebSite } from \"../sites/web-site\";\r\nimport { IUser } from \"./user.interface\";\r\n\r\n/**\r\n * Express user entity.\r\n */\r\nexport class User implements IUser {\r\n    /**\r\n     * user id\r\n     */\r\n    public userId: string;\r\n\r\n    /**\r\n     * is active user\r\n     */\r\n    public isActive: boolean;\r\n\r\n    /**\r\n     * user name\r\n     */\r\n    public name: string;\r\n\r\n    /**\r\n     * email\r\n     */\r\n    public email: string;\r\n\r\n    /**\r\n     * user role\r\n     */\r\n    public role: RoleType;\r\n\r\n    /**\r\n     * web sites\r\n     */\r\n    public identifiers: string[];\r\n\r\n    /**\r\n     * avatar image url.\r\n     */\r\n    public avatar: string;\r\n\r\n    /**\r\n     * constructor\r\n     * @param userId user id\r\n     * @param name name\r\n     * @param email user email\r\n     * @param password user password\r\n     * @param role user role\r\n     * @param isActive is active user\r\n     * @param identifiers web sites that user can login\r\n     */\r\n    constructor(\r\n        userId: string,\r\n        name: string,\r\n        email: string,\r\n        role: RoleType,\r\n        isActive: boolean,\r\n        identifiers: string[],\r\n        avatar: string\r\n    ) {\r\n        this.userId = userId;\r\n        this.isActive = isActive;\r\n        this.name = name;\r\n        this.email = email;\r\n        this.role = role;\r\n        this.identifiers = identifiers;\r\n        this.avatar = avatar;\r\n    }\r\n\r\n    /**\r\n     * clone this instance\r\n     */\r\n    public clone(): User {\r\n        return new User(this.userId, this.name, this.email, this.role, this.isActive, this.identifiers, this.avatar);\r\n    }\r\n\r\n    public with(params: Partial<User>) {\r\n        const user = this.clone();\r\n        Object.assign(user, params);\r\n        return user;\r\n    }\r\n}\r\n","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Models\\auth\\role.ts",[],"C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Models\\route.ts",["759"],"import { RoleType } from \"./auth/role\";\r\n\r\nexport interface Route {\r\n    path: string;\r\n    to?: string;\r\n    title: string;\r\n    icon: string;\r\n    component: () => Promise<any>;\r\n    role: RoleType;\r\n    exact?: boolean;\r\n    children?: ChildRoute[];\r\n}\r\n\r\nexport interface ChildRoute {\r\n    path: string;\r\n    component: () => Promise<any>;\r\n    exact?: boolean;\r\n    children?: ChildRoute[];\r\n}","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Models\\Contents\\Enumes\\StatusType.ts",[],"C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Plugins\\PluginComponent.tsx",[],"C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\Media\\Ecosystems\\index.ts",[],"C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\commons\\index.ts",[],"C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\Ecosystems\\index.ts",[],"C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\commons\\showDialog.tsx",["760","761"],"import React, { useEffect, useState } from \"react\";\r\nimport { render, unmountComponentAtNode, } from \"react-dom\";\r\nimport {\r\n    Dialog,\r\n    Grow,\r\n    DialogContent as DContent,\r\n    useMediaQuery,\r\n    Typography,\r\n    DialogActions,\r\n    Box\r\n} from \"@material-ui/core\";\r\nimport { makeStyles, Theme, createStyles, ThemeProvider } from \"@material-ui/core/styles\";\r\nimport { theme } from \"../../theme\";\r\n\r\ninterface DialogProp<T, U> {\r\n    onClose: (value: U) => void;\r\n    context: T;\r\n    content: (props: DialogContentProp<T, U>) => React.ReactElement;\r\n    element: HTMLElement;\r\n    maxWidth: false | \"md\" | \"xs\" | \"sm\" | \"lg\" | \"xl\" | undefined;\r\n}\r\n\r\nfunction DialogBase<T, U>(props: DialogProp<T, U>) {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const classes = useStyles();\r\n    const matches = useMediaQuery(theme.breakpoints.down(\"xs\"));\r\n\r\n    useEffect(() => {\r\n        setIsOpen(true);\r\n    }, []);\r\n\r\n    const onClose = (e: U) => {\r\n        setIsOpen(false);\r\n        setTimeout(() => {\r\n            props.onClose(e);\r\n        }, 500);\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            TransitionComponent={Grow}\r\n            open={isOpen}\r\n            disableBackdropClick\r\n            disableEscapeKeyDown\r\n            maxWidth={props.maxWidth}\r\n            fullWidth\r\n            fullScreen={matches}\r\n            container={props.element}\r\n        >\r\n            <DContent style={{ padding: \"0px\" }}>\r\n                <props.content\r\n                    onClose={e => onClose(e)}\r\n                    context={props.context}></props.content>\r\n            </DContent>\r\n        </Dialog >\r\n    );\r\n}\r\n\r\nexport interface DialogContentProp<T, U> {\r\n    onClose: (value: U) => void;\r\n    context: T;\r\n    forwardRef?: any;\r\n}\r\n\r\ninterface DialogOption {\r\n    maxWidth: false | \"md\" | \"xs\" | \"sm\" | \"lg\" | \"xl\" | undefined;\r\n}\r\n\r\nexport function showDialogAsync<T, U, V extends React.ReactElement>(\r\n    component: (props: DialogContentProp<T, U>) => V,\r\n    context: T,\r\n    option?: DialogOption\r\n): Promise<U> {\r\n    return new Promise(resolve => {\r\n        const element = document.createElement(\"div\");\r\n        document.body.appendChild(element);\r\n\r\n        const onClose = (e: U) => {\r\n            unmountComponentAtNode(element);\r\n            document.body.removeChild(element);\r\n            element.remove();\r\n            resolve(e);\r\n        };\r\n        render(\r\n            <ThemeProvider theme={theme}>\r\n                <DialogBase\r\n                    onClose={onClose}\r\n                    content={component}\r\n                    context={context}\r\n                    element={element}\r\n                    maxWidth={option?.maxWidth} />\r\n            </ThemeProvider>,\r\n            element);\r\n    });\r\n}\r\n\r\ninterface DialogContentFrameProps {\r\n    children?: React.ReactNode;\r\n    actions?: React.ReactNode;\r\n    message?: string;\r\n    description?: string;\r\n}\r\n\r\nexport function DialogContentFrame(props: DialogContentFrameProps) {\r\n    return (\r\n        <Box>\r\n            <Box p={3}>\r\n                {\r\n                    props.message &&\r\n                    <Box>\r\n                        <Typography variant=\"h6\">{props.message}</Typography>\r\n                    </Box>\r\n                }\r\n                {\r\n                    props.description &&\r\n                    <Box mt={3}>\r\n                        <Typography variant=\"overline\" color=\"textSecondary\">\r\n                            {props.description}\r\n                        </Typography>\r\n                    </Box>\r\n                }\r\n                {\r\n                    props.children &&\r\n                    <Box my={3}>\r\n                        {props.children}\r\n                    </Box>\r\n                }\r\n            </Box>\r\n            <Box p={1}>\r\n                {\r\n                    props.actions && <DialogActions >\r\n                        {props.actions}\r\n                    </DialogActions>\r\n                }\r\n            </Box >\r\n        </Box>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        modal: {\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            outline: \"none\"\r\n        },\r\n        paper: {\r\n            backgroundColor: theme.palette.background.paper,\r\n            border: \"2px solid #000\",\r\n            boxShadow: theme.shadows[5],\r\n            padding: theme.spacing(2, 4, 3),\r\n        },\r\n        container: {\r\n            width: \"90%\"\r\n        }\r\n    }),\r\n);","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\Media\\Ecosystems\\ImageGrid.tsx",["762","763","764","765","766","767","768","769"],"import React, { useState, useEffect } from \"react\";\r\nimport { Box, Input, Button, Divider, makeStyles, Backdrop } from \"@material-ui/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport { services } from \"../../../Services\";\r\nimport { PhotoGridView } from \"../../commons\";\r\nimport { Flipped, Flipper } from \"react-flip-toolkit\";\r\nimport { timer } from \"rxjs\";\r\nimport { axios } from \"../../../Repositories/config\";\r\n\r\nexport const ImageGrid = observer(() => {\r\n    const classes = useStyle();\r\n    const [path, setPath] = useState(\"\");\r\n    const [selected, setSelected] = useState<string | null>(null);\r\n    const [isAnimating, setIsAnimating] = useState(false);\r\n\r\n    useEffect(() => {\r\n        services.mediaService.fetchAllFilesAsync();\r\n    }, []);\r\n\r\n    return (\r\n        <Box mt={2} display=\"flex\" flexWrap=\"wrap\" width=\"100%\">\r\n            <PhotoGridView\r\n                multiSelect\r\n                baseUrl={axios.defaults.baseURL}\r\n                images={services.mediaService.files}\r\n                selected={services.mediaService.selected}\r\n                selectionChanged={selected => services.mediaService.setSelected(selected)}\r\n                invoked={path => {\r\n                    setSelected(path);\r\n                    setPath(path);\r\n                }}\r\n            />\r\n\r\n            <Backdrop style={{ zIndex: 9999 }} open={!!selected} onClick={() => {\r\n                setSelected(null);\r\n            }}>\r\n                <div\r\n                    onClick={() => setSelected(null)}\r\n                    style={{\r\n                        zIndex: 9999,\r\n                        position: \"fixed\",\r\n                        top: 0,\r\n                        left: 0,\r\n                        right: 0,\r\n                        bottom: 0,\r\n                        margin: \"auto\",\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                        justifyContent: \"center\"\r\n                    }}\r\n                >\r\n                    <img\r\n                        onClick={() => setSelected(null)}\r\n                        src={axios.defaults.baseURL + path}\r\n                        alt={path}\r\n                        className={classes.img}\r\n                    />\r\n                </div>\r\n            </Backdrop>\r\n        </Box>\r\n    );\r\n});\r\n\r\nconst useStyle = makeStyles({\r\n    imgContainer: {\r\n        height: \"160px\",\r\n    },\r\n    img: {\r\n        height: \"90%\",\r\n        width: \"90%\",\r\n        objectFit: \"contain\"\r\n    }\r\n});","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\commons\\ValidationTextField.tsx",["770"],"import { TextField, TextFieldProps } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\n\r\ninterface ValidationTextFieldProps {\r\n    value?: unknown;\r\n    rules?: RegExp;\r\n    required?: boolean;\r\n    errorText?: string;\r\n    textChanged?: (e: { value: string, valid: boolean }) => void;\r\n};\r\n\r\nexport function ValidationTextField(props: ValidationTextFieldProps & TextFieldProps) {\r\n    const [isError, setIsError] = useState(false);\r\n    const [isChanged, setIsChanged] = useState(false);\r\n\r\n\r\n    function handleChange(value: string) {\r\n        const valid = props.rules?.test(value) ?? true;\r\n\r\n        if (isError !== !valid) {\r\n            setIsError(!valid);\r\n        }\r\n\r\n        props.textChanged && props.textChanged({\r\n            value,\r\n            valid\r\n        });\r\n    }\r\n\r\n    return <TextField\r\n        {...props}\r\n        error={(isError || (props.required && !props.value)) && isChanged}\r\n        value={props.value}\r\n        onChange={e => { setIsChanged(true); handleChange(e.target.value); }}\r\n        helperText={\r\n            (props.required && !props.value) && isChanged ?\r\n                \"入力してください\" :\r\n                isError ?\r\n                    props.errorText :\r\n                    props.helperText\r\n        }\r\n    ></TextField>;\r\n}","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\commons\\messageAsync.tsx",["771","772","773"],"import React, { useEffect, useState } from \"react\";\r\nimport { showDialogAsync, DialogContentProp } from \"./showDialog\";\r\nimport { Box, Typography, Button, useTheme } from \"@material-ui/core\";\r\n\r\n/**\r\n * Dialog that can confirm Ok or Cancel.\r\n * @param props dialog props\r\n */\r\nfunction MessageDialog(props: DialogContentProp<MessageOption & { message: string; }, void>) {\r\n    const theme = useTheme();\r\n    return (\r\n        <Box p={2}>\r\n            <Box>\r\n                <Typography variant=\"h6\">{props.context.message}</Typography>\r\n            </Box>\r\n\r\n            <Box mt={1}>\r\n                <Typography variant=\"overline\" style={{ color: theme.palette.grey[500] }}>\r\n                    {props.context.description}\r\n                </Typography>\r\n            </Box>\r\n            <Box marginTop=\"24px\" display=\"flex\">\r\n                <Button\r\n                    style={{ marginLeft: \"auto\" }}\r\n                    variant=\"contained\"\r\n                    onClick={() => props.onClose()}\r\n                    color=\"primary\" >\r\n                    {props.context.okText}\r\n                </Button>\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n\r\ninterface MessageOption {\r\n    description: string;\r\n    okText: string;\r\n}\r\n\r\n/**\r\n * show confirm dialog async.\r\n * @param message confirm message\r\n * @param option dialog option\r\n */\r\nexport async function messageAsync(message: string, option?: Partial<MessageOption>) {\r\n    const merged = ({\r\n        message,\r\n        description: \"\",\r\n        okText: \"OK\",\r\n        ...option\r\n    }) as MessageOption & { message: string; };\r\n\r\n    return await showDialogAsync(MessageDialog, merged);\r\n}","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\Ecosystems\\SchemeSettingPanel.tsx",["774","775","776","777","778","779"],"import React, { useState } from \"react\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    Fab,\r\n    Grid,\r\n    Icon,\r\n    IconButton,\r\n    makeStyles,\r\n    Paper,\r\n    TextField,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport { Scheme, SchemeType, schemeTypeDisplayNames } from \"../../../Models/Contents/Entities/Scheme\";\r\nimport { PostType } from \"../../../Models/posts/entities/PostType\";\r\nimport { Flipper, Flipped } from \"react-flip-toolkit\";\r\nimport { v4 } from \"uuid\";\r\nimport { showFieldTypeEditDialogAsync } from \"./FieldTypeEditDialog\";\r\nimport { SortableContainer, SortableElement, arrayMove, SortableHandle } from \"react-sortable-hoc\";\r\nimport { confirmAsync } from \"../../commons/confirmAsync\";\r\nimport { WrappedTextBlock } from \"../../commons\";\r\n\r\ninterface SchemeSettingPanelProps {\r\n    postType: PostType;\r\n    onChange: (scheme: PostType) => void;\r\n}\r\n\r\n/**\r\n * Provides scheme settings.\r\n * @param props props\r\n */\r\nexport function SchemeSettingPanel(props: SchemeSettingPanelProps) {\r\n    const styles = useStyles();\r\n\r\n    const { postType, onChange } = props;\r\n    const [trigger, setTrigger] = useState(0);\r\n\r\n    async function addScheme() {\r\n        const edited = await showFieldTypeEditDialogAsync(new Scheme({\r\n            schemeId: v4()\r\n        }));\r\n        if (!edited) {\r\n            return;\r\n        }\r\n\r\n        props.onChange && props.onChange(\r\n            props.postType.clone({\r\n                taxonomy: props.postType.taxonomy.clone({\r\n                    schemes: [\r\n                        ...postType.taxonomy.schemes,\r\n                        edited\r\n                    ]\r\n                })\r\n            })\r\n        );\r\n        setTrigger(trigger + 1);\r\n    }\r\n\r\n    function handleChangeScheme(scheme: Scheme) {\r\n        const schemes = postType.taxonomy.schemes;\r\n        const _scheme = schemes.find(s => s.schemeId === scheme.schemeId);\r\n        if (_scheme) {\r\n            const i = schemes.indexOf(_scheme);\r\n            schemes[i] = scheme;\r\n            props.onChange && props.onChange(\r\n                props.postType.clone({\r\n                    taxonomy: props.postType.taxonomy.clone({\r\n                        schemes: [\r\n                            ...schemes,\r\n                        ]\r\n                    })\r\n                })\r\n            );\r\n        }\r\n    }\r\n\r\n    function handleSortScheme(from: number, to: number) {\r\n        props.onChange && props.onChange(\r\n            props.postType.clone({\r\n                taxonomy: props.postType.taxonomy.clone({\r\n                    schemes: arrayMove(postType.taxonomy.schemes, from, to)\r\n                })\r\n            })\r\n        );\r\n    }\r\n\r\n    async function handleChangeFieldType(scheme: Scheme) {\r\n        const edited = await showFieldTypeEditDialogAsync(scheme);\r\n        if (!edited) {\r\n            return;\r\n        }\r\n\r\n        const schemes = postType.taxonomy.schemes;\r\n        const _scheme = schemes.find(s => s.schemeId === edited.schemeId);\r\n\r\n        if (_scheme) {\r\n            const i = schemes.indexOf(_scheme);\r\n            schemes[i] = edited;\r\n            props.onChange && props.onChange(\r\n                props.postType.clone({\r\n                    taxonomy: props.postType.taxonomy.clone({\r\n                        schemes: [\r\n                            ...schemes,\r\n                        ]\r\n                    })\r\n                })\r\n            );\r\n        }\r\n    }\r\n\r\n    async function handleDelete(scheme: Scheme, i: number) {\r\n        if (!await confirmAsync(\"フィールドを削除しますか？\")) {\r\n            return;\r\n        }\r\n\r\n        props.onChange && props.onChange(\r\n            props.postType.clone({\r\n                taxonomy: props\r\n                    .postType\r\n                    .taxonomy\r\n                    .clone({\r\n                        schemes: [\r\n                            ...postType\r\n                                .taxonomy\r\n                                .schemes\r\n                                .filter(s => s !== scheme)\r\n                        ]\r\n                    })\r\n            })\r\n        );\r\n        setTrigger(trigger + 1);\r\n    }\r\n\r\n    const SortableItem = SortableElement(\r\n        (props: {\r\n            value: Scheme,\r\n            sortIndex: number,\r\n            deleteHandler: (scheme: Scheme, index: number) => void,\r\n            changeFieldTypeHandler: (scheme: Scheme) => void,\r\n            changeSchemeHandler: (scheme: Scheme) => void\r\n        }) =>\r\n            <Flipped\r\n                flipId={props.value.schemeId}\r\n                translate\r\n            >\r\n                <div style={{ padding: \"4px\" }}>\r\n                    <SchemeItem\r\n                        scheme={props.value}\r\n                        deletePresssed={() => props.deleteHandler(props.value, props.sortIndex)}\r\n                        editPressed={() => props.changeFieldTypeHandler(props.value)}\r\n                        onChange={s => props.changeSchemeHandler(s)}\r\n                    />\r\n                </div>\r\n            </Flipped>\r\n    );\r\n\r\n    const SortableList = SortableContainer(\r\n        (props: {\r\n            items: Scheme[],\r\n            trigger: Number,\r\n            deleteHandler: (scheme: Scheme, index: number) => void,\r\n            changeFieldTypeHandler: (scheme: Scheme) => void,\r\n            changeSchemeHandler: (scheme: Scheme) => void\r\n        }) =>\r\n            (\r\n                <Flipper\r\n                    flipKey={`key_${props.trigger}`}\r\n                >\r\n                    {\r\n                        props.items.map(\r\n                            (s: Scheme, i: number) => (\r\n                                <SortableItem\r\n                                    key={`item-${s.schemeId}`} index={i}\r\n                                    sortIndex={i}\r\n                                    value={s}\r\n                                    deleteHandler={(s, i) => props.deleteHandler(s, i)}\r\n                                    changeFieldTypeHandler={s => props.changeFieldTypeHandler(s)}\r\n                                    changeSchemeHandler={s => props.changeSchemeHandler(s)}\r\n                                />\r\n                            )\r\n                        )\r\n                    }\r\n                </Flipper>\r\n            )\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <Box\r\n                mt={6}\r\n                display=\"flex\"\r\n                flexDirection=\"column\"\r\n                maxWidth=\"960px\"\r\n                width=\"100%\"\r\n            >\r\n                <Typography variant=\"h6\" >APIスキーム</Typography>\r\n                <Typography color=\"textSecondary\" variant=\"caption\" >\r\n                    管理するコンテンツのスキームを定義します。\r\n                </Typography>\r\n                <SortableList\r\n                    trigger={trigger}\r\n                    useDragHandle\r\n                    items={postType.taxonomy.schemes}\r\n                    onSortEnd={({ oldIndex, newIndex }) => handleSortScheme(oldIndex, newIndex)}\r\n                    deleteHandler={(s, i) => handleDelete(s, i)}\r\n                    changeFieldTypeHandler={s => handleChangeFieldType(s)}\r\n                    changeSchemeHandler={s => handleChangeScheme(s)}\r\n                />\r\n                <Box mt={3} />\r\n                <Button onClick={addScheme}>\r\n                    <Icon>add</Icon>\r\n                        スキームを追加\r\n                </Button>\r\n            </Box>\r\n        </>\r\n    );\r\n}\r\n\r\ninterface SchemeItemProps {\r\n    scheme: Scheme;\r\n    onChange: (s: Scheme) => void;\r\n    deletePresssed: () => void;\r\n    editPressed: () => void;\r\n}\r\n\r\nconst DragHandle = SortableHandle(() => <Box\r\n    style={{ cursor: \"pointer\" }}\r\n    width=\"40px\"\r\n    display=\"flex\"\r\n    alignItems=\"center\"\r\n>\r\n    <Icon fontSize=\"small\">reorder</Icon>\r\n</Box>);\r\n\r\n/**\r\n * for a scheme editing.\r\n * @param props props\r\n */\r\nfunction SchemeItem(props: SchemeItemProps) {\r\n    function handlePropertyChanged(key: keyof Scheme, value: unknown) {\r\n        props.onChange(\r\n            props.scheme.clone({\r\n                [key]: value\r\n            })\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Paper style={{ padding: \"8px\" }}>\r\n            <Box display=\"flex\">\r\n                <DragHandle />\r\n                <Box flex=\"1 1 auto\" overflow=\"hidden\">\r\n                    <Grid container>\r\n                        <Grid item xs={12} sm={6} md={3}>\r\n                            <Box p={1}>\r\n                                <Typography\r\n                                    variant=\"caption\"\r\n                                    color=\"textSecondary\"\r\n                                    noWrap>フィールド名</Typography>\r\n                                <Box mt={1} />\r\n                                <Typography\r\n                                    color=\"primary\"\r\n                                    noWrap>{props.scheme.name}</Typography>\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6} md={3}>\r\n                            <Box p={1}>\r\n                                <Typography\r\n                                    variant=\"caption\"\r\n                                    color=\"textSecondary\"\r\n                                    noWrap>表示名</Typography>\r\n                                <Box mt={1} />\r\n                                <Typography\r\n                                    color=\"primary\"\r\n                                    noWrap>{props.scheme.displayName}</Typography>\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6} md={3}>\r\n                            <Box p={1}>\r\n                                <Typography variant=\"caption\"\r\n                                    color=\"textSecondary\"\r\n                                    noWrap>備考</Typography>\r\n                                <Box mt={1} />\r\n                                <WrappedTextBlock\r\n                                    color=\"textSecondary\"\r\n                                    row={3}\r\n                                    variant=\"caption\"\r\n                                    fontSize=\"12px\"\r\n                                >\r\n                                    {props.scheme.description}\r\n                                </WrappedTextBlock>\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6} md={3}>\r\n                            <Box p={1}>\r\n                                <Typography\r\n                                    variant=\"caption\"\r\n                                    color=\"textSecondary\"\r\n                                    noWrap\r\n                                >\r\n                                    フィールドタイプ\r\n                                </Typography>\r\n                                <Box mt={1} />\r\n                                <Typography\r\n                                    color=\"primary\"\r\n                                    noWrap>{schemeTypeDisplayNames[props.scheme.type]}</Typography>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n                <Box width=\"60px\" display=\"flex\" alignItems=\"center\" justifyContent=\"flex-end\">\r\n                    <IconButton\r\n                        onClick={props.editPressed}\r\n                        size=\"small\"\r\n                        color=\"primary\"\r\n                    >\r\n                        <Icon>edit</Icon>\r\n                    </IconButton>\r\n                    <IconButton\r\n                        onClick={props.deletePresssed}\r\n                        size=\"small\"\r\n                        color=\"primary\"\r\n                    >\r\n                        <Icon>delete</Icon>\r\n                    </IconButton>\r\n                </Box>\r\n            </Box>\r\n        </Paper>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    itemTitle: {\r\n        width: \"320px\"\r\n    }\r\n});","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\FieldEditors\\Editors\\index.ts",["780"],"import { Editor } from \"./Editor\";\r\n\r\nimport { TextareaEditor } from \"./Area\";\r\nimport { ImageEditor } from \"./Image\";\r\nimport { PhotoGalleryEditor } from \"./PhotoGallery\";\r\nimport { RichEditor } from \"./Rich\";\r\nimport { SelectEditor } from \"./Select\";\r\nimport { SwitchEditor } from \"./Switch\";\r\nimport { TextFieldEditor } from \"./Text\";\r\n\r\nexport const editors: { [key: string]: Editor } = {\r\n    \"text-area\": TextareaEditor,\r\n    \"image\": ImageEditor,\r\n    \"photo-gallery\": PhotoGalleryEditor,\r\n    \"rich-editor\": RichEditor,\r\n    \"select\": SelectEditor,\r\n    \"switch\": SwitchEditor,\r\n    \"text-field\": TextFieldEditor\r\n};","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\commons\\confirmAsync.tsx",["781","782","783","784","785","786"],"import React, { useEffect, useState } from \"react\";\r\nimport { showDialogAsync, DialogContentProp, DialogContentFrame } from \"./showDialog\";\r\nimport { Box, Typography, Button, useTheme } from \"@material-ui/core\";\r\n\r\n/**\r\n * Dialog that can confirm Ok or Cancel.\r\n * @param props dialog props\r\n */\r\nfunction ConfirmDialog(props: DialogContentProp<ConfirmOption & { message: string; }, boolean>) {\r\n    const theme = useTheme();\r\n    return (\r\n        <DialogContentFrame\r\n            actions={<>\r\n                <Button\r\n                    variant=\"text\"\r\n                    onClick={() => props.onClose(false)}\r\n                >\r\n                    {props.context.cancelText}\r\n                </Button>\r\n                <Button\r\n                    variant=\"text\"\r\n                    onClick={() => props.onClose(true)}\r\n                    color=\"primary\" >\r\n                    {props.context.okText}\r\n                </Button>\r\n            </>}\r\n            description={props.context.description}\r\n            message={props.context.message}\r\n        >\r\n        </DialogContentFrame>\r\n    );\r\n}\r\n\r\ninterface ConfirmOption {\r\n    description: string;\r\n    okText: string;\r\n    cancelText: string;\r\n}\r\n\r\n/**\r\n * show confirm dialog async.\r\n * @param message confirm message\r\n * @param option dialog option\r\n */\r\nexport async function confirmAsync(message: string, option?: Partial<ConfirmOption>) {\r\n    const merged = ({\r\n        message,\r\n        description: \"\",\r\n        okText: \"OK\",\r\n        cancelText: \"Cancel\",\r\n        ...option\r\n    }) as ConfirmOption & { message: string; };\r\n\r\n    return await showDialogAsync(ConfirmDialog, merged);\r\n}","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\FieldEditors\\Editors\\Switch.tsx",["787","788","789"],"import React from \"react\";\r\nimport { FieldEditorProps } from \"../FieldEditorProps\";\r\nimport { Switch as MSwitch } from \"@material-ui/core\";\r\nimport { SchemeType } from \"../../../../Models/Contents/Entities/Scheme\";\r\nimport { Editor } from \"./Editor\";\r\n\r\nexport const SwitchEditor: Editor = {\r\n    fieldEditor: Switch,\r\n    schemeEditor: () => <></>,\r\n    type: \"switch\" as SchemeType,\r\n    name: \"スイッチ\",\r\n    description: \"スイッチでオン/オフを切り替えることができます。\"\r\n};\r\n\r\nexport function Switch(props: FieldEditorProps) {\r\n    function handleChange(text: string) {\r\n        props.onChange(props.field.field.clone({\r\n            value: text\r\n        }));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <MSwitch\r\n                color=\"primary\"\r\n                checked={props.field.field.value === \"1\"}\r\n                onChange={e => handleChange(e.target.checked ? \"1\" : \"0\")}\r\n            ></MSwitch>\r\n        </>\r\n    );\r\n}","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\FieldEditors\\Editors\\Text.tsx",["790","791","792"],"import React from \"react\";\r\nimport { FieldEditorProps } from \"../FieldEditorProps\";\r\nimport { ValidationTextField } from \"../../../commons\";\r\nimport { SchemeType } from \"../../../../Models/Contents/Entities/Scheme\";\r\nimport { Editor } from \"./Editor\";\r\n\r\nexport const TextFieldEditor: Editor = {\r\n    fieldEditor: Text,\r\n    schemeEditor: () => <></>,\r\n    type: \"text-field\" as SchemeType,\r\n    name: \"画像\",\r\n    description: \"画像用のフィールドです。APIからは画像URLが返却されます。\"\r\n};\r\n\r\nexport function Text(props: FieldEditorProps) {\r\n    function handleChange(text: string) {\r\n        props.onChange(props.field.field.clone({\r\n            value: text\r\n        }));\r\n    }\r\n\r\n    return (\r\n        <ValidationTextField\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            helperText={props.helperText}\r\n            errorText=\"無効な値です\"\r\n            required={props.required}\r\n            rules={props.rule}\r\n            value={props.field.field.value}\r\n            textChanged={e => handleChange(e.value)}\r\n        />\r\n    );\r\n}","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\FieldEditors\\Editors\\Select.tsx",["793","794","795","796","797","798"],"import React, { useEffect } from \"react\";\r\nimport { FieldEditorProps } from \"../FieldEditorProps\";\r\nimport { ValidationTextField } from \"../../../commons\";\r\nimport { Select as MSelect, MenuItem, TextField, Typography } from \"@material-ui/core\";\r\nimport { SchemeEditorProps } from \"../SchemeEditorProps\";\r\nimport { SchemeType } from \"../../../../Models/Contents/Entities/Scheme\";\r\nimport { Editor } from \"./Editor\";\r\n\r\nexport const SelectEditor: Editor = {\r\n    fieldEditor: Select,\r\n    schemeEditor: SelectScheme,\r\n    type: \"select\" as SchemeType,\r\n    name: \"セレクトフィールド\",\r\n    description: \"定義したリストの中から値を選択するフィールドです。\"\r\n};\r\n\r\nexport function Select(props: FieldEditorProps) {\r\n    function handleChange(text: string) {\r\n        props.onChange(props.field.field.clone({\r\n            value: text\r\n        }));\r\n    }\r\n\r\n    const selection = props.field.scheme.metadata.split(\",\");\r\n\r\n    useEffect(() => {\r\n        if (!props.field.field.value) {\r\n            handleChange(selection[0] ?? \"\");\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <MSelect\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            required={props.required}\r\n            value={props.field.field.value}\r\n            onChange={e => handleChange(e.target.value as string)}\r\n        >\r\n            {\r\n                selection.map(text => (\r\n                    <MenuItem value={text}>{text}</MenuItem>\r\n                ))\r\n            }\r\n        </MSelect>\r\n    );\r\n}\r\n\r\nexport function SelectScheme(props: SchemeEditorProps) {\r\n    function handleChange(text: string) {\r\n        props.onChange(props.scheme.clone({\r\n            metadata: text\r\n        }));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Typography>選択肢</Typography>\r\n            <TextField\r\n                fullWidth\r\n                rows=\"4\"\r\n                multiline\r\n                variant=\"filled\"\r\n                value={props.scheme.metadata}\r\n                onChange={e => handleChange(e.target.value)}\r\n                helperText=\"「,」カンマ区切りで選択肢を謬力してください\"\r\n            />\r\n        </>\r\n    );\r\n}","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\FieldEditors\\Editors\\Rich.tsx",["799","800","801"],"import React from \"react\";\r\nimport { SchemeType } from \"../../../../Models/Contents/Entities/Scheme\";\r\nimport { RitchEditor } from \"../../../commons/Editor\";\r\nimport { FieldEditorProps } from \"./../FieldEditorProps\";\r\nimport { Editor } from \"./Editor\";\r\n\r\nexport const RichEditor: Editor = {\r\n    schemeEditor: () => <></>,\r\n    fieldEditor: Rich,\r\n    type: \"rich-editor\" as SchemeType,\r\n    name: \"リッチエディタ\",\r\n    description: \"自由入力の複数行テキストです。リッチエディタによる編集が可能です。APIからHTMLが取得できます。\"\r\n};\r\n\r\nexport function Rich(props: FieldEditorProps) {\r\n    function handleChange(text: string) {\r\n        props.onChange(props.field.field.clone({\r\n            value: text\r\n        }));\r\n    }\r\n\r\n    return (\r\n        <RitchEditor\r\n            content={props.field.field.value}\r\n            contentChanged={e => handleChange(e)}\r\n        />\r\n    );\r\n}\r\n","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\FieldEditors\\Editors\\PhotoGallery.tsx",["802","803","804"],"C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\FieldEditors\\Editors\\Image.tsx",["805","806","807","808"],"C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\FieldEditors\\Editors\\Area.tsx",["809","810","811"],"import React from \"react\";\r\nimport { SchemeType } from \"../../../../Models/Contents/Entities/Scheme\";\r\nimport { ValidationTextField } from \"../../../commons\";\r\nimport { FieldEditorProps } from \"../FieldEditorProps\";\r\nimport { Editor } from \"./Editor\";\r\n\r\nexport const TextareaEditor: Editor = {\r\n    fieldEditor: Area,\r\n    schemeEditor: () => <></>,\r\n    type: \"text-area\" as SchemeType,\r\n    name: \"テキストエリア\",\r\n    description: \"自由入力の複数行テキストです。リッチエディタによる編集が可能です。APIからHTMLが取得できます。\"\r\n};\r\n\r\nfunction Area(props: FieldEditorProps) {\r\n    function handleChange(text: string) {\r\n        props.onChange(props.field.field.clone({\r\n            value: text\r\n        }));\r\n    }\r\n\r\n    return (\r\n        <ValidationTextField\r\n            fullWidth\r\n            rows={8}\r\n            variant=\"outlined\"\r\n            multiline\r\n            helperText={props.helperText}\r\n            errorText=\"無効な値です\"\r\n            required={props.required}\r\n            rules={props.rule}\r\n            value={props.field.field.value}\r\n            textChanged={e => handleChange(e.value)}\r\n        />\r\n    );\r\n}","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\Ecosystems\\FieldTypeEditDialog.tsx",["812","813","814","815","816","817"],"import React, { useState } from \"react\";\r\nimport { showDialogAsync, DialogContentProp } from \"../../commons/showDialog\";\r\nimport { Box, Typography, Button, TextField, useTheme } from \"@material-ui/core\";\r\nimport { Scheme, SchemeType, schemeTypeDisplayNames } from \"../../../Models/Contents/Entities/Scheme\";\r\nimport { SchemeEditor } from \"../FieldEditors/SchemeEditor\";\r\n\r\nexport default function FieldTypeEditDialog(props: DialogContentProp<Scheme, Scheme | null>) {\r\n    const [scheme, setScheme] = useState(props.context);\r\n    const theme = useTheme();\r\n    const [isChanged, setIsChanged] = useState(false);\r\n\r\n    function handleClick(key: SchemeType) {\r\n        setScheme(scheme.clone({\r\n            type: key\r\n        }));\r\n    }\r\n\r\n    return (\r\n        <Box display=\"flex\" >\r\n            <Box style={{ background: \"rgb(240,240,240)\" }}>\r\n                <Box width=\"240px\" p={2}>\r\n                    {\r\n                        Object.keys(schemeTypeDisplayNames).map(key => (\r\n                            <Box p={1}>\r\n                                <Button\r\n                                    fullWidth\r\n                                    color=\"primary\"\r\n                                    variant={key === scheme.type ? \"contained\" : \"text\"}\r\n                                    onClick={() => handleClick(key as SchemeType)}\r\n                                >\r\n                                    {schemeTypeDisplayNames[key]}\r\n                                </Button>\r\n                            </Box>\r\n                        ))\r\n                    }\r\n                </Box>\r\n            </Box>\r\n            <Box flex=\"1 1 auto\" display=\"flex\" flexDirection=\"column\" >\r\n                <SchemeEditor scheme={scheme} onChange={e => {\r\n                    setScheme(e);\r\n                    setIsChanged(true);\r\n                }} />\r\n                <Box p={2} width=\"100%\" display=\"flex\">\r\n                    <Box ml=\"auto\" />\r\n                    <Button color=\"primary\" variant=\"text\" onClick={() => props.onClose(null)}>Cancel</Button>\r\n                    <Box ml={1} />\r\n                    <Button\r\n                        disabled={!(scheme.name && scheme.displayName) || !isChanged}\r\n                        color=\"primary\"\r\n                        variant=\"contained\"\r\n                        onClick={() => props.onClose(scheme)}\r\n                    >Ok</Button>\r\n                </Box>\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport async function showFieldTypeEditDialogAsync(params: Scheme) {\r\n    return await showDialogAsync(FieldTypeEditDialog, params, {\r\n        maxWidth: \"lg\"\r\n    });\r\n}","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\Ecosystems\\MediaSelectionDialog.tsx",["818","819","820","821","822"],"import { showDialogAsync, DialogContentProp } from \"../../commons/showDialog\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { useObserver } from \"mobx-react\";\r\nimport { services } from \"../../../Services\";\r\nimport {\r\n    Button,\r\n    Box,\r\n    makeStyles,\r\n    Tab,\r\n    Icon, Tabs\r\n} from \"@material-ui/core\";\r\nimport { FileDropArea, PhotoGridView } from \"../../commons\";\r\nimport { theme } from \"../../../theme\";\r\nimport SwipeableViews from \"react-swipeable-views\";\r\nimport { CloudUploadOutlined, LocalDining } from \"@material-ui/icons\";\r\nimport { axios } from \"../../../Repositories/config\";\r\n\r\ninterface TabPanelProps {\r\n    children?: React.ReactNode;\r\n    index: any;\r\n    value: any;\r\n}\r\n\r\nfunction TabPanel(props: TabPanelProps) {\r\n    const { children, value, index } = props;\r\n\r\n    return (\r\n        <>\r\n            {value === index && (children)}\r\n        </>\r\n    );\r\n}\r\n\r\n/**\r\n * select media or upload Dialog.\r\n * @param props props\r\n */\r\nfunction MediaSelectionDialog(props: DialogContentProp<MediaSelectDialogProps | undefined, string[]>) {\r\n    const [selected, setSelected] = useState<string[]>([]);\r\n    const [selectedTab, setSelectedTab] = useState(0);\r\n    const [file, setFile] = useState<File | null>(null);\r\n\r\n    const { context } = props;\r\n\r\n    useEffect(() => {\r\n        services.mediaService.fetchAllFilesAsync().then(() => {\r\n        });\r\n    }, []);\r\n\r\n    return useObserver(() => {\r\n        return (\r\n            <Box position=\"relative\">\r\n                {/* tab  */}\r\n                <Box\r\n                    p={2}\r\n                    display=\"flex\"\r\n                    style={{ background: theme.palette.background.paper }}\r\n                    width=\"100%\"\r\n                    zIndex=\"999\"\r\n                    position=\"sticky\"\r\n                    top=\"0px\"\r\n                >\r\n                    <Tabs indicatorColor=\"primary\"\r\n                        variant=\"fullWidth\"\r\n                        value={selectedTab}\r\n                        style={{ width: \"100%\" }}\r\n                        onChange={(_, e) => setSelectedTab(e)}\r\n                        aria-label=\"setting\"\r\n                    >\r\n                        <Tab icon={<Icon>cloud_upload</Icon>} label=\"アップロード\" />\r\n                        <Tab icon={<Icon>view_module</Icon>} label=\"画像を選択\" />\r\n                    </Tabs>\r\n                </Box>\r\n\r\n                {/* Tab content */}\r\n                <SwipeableViews index={selectedTab}\r\n                    axis=\"x\"\r\n                    height=\"100%\"\r\n                    style={{ height: \"100%\" }}\r\n                    onChangeIndex={(_, e) => setSelectedTab(e)}\r\n                >\r\n                    <TabPanel\r\n                        value={selectedTab}\r\n                        index={0}\r\n                    >\r\n                        <Box\r\n                            p={2}\r\n                            position=\"relative\"\r\n                            flex={\"1 1 auto\"}\r\n                        >\r\n                            <FileDropArea onChange={e => setFile(e)} />\r\n                        </Box>\r\n                    </TabPanel>\r\n                    <TabPanel\r\n                        value={selectedTab}\r\n                        index={1}\r\n                    >\r\n                        <PhotoGridView\r\n                            selected={selected}\r\n                            multiSelect={context?.multiple}\r\n                            selectionChanged={selected => setSelected(selected)}\r\n                            images={services.mediaService.files}\r\n                            baseUrl={axios.defaults.baseURL}\r\n                            hideCheckbox\r\n                            disableInvok\r\n                        />\r\n                    </TabPanel>\r\n                </SwipeableViews>\r\n\r\n                {/* Commend bar */}\r\n                <Box\r\n                    p={1}\r\n                    display=\"flex\"\r\n                    style={{ background: theme.palette.background.paper }}\r\n                    width=\"100%\"\r\n                    position=\"sticky\"\r\n                    bottom=\"0px\"\r\n                >\r\n                    <Box flex=\"1 1 auto\" />\r\n                    <Button\r\n                        onClick={() => props.onClose([])}\r\n                        color=\"primary\"\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        style={{ marginLeft: \"4px\" }}\r\n                        disabled={(selectedTab === 1 && !selected.length) || (selectedTab === 0 && !file)}\r\n                        onClick={() => {\r\n                            if (selectedTab === 0 && file) {\r\n                                services.mediaService\r\n                                    .postAsync(file)\r\n                                    .then(path => props.onClose([`${path}`]));\r\n                            }\r\n                            else {\r\n                                props.onClose(selected);\r\n                            }\r\n                        }}\r\n                        color=\"primary\"\r\n                        variant=\"contained\"\r\n                    >\r\n                        Ok\r\n                    </Button>\r\n                </Box>\r\n            </Box >\r\n        );\r\n    });\r\n}\r\n\r\ninterface MediaSelectDialogProps {\r\n    multiple?: boolean;\r\n}\r\n\r\nexport async function showMediaSelectionDialog() {\r\n    const [path] = await showDialogAsync(MediaSelectionDialog, undefined, {\r\n        maxWidth: \"lg\"\r\n    });\r\n    return path;\r\n}\r\n\r\nexport async function showMultipleMediaSelectionDialogAsync() {\r\n    return await showDialogAsync(MediaSelectionDialog, { multiple: true }, {\r\n        maxWidth: \"lg\"\r\n    });\r\n}\r\n\r\nconst useStyles = makeStyles(\r\n    theme => ({\r\n        \"fileContainer\": {\r\n            position: \"relative\",\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            flexDirection: \"column\",\r\n            border: `4px dashed ${theme.palette.primary.main}`,\r\n            height: \"280px\",\r\n            width: \"100%\"\r\n        },\r\n        \"cloudIcon\": {\r\n            animationName: \"$cloudicon\",\r\n            animationTimingFunction: \"ease-in-out\",\r\n            animationDuration: \"0.8s\",\r\n            animationDirection: \"alternate\",\r\n            animationIterationCount: \"infinite\"\r\n        },\r\n        \"@keyframes cloudicon\": {\r\n            \"0%\": {\r\n                transform: \"translate(0, 0px)\"\r\n            },\r\n            \"100%\": {\r\n                transform: \"translate(0, -15px)\"\r\n            }\r\n        }\r\n    })\r\n);","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\FieldEditors\\SchemeEditor.tsx",["823","824","825"],"import React from \"react\";\r\n\r\nimport { SchemeEditorProps } from \"./SchemeEditorProps\";\r\n\r\nimport { SelectScheme } from \"./Editors/Select\";\r\nimport { Box, TextField, Typography } from \"@material-ui/core\";\r\nimport { Scheme } from \"../../../Models/Contents/Entities/Scheme\";\r\nimport { editors } from \"./Editors\";\r\n\r\nexport function SchemeEditor(props: SchemeEditorProps) {\r\n    const { scheme } = props;\r\n\r\n    const editor = editors[scheme.type];\r\n    const Element = editor.schemeEditor;\r\n\r\n    function handlePropertyChanged(key: keyof Scheme, value: unknown) {\r\n        props.onChange(\r\n            scheme.clone({\r\n                [key]: value\r\n            })\r\n        );\r\n    }\r\n\r\n    if (Element) {\r\n        return (\r\n            <>\r\n                <Box p={3}>\r\n                    <Typography color=\"primary\" >{editor.name}</Typography>\r\n                    <Typography variant=\"caption\" color=\"textSecondary\" >{editor.description}</Typography>\r\n                </Box>\r\n                <Box flex=\"1 1 auto\" p={2} overflow=\"auto\" height=\"60vh\" >\r\n                    <Box p={1}>\r\n                        <Typography noWrap>フィールド名</Typography>\r\n                        <Box mt={1} />\r\n                        <TextField\r\n                            placeholder=\"例：title\"\r\n                            fullWidth\r\n                            helperText=\"APIで取得する際のキー名になります（英数字のみ）\"\r\n                            value={scheme.name}\r\n                            onChange={e => handlePropertyChanged(\"name\", e.target.value)}\r\n                        />\r\n                    </Box>\r\n                    <Box p={1}>\r\n                        <Typography noWrap>表示名</Typography>\r\n                        <Box mt={1} />\r\n                        <TextField\r\n                            placeholder=\"例：タイトル\"\r\n                            helperText=\"入稿画面に表示する名称です。入稿者にとってわかりやすい説明を入力しましょう。\"\r\n                            fullWidth\r\n                            value={scheme.displayName}\r\n                            onChange={e => handlePropertyChanged(\"displayName\", e.target.value)}\r\n                        />\r\n                    </Box>\r\n                    <Box p={1}>\r\n                        <Element scheme={scheme} onChange={props.onChange}></Element>\r\n                    </Box>\r\n                    <Box p={1}>\r\n                        <Typography noWrap>備考</Typography>\r\n                        <Box mt={1} />\r\n                        <TextField\r\n                            fullWidth\r\n                            multiline\r\n                            rows=\"3\"\r\n                            placeholder=\"例：ブログのタイトルです。\"\r\n                            helperText=\"入稿画面に表示する説明文です。入稿者にとってわかりやすい説明を入力しましょう。\"\r\n                            value={scheme.description}\r\n                            variant=\"filled\"\r\n                            onChange={e => handlePropertyChanged(\"description\", e.target.value)}\r\n                        />\r\n                    </Box>\r\n                </Box>\r\n            </>\r\n        );\r\n    }\r\n\r\n    return <></>;\r\n}\r\n","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\commons\\Editor\\index.ts",[],"C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\Ecosystems\\PostTypeBasicSettingPanel.tsx",["826","827","828"],"C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\commons\\ColorPalette.tsx",["829","830"],"import classes from \"*.module.css\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport React, { useEffect } from \"react\";\r\n\r\ninterface ColorPaletteProps {\r\n    colors?: string[];\r\n    value?: string;\r\n    onChange?: (e: string) => void;\r\n    itemSize?: number;\r\n    itemSpace?: number;\r\n}\r\n\r\nconst defaultColors = [\r\n    \"#e91e63\",\r\n    \"#f44336\",\r\n    \"#ff5722\",\r\n    \"#ff9800\",\r\n    \"#ffc107\",\r\n    \"#ffeb3b\",\r\n    \"#cddc39\",\r\n    \"#4caf50\",\r\n    \"#009688\",\r\n    \"#00bcd4\",\r\n    \"#2196f3\",\r\n    \"#3f51b5\",\r\n    \"#9c27b0\",\r\n];\r\n\r\nconst DefaultItemSize = 50;\r\n\r\nexport function ColorPalette(props: ColorPaletteProps) {\r\n    const styles = useStyles();\r\n\r\n    const colors = props.colors ?? defaultColors;\r\n\r\n    useEffect(() => {\r\n        if (!props.value || (props.value && !colors.includes(props.value))) {\r\n            props.onChange && props.onChange(colors[0]);\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {\r\n                colors.map(\r\n                    c => <div\r\n                        className={styles.item}\r\n                        key={c}\r\n                        style={{ padding: props.itemSpace ?? 1 }}\r\n                    >\r\n                        <div\r\n                            style={{\r\n                                width: `${props.itemSize ?? DefaultItemSize}px`,\r\n                                height: `${props.itemSize ?? DefaultItemSize}px`,\r\n                                background: c,\r\n                                border: c === props.value ? \"4px solid rgb(40,40,40)\" : undefined\r\n                            }}\r\n                            onClick={_ => props.onChange && props.onChange(c)}\r\n                        >\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    container: {\r\n        display: \"flex\",\r\n        flexWrap: \"wrap\",\r\n    },\r\n    active: {\r\n    },\r\n    item: {\r\n        \"cursor\": \"pointer\",\r\n        \"&:hover\": {\r\n            filter: \"brightness(0.9 )\"\r\n        }\r\n    }\r\n});","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\commons\\FileDropArea.tsx",["831","832"],"\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { useObserver } from \"mobx-react\";\r\nimport {\r\n    Button,\r\n    Box,\r\n    makeStyles,\r\n    Typography,\r\n    CircularProgress,\r\n    useTheme\r\n} from \"@material-ui/core\";\r\nimport { CloudUploadOutlined } from \"@material-ui/icons\";\r\n\r\ninterface FileDropArea {\r\n    onChange?: (path: File) => void;\r\n    commited?: (file: File | null) => void;\r\n    showCommend?: boolean;\r\n}\r\n\r\nexport function FileDropArea(props: FileDropArea) {\r\n    const classes = useStyles();\r\n    const fileInput = useRef<HTMLInputElement | null>(null);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [file, setFile] = useState<File | null>(null);\r\n    const [isDragEntered, setIsDragEntered] = useState(false);\r\n    const [imgUrl, setImgUrl] = useState(\"\");\r\n    const theme = useTheme();\r\n\r\n    function setImage(file?: File) {\r\n        if (!file) {\r\n            return;\r\n        }\r\n        setFile(file);\r\n        props.onChange && props.onChange(file);\r\n        const reader = new FileReader();\r\n        reader.onload = (e: any) => {\r\n            setImgUrl(e.target.result);\r\n        };\r\n        reader.readAsDataURL(file);\r\n    }\r\n\r\n    function Loading() {\r\n        if (isLoading && imgUrl === \"\") {\r\n            return (\r\n                <Box\r\n                    display=\"flex\"\r\n                    justifyContent=\"center\"\r\n                    overflow=\"hidden\"\r\n                    position=\"absolute\"\r\n                    top=\"0px\"\r\n                    left=\"0px\"\r\n                    right=\"0px\"\r\n                    bottom=\"0px\"\r\n                    style={{\r\n                        background: theme.palette.background.paper\r\n                    }}>\r\n                    <CircularProgress style={{\r\n                        margin: \"auto\"\r\n                    }} size={120} />\r\n                </Box>\r\n            );\r\n        }\r\n        return <></>;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Box display=\"flex\" justifyContent=\"center\" flexDirection=\"column\">\r\n                {\r\n                    imgUrl === \"\" ?\r\n                        <div\r\n                            className={classes.fileContainer}\r\n                            onDragOver={e => {\r\n                                e.preventDefault();\r\n                                e.stopPropagation();\r\n                                setIsDragEntered(true);\r\n                            }}\r\n                            onDragLeave={e => {\r\n                                e.preventDefault();\r\n                                e.stopPropagation();\r\n                                setIsDragEntered(false);\r\n                            }}\r\n                            onDrop={e => {\r\n                                e.preventDefault();\r\n                                e.stopPropagation();\r\n                                setImage(e.dataTransfer.files[0]);\r\n                            }}\r\n                            style={{ borderStyle: isDragEntered ? \"solid\" : \"dashed\" }}\r\n                        >\r\n                            <CloudUploadOutlined\r\n                                color=\"primary\"\r\n                                fontSize=\"large\"\r\n                                className={isDragEntered ? classes.cloudIcon : \"\"}\r\n                            />\r\n                            <Box mt={2} mx={2} display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\r\n                                <Typography\r\n                                >アップロードするファイルをドロップ</Typography>\r\n                                <Typography\r\n                                    style={{ marginTop: \"8px\" }}\r\n                                    variant=\"caption\"\r\n                                >\r\n                                    または\r\n                                </Typography>\r\n                                <Button\r\n                                    style={{ marginTop: \"8px\" }}\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    onClick={() => {\r\n                                        setIsLoading(true);\r\n                                        fileInput?.current?.click();\r\n                                    }}\r\n                                >\r\n                                    <input\r\n                                        ref={fileInput}\r\n                                        type=\"file\"\r\n                                        style={{ display: \"none\" }}\r\n                                        onChange={e => setImage((e.target as any).files[0])}\r\n                                    />\r\n                                    画像を選択\r\n                                </Button>\r\n                            </Box>\r\n                        </div>\r\n                        :\r\n                        <img\r\n                            alt=\"preview\"\r\n                            height=\"280\"\r\n                            src={imgUrl}\r\n                            style={{ width: \"100%\", objectFit: \"cover\" }}\r\n                            onError={() => setIsLoading(false)}\r\n                            onLoad={() => setIsLoading(false)}\r\n                        >\r\n                        </img>\r\n                }\r\n\r\n                <Box mt={2} display=\"flex\">\r\n                    {\r\n                        file && <Button\r\n                            fullWidth={!props.showCommend}\r\n                            color=\"primary\"\r\n                            onClick={() => {\r\n                                setFile(null);\r\n                                setImgUrl(\"\");\r\n                            }}\r\n                        >\r\n                            Clear\r\n                        </Button>\r\n                    }\r\n                    {\r\n                        props.showCommend && <Box ml=\"auto\">\r\n                            <Button\r\n                                color=\"primary\"\r\n                                onClick={() => {\r\n                                    props.commited && props.commited(null);\r\n                                }}\r\n                            >\r\n                                Cancel\r\n                            </Button>\r\n                            <Button\r\n                                style={{ marginLeft: \"8px\" }}\r\n                                disabled={!file}\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={() => {\r\n                                    file && props.commited && props.commited(file);\r\n                                }}\r\n                            >\r\n                                OK\r\n                            </Button>\r\n                        </Box>\r\n                    }\r\n                </Box>\r\n            </Box>\r\n            <Loading />\r\n        </>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles(\r\n    theme => ({\r\n        \"fileContainer\": {\r\n            position: \"relative\",\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            flexDirection: \"column\",\r\n            border: `4px dashed ${theme.palette.primary.main}`,\r\n            height: \"280px\",\r\n            width: \"100%\"\r\n        },\r\n        \"cloudIcon\": {\r\n            animationName: \"$cloudicon\",\r\n            animationTimingFunction: \"ease-in-out\",\r\n            animationDuration: \"0.8s\",\r\n            animationDirection: \"alternate\",\r\n            animationIterationCount: \"infinite\"\r\n        },\r\n        \"@keyframes cloudicon\": {\r\n            \"0%\": {\r\n                transform: \"translate(0, 0px)\"\r\n            },\r\n            \"100%\": {\r\n                transform: \"translate(0, -15px)\"\r\n            }\r\n        }\r\n    })\r\n);","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\commons\\FlexSpacer.tsx",[],"C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\commons\\ItemsWrapGrid.tsx",["833","834","835","836","837","838"],"import React, { useEffect, useState, useRef, ReactComponentElement, cloneElement } from \"react\";\r\nimport {\r\n    makeStyles,\r\n    useTheme,\r\n    Box, Grow\r\n} from \"@material-ui/core\";\r\nimport { Flipper, Flipped } from \"react-flip-toolkit\";\r\n\r\ninterface ItemsWrapGridProps<T extends { id: string }> {\r\n    itemSlot: (item: T) => JSX.Element;\r\n    items: T[];\r\n    segmentLength?: number;\r\n    space?: number;\r\n}\r\n\r\n/**\r\n * Wrap items grid.\r\n */\r\nexport function ItemsWrapGrid<T extends { id: string }>(props: ItemsWrapGridProps<T>) {\r\n    const classes = useStyles();\r\n    const { itemSlot, items } = props;\r\n    const container = useRef<HTMLDivElement | null>(null);\r\n    const [itemWidth, setItemWidth] = useState(\"100%\");\r\n    const [intervalId, setIntervalId] = useState(0);\r\n\r\n    useEffect(() => {\r\n        updateWidth(itemWidth);\r\n        clearInterval(intervalId);\r\n        setIntervalId(\r\n            setInterval(() => {\r\n                updateWidth(itemWidth);\r\n            }, 200) as any\r\n        );\r\n    }, [itemWidth]);\r\n\r\n    const segmentLength = props.segmentLength ?? 220;\r\n    function updateWidth(itemWidth: string) {\r\n        const rect = container.current?.getBoundingClientRect();\r\n        if (rect) {\r\n            const width = rect.width;\r\n            const size = 100 / (Math.floor(width / (segmentLength)));\r\n            const sizeStr = `${size}%`;\r\n            if (itemWidth !== sizeStr) {\r\n                setItemWidth(`${size}%`);\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.container} ref={container}>\r\n            <Flipper\r\n                flipKey={`${items.length}_${itemWidth}`}\r\n                className={classes.container}\r\n            >\r\n                {items.map(\r\n                    (post, i) => (\r\n                        <Flipped\r\n                            stagger\r\n                            key={post.id}\r\n                            flipId={post.id}\r\n                            translate\r\n                        >\r\n                            <div style={{ width: itemWidth, padding: `${props.space ?? 12}px` }}>\r\n                                {itemSlot(post)}\r\n                            </div>\r\n                        </Flipped>\r\n                    )\r\n                )}\r\n            </Flipper>\r\n        </div >\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    container: {\r\n        width: \"100%\",\r\n        maxWidth: \"100%\",\r\n        display: \"flex\",\r\n        flexWrap: \"wrap\",\r\n        alignContent: \"start\"\r\n    },\r\n});","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\commons\\Editor\\RitchEditor.tsx",[],"C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\commons\\SearchBox.tsx",[],"C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\commons\\DateTimeText.tsx",["839","840"],"import React from \"react\";\r\nimport { Variant } from \"@material-ui/core/styles/createTypography\";\r\nimport { PropTypes, Typography } from \"@material-ui/core\";\r\n\r\ninterface DateTimeTextProps {\r\n    date?: Date;\r\n    showTime?: boolean;\r\n    align?: PropTypes.Alignment;\r\n    color?:\r\n    | \"initial\"\r\n    | \"inherit\"\r\n    | \"primary\"\r\n    | \"secondary\"\r\n    | \"textPrimary\"\r\n    | \"textSecondary\"\r\n    | \"error\";\r\n    display?: \"initial\" | \"block\" | \"inline\";\r\n    gutterBottom?: boolean;\r\n    noWrap?: boolean;\r\n    paragraph?: boolean;\r\n    variant?: Variant | \"inherit\";\r\n    variantMapping?: Partial<Record<Variant, string>>;\r\n    fontSize?: string;\r\n}\r\n\r\nexport function DateTimeText(props: DateTimeTextProps) {\r\n    const { date, showTime } = props;\r\n    return (\r\n        <Typography {...props} style={{ fontSize: props.fontSize }}>\r\n            { date?.getFullYear()}\r\n            < small > 年</small >\r\n            {(date?.getMonth() ?? 0) + 1}\r\n            <small>月</small>\r\n            { date?.getDate()}\r\n            <small>日</small>\r\n            {\r\n                showTime && (\r\n                    <>\r\n                        {date?.getHours()}\r\n                        < small >時</small>\r\n                        {date?.getMinutes()}\r\n                        <small>分</small>\r\n                    </>\r\n                )\r\n            }\r\n        </Typography >\r\n    );\r\n}","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\commons\\WrappedTextBlock.tsx",["841","842"],"import React from \"react\";\r\nimport { Typography, PropTypes } from \"@material-ui/core\";\r\nimport { Variant } from \"@material-ui/core/styles/createTypography\";\r\n\r\ninterface WrappedTextBlockProps {\r\n    row: number;\r\n    children?: React.ReactNode;\r\n    align?: PropTypes.Alignment;\r\n    color?:\r\n    | \"initial\"\r\n    | \"inherit\"\r\n    | \"primary\"\r\n    | \"secondary\"\r\n    | \"textPrimary\"\r\n    | \"textSecondary\"\r\n    | \"error\";\r\n    display?: \"initial\" | \"block\" | \"inline\";\r\n    gutterBottom?: boolean;\r\n    noWrap?: boolean;\r\n    paragraph?: boolean;\r\n    variant?: Variant | \"inherit\";\r\n    variantMapping?: Partial<Record<Variant, string>>;\r\n    fontSize?: string;\r\n}\r\n\r\nexport function WrappedTextBlock(props: WrappedTextBlockProps) {\r\n\r\n    return (\r\n        <Typography style={{\r\n            display: \"-webkit-box\",\r\n            WebkitBoxOrient: \"vertical\",\r\n            WebkitLineClamp: props.row,\r\n            overflow: \"hidden\",\r\n            wordBreak:\"break-all\",\r\n            fontSize: props.fontSize ?? undefined\r\n        }} {...props} >\r\n            {props.children}\r\n        </Typography>\r\n    );\r\n}","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\commons\\PhotoGridView\\index.ts",[],"C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\commons\\PhotoGridView\\PhotoGridView.tsx",["843","844","845","846","847","848","849"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport { Paper, InputBase, Button, makeStyles, Checkbox, useTheme, ButtonBase } from \"@material-ui/core\";\r\n\r\ninterface PhotoGridViewProps {\r\n    images: string[];\r\n    itemHeight?: number;\r\n    selected?: string[];\r\n    multiSelect?: boolean;\r\n    span?: number;\r\n    hideCheckbox?: boolean;\r\n    disableInvok?: boolean;\r\n    disableSelection?: boolean;\r\n    baseUrl?: string;\r\n    selectionChanged?: (selected: string[]) => void;\r\n    invoked?: (path: string) => void;\r\n    slot?: (image: JSX.Element, item: string) => JSX.Element;\r\n}\r\n\r\nexport function PhotoGridView(props: PhotoGridViewProps) {\r\n    const { images, itemHeight, selected } = props;\r\n    const classes = useStyle();\r\n    const [selectedhash, setSelectedHash] = useState<{ [key: string]: boolean }>({});\r\n    const theme = useTheme();\r\n\r\n    useEffect(() => {\r\n        setSelectedHash(\r\n            selected?.reduce(\r\n                (x, y) => ({\r\n                    ...x,\r\n                    [y]: true\r\n                }),\r\n                {} as { [key: string]: boolean }\r\n            ) ?? {}\r\n        );\r\n    }, [selected]);\r\n\r\n    function addToSelected(item: string) {\r\n        if (!props.multiSelect) {\r\n            props.selectionChanged && props.selectionChanged([item]);\r\n        }\r\n        else {\r\n            props.selectionChanged && props.selectionChanged([...(selected ?? []), item]);\r\n        }\r\n    }\r\n\r\n    function removeFromSelected(item: string) {\r\n        props.selectionChanged && props.selectionChanged([...selected?.filter(e => e !== item) ?? []]);\r\n    }\r\n\r\n    function PhotoItem(p: { path: string }) {\r\n        const { path } = p;\r\n        const [isPointerEntered, setIsPointerEntered] = useState(false);\r\n\r\n        return (\r\n            <div\r\n                className={classes.item}\r\n                style={{\r\n                    height: \"100%\",\r\n                }}\r\n                onPointerEnter={() => setIsPointerEntered(true)}\r\n                onPointerLeave={() => setIsPointerEntered(false)}\r\n            >\r\n                <img\r\n                    alt={path}\r\n                    height={itemHeight ?? 160}\r\n                    className={classes.img}\r\n                    src={props.baseUrl + path}\r\n                    style={{\r\n                        top: \"50%\",\r\n                        left: \"50%\",\r\n                        objectFit: \"cover\",\r\n                        transform: isPointerEntered ? \"scale(1.1)\" : \"\"\r\n                    }}\r\n                />\r\n                <div className={classes.button}\r\n                    style={{\r\n                        outlineWidth: selectedhash[path] ? \"4px\" : \"0px\",\r\n                        outlineColor: `${theme.palette.primary.main}`,\r\n                        opacity: selected?.length ? \"1\" : undefined,\r\n                        background: selected?.length && !selectedhash[path] ? \"rgba(0, 0, 0, 0.26)\" : undefined,\r\n                    }}\r\n                    onClick={e => {\r\n                        if (!selected?.length && !props.disableInvok || props.disableSelection) {\r\n                            props.invoked && props.invoked(p.path);\r\n                        }\r\n                        else {\r\n                            selectedhash[path] ? removeFromSelected(path) : addToSelected(path);\r\n                        }\r\n                    }}\r\n                >\r\n                    {\r\n                        !props.hideCheckbox && !props.disableSelection && <Checkbox\r\n                            color=\"primary\"\r\n                            className={classes.checkbox}\r\n                            checked={!!selectedhash[path]}\r\n                            onClick={e => e.stopPropagation()}\r\n                            onChange={e => {\r\n                                if (selectedhash[path]) {\r\n                                    removeFromSelected(path);\r\n                                }\r\n                                else {\r\n                                    addToSelected(path);\r\n                                }\r\n                            }}\r\n                        />\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className={classes.container} style={{ padding: `${props.span ?? 2}px` }}>\r\n            {\r\n                images.map(path => (\r\n                    <div\r\n                        key={path}\r\n                        className={classes.photo}\r\n                        style={{\r\n                            height: itemHeight ? `${itemHeight}px` : \"120px\",\r\n                            padding: `${props.span ?? 2}px`,\r\n                        }}\r\n                    >\r\n                        {\r\n                            props.slot\r\n                                ?\r\n                                props.slot(<PhotoItem path={path} />, path)\r\n                                :\r\n                                <PhotoItem path={path} />\r\n                        }\r\n                    </div>\r\n                ))\r\n            }\r\n            {/* spacer */}\r\n            <div style={{ flexGrow: 999999999 }} />\r\n        </div>\r\n    );\r\n}\r\n\r\nconst useStyle = makeStyles(theme => ({\r\n    checkbox: {\r\n        position: \"absolute\",\r\n        top: \"0px\",\r\n        right: \"0px\"\r\n    },\r\n    container: {\r\n        display: \"flex\",\r\n        flexWrap: \"wrap\"\r\n    },\r\n    item: {\r\n        position: \"relative\",\r\n        overflow: \"hidden\",\r\n    },\r\n    photo: {\r\n        display: \"block\",\r\n        flexGrow: 1\r\n    },\r\n    button: {\r\n        \"overflow\": \"hidden\",\r\n        \"transition\": \"all 0.25s\",\r\n        \"position\": \"absolute\",\r\n        \"top\": \"4px\",\r\n        \"right\": \"4px\",\r\n        \"bottom\": \"4px\",\r\n        \"left\": \"4px\",\r\n        \"opacity\": \"0\",\r\n        \"outlineStyle\": \"solid\",\r\n        \"&:hover\": {\r\n            opacity: \"1\",\r\n        },\r\n        \"cursor\": \"pointer\"\r\n    },\r\n    img: {\r\n        height: \"100%\",\r\n        WebkitUserSelect: \"none\",\r\n        transition: \"transform 0.4s\",\r\n        minWidth: \"100%\"\r\n    }\r\n}));","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Models\\posts\\entities\\PostStatusType.ts",[],"C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\Ecosystems\\confirmRemovePostTypeDialog.tsx",["850"],"import { showDialogAsync, DialogContentProp } from \"../../commons/showDialog\";\r\nimport React, { useState } from \"react\";\r\nimport {\r\n    Button,\r\n    Box,\r\n    Typography,\r\n    Checkbox,\r\n} from \"@material-ui/core\";\r\nimport { theme } from \"../../../theme\";\r\n\r\n/**\r\n * select media or upload Dialog.\r\n * @param props props\r\n */\r\nfunction ConfirmPostTypeDialog(props: DialogContentProp<ConfirmPostTypeDialogProps, boolean>) {\r\n    const [confirm, setConfirm] = useState(false);\r\n    return (\r\n        <Box p={2}>\r\n            <Box>\r\n                <Typography variant=\"h6\">{props.context.message}</Typography>\r\n            </Box>\r\n\r\n            <Box mt={1}>\r\n                <Typography variant=\"overline\" style={{ color: theme.palette.grey[500] }}>\r\n                    投稿タイプと紐づいている投稿がすべて削除されますがよろしいですか？\r\n                </Typography>\r\n            </Box>\r\n            <Box>\r\n                <Checkbox checked={confirm} onChange={e => setConfirm(e.target.checked)}></Checkbox>\r\n                確認しました\r\n            </Box>\r\n            <Box marginTop=\"24px\" display=\"flex\">\r\n                <Button\r\n                    variant=\"text\"\r\n                    color=\"primary\"\r\n                    style={{ marginLeft: \"auto\" }}\r\n                    onClick={() => props.onClose(false)}\r\n                >\r\n                    Cancel\r\n                </Button>\r\n                <Button\r\n                    disabled={!confirm}\r\n                    variant=\"contained\"\r\n                    style={{ marginLeft: \"12px\" }}\r\n                    onClick={() => props.onClose(true)}\r\n                    color=\"primary\" >\r\n                    Ok\r\n                </Button>\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n\r\ninterface ConfirmPostTypeDialogProps {\r\n    message: string;\r\n}\r\n\r\nexport async function confirmDeletePostTypeAsync(message: string) {\r\n    return await showDialogAsync(ConfirmPostTypeDialog, { message }, {\r\n        maxWidth: \"lg\"\r\n    });\r\n}\r\n","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\Ecosystems\\PostListPanel.tsx",["851","852","853","854","855","856"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    Avatar,\r\n    Box,\r\n    Checkbox,\r\n    Divider,\r\n    Icon,\r\n    IconButton,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Typography,\r\n    useTheme,\r\n} from \"@material-ui/core\";\r\nimport { services } from \"../../../Services\";\r\nimport { observer } from \"mobx-react\";\r\nimport { PostCard } from \"../Organisms\";\r\nimport { SearchBox, ItemsWrapGrid, DateTimeText } from \"../../commons\";\r\nimport { useHistory, useParams, useLocation } from \"react-router-dom\";\r\nimport { confirmAsync } from \"../../commons/confirmAsync\";\r\nimport { Post } from \"../../../Models/posts/entities/Post\";\r\nimport { Content } from \"../../../Models/Contents/Entities/Content\";\r\nimport { PostSearchPagingBar } from \"../Molecles/PostSearchPagingBar\";\r\nimport { Scheme } from \"../../../Models/Contents/Entities/Scheme\";\r\nimport { postStatusTypeDisplay } from \"../../../Models/posts/entities/PostStatusType\";\r\nimport { Field } from \"../../../Models/Contents/Entities/Field\";\r\nimport { axios } from \"../../../Repositories/config\";\r\n\r\ninterface PostListPanelProp {\r\n}\r\n\r\nexport default observer((props: PostListPanelProp) => {\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const query = new URLSearchParams(location.search);\r\n    useEffect(() => {\r\n        const page = Number(query.get(\"page\") ?? 1);\r\n        const postType = services.postManagementsService.selected;\r\n        services.postsService.setSearchOption({\r\n            ...services.postsService.searchOption,\r\n            offset: services.postsService.searchOption.fetch * (page - 1),\r\n            fetch: postType?.displayFormat === \"card\" ? 30 : 60\r\n        });\r\n        searchAsync();\r\n    }, [services.postManagementsService.selected]);\r\n\r\n    async function searchAsync() {\r\n        const selected = services.postManagementsService.selected;\r\n        if (selected) {\r\n            await services.postsService.searchPostsAsync(selected.taxonomy.name);\r\n        }\r\n    }\r\n\r\n    async function handleChangePage(e: { offset: number; fetch: number }) {\r\n        history.replace(`${location.pathname}?page=${(e.offset / e.fetch) + 1}`);\r\n    }\r\n\r\n    async function onDeletePresed(post: Content) {\r\n        if (await confirmAsync(\"削除しますか?\")) {\r\n            const selected = services.postManagementsService.selected;\r\n            await services.postsService.deleteFromId(\r\n                services.postManagementsService.selected?.taxonomy.name ?? \"\",\r\n                post.contentId\r\n            );\r\n\r\n            if (selected) {\r\n                services.postsService.searchPostsAsync(selected.taxonomy.name);\r\n            }\r\n        }\r\n    }\r\n\r\n    function onEditPressed(post: Content) {\r\n        const selected = services.postManagementsService.selected;\r\n        if (selected) {\r\n            history.push(`/posts/${selected.taxonomy.name}/${post.contentId}/edit`);\r\n        }\r\n    }\r\n\r\n    function onPreviewPressed(contentId: string) {\r\n        const selected = services.postManagementsService.selected;\r\n        if (selected) {\r\n            history.push(`/posts/${selected.taxonomy.name}/${contentId}`);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Box height=\"100%\" display=\"flex\" flexDirection=\"column\">\r\n            <Box >\r\n                <Box\r\n                    p={2}\r\n                    display=\"flex\"\r\n                    alignItems=\"center\"\r\n                    flexWrap=\"wrap\"\r\n                >\r\n                    <Typography>一覧</Typography>\r\n\r\n                    <Box flex=\"1 1 auto\" />\r\n                    <PostSearchPagingBar\r\n                        offset={services.postsService.searchOption.offset}\r\n                        count={services.postsService.hitCount}\r\n                        fetch={services.postsService.searchOption.fetch}\r\n                        onChange={e => handleChangePage(e)}\r\n                    />\r\n                    <SearchBox />\r\n                </Box>\r\n\r\n                <Box mx={2}>\r\n                    <Divider />\r\n                </Box>\r\n            </Box>\r\n\r\n            <Box display=\"flex\" flex=\"1 1 auto\" overflow=\"auto\" p={1}>\r\n                {\r\n                    services.postManagementsService.selected?.displayFormat === \"card\" &&\r\n                    <ItemsWrapGrid\r\n                        items={services.postsService.posts.map(item => ({ id: item.contentId, content: item }))}\r\n                        itemSlot={item => <PostCard\r\n                            previewPressed={() => onPreviewPressed(item.content.contentId)}\r\n                            deletePresed={() => onDeletePresed(item.content)}\r\n                            editPressed={() => onEditPressed(item.content)}\r\n                            content={item.content}\r\n                        />}\r\n                    />\r\n                }\r\n                {\r\n                    services.postManagementsService.selected?.displayFormat === \"table\" &&\r\n                    <PostSearchView\r\n                        previewPressed={c => onPreviewPressed(c.contentId)}\r\n                        deletePresed={c => onDeletePresed(c)}\r\n                        editPressed={c => onEditPressed(c)}\r\n                        contents={services.postsService.posts}\r\n                        schemes={services.postManagementsService.selected?.taxonomy.schemes ?? []}\r\n                    />\r\n                }\r\n            </Box>\r\n        </Box >\r\n    );\r\n});\r\n\r\ninterface PostSearchViewProps {\r\n    previewPressed: (c: Content) => void;\r\n    deletePresed: (c: Content) => void;\r\n    editPressed: (c: Content) => void;\r\n    contents: Content[];\r\n    schemes: Scheme[];\r\n}\r\n\r\nfunction PostSearchView(props: PostSearchViewProps) {\r\n    const theme = useTheme();\r\n\r\n    return (\r\n        <TableContainer>\r\n            <Table stickyHeader aria-label=\"sticky table\">\r\n                <TableHead >\r\n                    <TableRow>\r\n                        <TableCell>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            タイトル\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            作成者\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            サムネイル\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            メタデータ\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            備考\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            公開日時\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            ステータス\r\n                        </TableCell>\r\n                        <TableCell style={{ textAlign: \"center\" }}>\r\n                            備考\r\n                        </TableCell>\r\n                        <TableCell style={{ textAlign: \"center\" }}>\r\n                            詳細\r\n                        </TableCell>\r\n                        {\r\n                            props.schemes.map(s => <TableCell key={s.schemeId} style={{ textAlign: \"center\" }}>\r\n                                {s.displayName}\r\n                            </TableCell>)\r\n                        }\r\n                        <TableCell style={{ textAlign: \"center\" }}>\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {props.contents.map(c => (\r\n                        <TableRow key={c.contentId}>\r\n                            <TableCell padding=\"checkbox\">\r\n                                <Checkbox\r\n                                    color=\"primary\"\r\n                                // indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                                // checked={rowCount > 0 && numSelected === rowCount}\r\n                                // onChange={onSelectAllClick}\r\n                                // inputProps={{ 'aria-label': 'select all desserts' }}\r\n                                />\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {c.title}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                <Box display=\"flex\">\r\n                                    <Avatar\r\n                                        src={axios.defaults.baseURL + services.authService.loginInfo.avatar}\r\n                                        style={{\r\n                                            width: \"32px\",\r\n                                            height: \"32px\",\r\n                                            background: theme.palette.primary.main\r\n                                        }} >\r\n                                        {c.createdBy.name[0]}\r\n                                    </Avatar>\r\n                                    <Typography\r\n                                        variant=\"h6\"\r\n                                        noWrap\r\n                                    >\r\n                                        {c.createdBy.name}\r\n                                    </Typography>\r\n                                </Box>\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                <img\r\n                                    alt={c.title}\r\n                                    src={c.thumbnail}\r\n                                    height=\"38px\" style={{\r\n                                        objectFit: \"cover\",\r\n                                        background: \"rgba(127, 127, 127, 0.1\"\r\n                                    }}\r\n                                />\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {c.metadata}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {c.description}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                <DateTimeText\r\n                                    showTime\r\n                                    color=\"textSecondary\"\r\n                                    fontSize=\"12px\"\r\n                                    date={(c.publishIn ?? c.createdAt).toJSDate()}\r\n                                />\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                <Typography variant=\"caption\">\r\n                                    {postStatusTypeDisplay[c.status]}\r\n                                </Typography>\r\n                            </TableCell>\r\n                            {\r\n                                c.fields.map(f => <TableCell key={f.fieldId} style={{ textAlign: \"center\" }}>\r\n                                    {f.value}\r\n                                </TableCell>)\r\n                            }\r\n                            <TableCell>\r\n                                <Box display=\"flex\">\r\n                                    <IconButton><Icon>preview</Icon></IconButton>\r\n                                    <IconButton><Icon>edit</Icon></IconButton>\r\n                                    <IconButton><Icon>delete</Icon></IconButton>\r\n                                </Box>\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\Ecosystems\\PostPreviewPanel.tsx",["857","858","859","860","861","862","863","864","865","866","867","868","869","870","871"],"C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\Ecosystems\\PostTypeSettingDisplayPanel.tsx",["872","873","874","875","876"],"C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\users\\ecosystems\\UserDetailsDialog.tsx",["877","878","879","880"],"import { showDialogAsync, DialogContentProp } from \"../../commons/showDialog\";\r\nimport React, { useState } from \"react\";\r\nimport { useObserver } from \"mobx-react\";\r\nimport { services } from \"../../../Services\";\r\nimport {\r\n    Button,\r\n    Box,\r\n    makeStyles,\r\n    Typography,\r\n    TextField,\r\n    Select,\r\n    MenuItem,\r\n    Switch,\r\n    ListItemText,\r\n    Checkbox,\r\n    Chip\r\n} from \"@material-ui/core\";\r\nimport { IUser } from \"../../../Models/users/user.interface\";\r\nimport { displayRoles, RoleType } from \"../../../Models/auth/role\";\r\nimport { WebSite } from \"../../../Models/sites/web-site\";\r\n\r\ntype DialogUser = IUser & { password?: string; };\r\n\r\nfunction UserDetailDialog(props: DialogContentProp<DialogUser, DialogUser | undefined>) {\r\n    const classes = useStyles();\r\n    const [user, setUser] = useState(props.context);\r\n    const [canClose, setCanClose] = useState(false);\r\n    const [nameErrorMessage, setNameErrorMessage] = useState<string | null>(null);\r\n    const [emailErrorMessage, setEmailErrorMessage] = useState<string | null>(null);\r\n    const [passwordErrorMessage, setPasswordErrorMessage] = useState<string | null>(null);\r\n    const [confirmErrorMessage, setConfirmErrorMessage] = useState<string | null>(null);\r\n    const [confirmPassword, setConfirmPassword] = useState<string | null>(null);\r\n\r\n    function confirm() {\r\n        // edit mode doesn't need password.\r\n        if (props.context.password === undefined) {\r\n            return true;\r\n        }\r\n\r\n        if (confirmPassword !== user.password) {\r\n            setConfirmErrorMessage(\"一致しません\");\r\n            setCanClose(false);\r\n            return false;\r\n        }\r\n\r\n        setConfirmErrorMessage(null);\r\n        setCanClose(true);\r\n        return true;\r\n    }\r\n\r\n    function setConfirmPasswordParam(value: string) {\r\n        setConfirmPassword(value);\r\n        if (user.name && user.email && value === user.password) {\r\n            setConfirmErrorMessage(null);\r\n            setCanClose(true);\r\n        }\r\n        else if (value === user.password) {\r\n            setConfirmErrorMessage(null);\r\n            setCanClose(false);\r\n        }\r\n        else {\r\n            setConfirmErrorMessage(\"一致しません\");\r\n            setCanClose(false);\r\n        }\r\n    }\r\n\r\n    function setUserParam(key: keyof DialogUser, value: string) {\r\n        setUser({\r\n            ...user,\r\n            [key]: value\r\n        });\r\n\r\n        if (key === \"name\") {\r\n            if (!value.length) {\r\n                setNameErrorMessage(\"入力してください\");\r\n                setCanClose(false);\r\n            }\r\n            else if (user.email && confirm()) {\r\n                setNameErrorMessage(null);\r\n                setCanClose(true);\r\n            }\r\n            else {\r\n                setNameErrorMessage(null);\r\n            }\r\n        }\r\n        else if (key === \"email\") {\r\n            if (!value.length) {\r\n                setEmailErrorMessage(\"入力してください\");\r\n                setCanClose(false);\r\n            }\r\n            else if (/^[A-Za-z0-9]{1}[A-Za-z0-9_.-]*@{1}[A-Za-z0-9_.-]{1,}\\.[A-Za-z0-9]{1,}$/.test(value) === false) {\r\n                setEmailErrorMessage(\"無効なメールアドレスです\");\r\n                setCanClose(false);\r\n            }\r\n            else if (user.name && confirm()) {\r\n                setEmailErrorMessage(null);\r\n                setCanClose(true);\r\n            }\r\n            else {\r\n                setEmailErrorMessage(null);\r\n            }\r\n        }\r\n        else if (key === \"password\") {\r\n            if (/^[a-zA-Z0-9!-/:-@¥[-`{-~]*$/.test(value) === false) {\r\n                setPasswordErrorMessage(\"無効な文字が含まれています\");\r\n                setCanClose(false);\r\n            }\r\n            else if (user.name && user.email && value === confirmPassword) {\r\n                setConfirmErrorMessage(null);\r\n                setCanClose(true);\r\n            }\r\n            else if (value === confirmPassword) {\r\n                setConfirmErrorMessage(null);\r\n                setCanClose(false);\r\n            }\r\n            else {\r\n                setConfirmErrorMessage(\"一致しません\");\r\n                setCanClose(false);\r\n            }\r\n        }\r\n        else {\r\n            setCanClose(true);\r\n        }\r\n    }\r\n\r\n    return useObserver(() => {\r\n        const { webSiteManagementsService } = services;\r\n        return (\r\n            <Box\r\n                p={3}\r\n                display=\"flex\"\r\n                height=\"100%\"\r\n                flexDirection=\"column\"\r\n                justifyContent=\"space-between\">\r\n                <Typography variant=\"h5\">ユーザー編集</Typography>\r\n                <Box>\r\n                    <Typography style={{ marginTop: \"24px\" }}>\r\n                        名前\r\n                    </Typography>\r\n                    <TextField\r\n                        fullWidth\r\n                        placeholder=\"John Do\"\r\n                        value={user.name}\r\n                        style={{ borderBottomWidth: \"2px\" }}\r\n                        onChange={e => setUserParam(\"name\", e.target.value)}\r\n                        error={!!nameErrorMessage}\r\n                        helperText={!!nameErrorMessage ? nameErrorMessage : \"表示名\"}\r\n                    />\r\n\r\n                    <Typography style={{ marginTop: \"24px\" }}>E-Mail</Typography>\r\n                    <TextField\r\n                        fullWidth\r\n                        placeholder=\"hoge@example.com\"\r\n                        value={user.email}\r\n                        error={!!emailErrorMessage}\r\n                        helperText={!!emailErrorMessage ? emailErrorMessage : \"メールアドレス\"}\r\n                        onChange={e => setUserParam(\"email\", e.target.value)}\r\n                    />\r\n\r\n                    {\r\n                        props.context.password !== undefined && <>\r\n                            <Typography style={{ marginTop: \"24px\" }}>Password</Typography>\r\n                            <TextField\r\n                                fullWidth\r\n                                type=\"password\"\r\n                                value={user.password}\r\n                                error={!!passwordErrorMessage}\r\n                                helperText={!!passwordErrorMessage ? passwordErrorMessage : \"パスワード\"}\r\n                                onChange={e => setUserParam(\"password\", e.target.value)}\r\n                            />\r\n                            <TextField\r\n                                fullWidth\r\n                                type=\"password\"\r\n                                value={confirmPassword}\r\n                                error={!!confirmErrorMessage}\r\n                                helperText={!!confirmErrorMessage ? confirmErrorMessage : \"確認\"}\r\n                                onChange={e => setConfirmPasswordParam(e.target.value)}\r\n                            />\r\n                        </>\r\n                    }\r\n\r\n                    <Typography style={{ marginTop: \"24px\" }}>権限</Typography>\r\n                    <Select fullWidth value={user.role}\r\n                        onChange={e => {\r\n                            setUser({ ...user, ...{ role: Number(e.target.value) } });\r\n                            setCanClose(true);\r\n                        }}\r\n                    >\r\n                        {\r\n                            Object.keys(displayRoles).map((role, key) => <MenuItem value={role} key={key}>\r\n                                {displayRoles[role]}\r\n                            </MenuItem>)\r\n                        }\r\n                    </Select>\r\n\r\n                    <Typography style={{ marginTop: \"24px\" }}>有効性</Typography>\r\n                    <Switch\r\n                        checked={user.isActive} color=\"primary\"\r\n                        onChange={e => {\r\n                            setUser({ ...user, ...{ isActive: !user.isActive } });\r\n                            setCanClose(true);\r\n                        }} />\r\n                    {\r\n                        user.role !== RoleType.Admin &&\r\n                        <>\r\n                            <Typography style={{ marginTop: \"24px\" }}>許可するサイト</Typography>\r\n                            <Select fullWidth\r\n                                multiple\r\n                                value={user.identifiers}\r\n                                onChange={e => {\r\n                                    setUser({ ...user, ...{ identifiers: e.target.value as any } });\r\n                                    setCanClose(true);\r\n                                }}\r\n                                renderValue={(selected: any) => (\r\n                                    <div>\r\n                                        {selected.map(\r\n                                            (value: string, key: number) => (\r\n                                                <Chip color=\"primary\" style={{ marginLeft: \"4px\" }} key={key} label={value} />\r\n                                            )\r\n                                        )}\r\n                                    </div>\r\n                                )}\r\n                            >\r\n                                {\r\n                                    webSiteManagementsService.webSites.map(\r\n                                        (site, key) => (\r\n                                            <MenuItem key={key} value={site.webSiteId}>\r\n                                                <Checkbox color=\"primary\" checked={user.identifiers.includes(site.webSiteId)} ></Checkbox>\r\n                                                <ListItemText>{site.webSiteId} - {site.name}</ListItemText>\r\n                                            </MenuItem>\r\n                                        )\r\n                                    )\r\n                                }\r\n                            </Select>\r\n                        </>\r\n                    }\r\n                </Box>\r\n\r\n                <Box marginTop=\"24px\" marginBottom=\"12px\" display=\"flex\">\r\n                    <Button\r\n                        variant=\"text\"\r\n                        color=\"primary\"\r\n                        style={{ marginLeft: \"auto\" }}\r\n                        onClick={() => props.onClose(undefined)}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        disabled={!canClose}\r\n                        variant=\"contained\"\r\n                        style={{ marginLeft: \"12px\" }}\r\n                        onClick={() => props.onClose(user)}\r\n                        color=\"primary\" >\r\n                        Ok\r\n                    </Button>\r\n                </Box>\r\n            </Box >\r\n        );\r\n    });\r\n}\r\n\r\nexport async function showUserDetailsDialogAsync(user: IUser, isNew?: boolean) {\r\n    if (isNew) {\r\n        return await showDialogAsync(UserDetailDialog, { password: \"\", ...user });\r\n    }\r\n    return await showDialogAsync(UserDetailDialog, user);\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n\r\n    },\r\n});","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\Molecles\\PostSearchPagingBar.tsx",[],"C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\Organisms\\index.ts",[],"C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\Organisms\\PostCard.tsx",["881","882","883","884","885","886","887","888","889","890","891","892","893","894","895","896","897","898","899","900","901","902","903","904","905","906","907","908"],"C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\Molecles\\index.ts",[],"C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\posts\\Molecles\\PostCardMenu.tsx",["909","910","911"],"import React, { useEffect, useState, ReactComponentElement, cloneElement } from \"react\";\r\nimport {\r\n    IconButton, useTheme, Fab, Icon,\r\n} from \"@material-ui/core\";\r\nimport { Planet } from \"../../commons/Planet\";\r\n\r\ninterface PostCardMenuProps {\r\n    deletePresed: () => void;\r\n    editPressed: () => void;\r\n    previewPressed: () => void;\r\n    disableDeleteButton?: boolean;\r\n    disableEditButton?: boolean;\r\n}\r\n\r\nexport function PostCardMenu(props: PostCardMenuProps) {\r\n    const [isMenuOpened, setIsMenuOpened] = useState(false);\r\n    const theme = useTheme();\r\n    const { deletePresed, editPressed, previewPressed } = props;\r\n\r\n    return (\r\n        <Planet\r\n            color={theme.palette.secondary.light}\r\n            autoClose\r\n            angle={270}\r\n            rotation={-90}\r\n            orbitRadius={72}\r\n            radius={72 * 0.6666}\r\n            onClose={() => setIsMenuOpened(false)}\r\n            centerContent={\r\n                <Fab color=\"secondary\"\r\n                    size=\"small\"\r\n                    onClick={() => setIsMenuOpened(true)}\r\n                    style={{\r\n                        boxShadow: isMenuOpened ? \"none\" : undefined,\r\n                        filter: isMenuOpened ? \"Brightness(0.8)\" : undefined\r\n                    }}\r\n                >\r\n                    <Icon>toc</Icon>\r\n                </Fab>\r\n            }\r\n        >\r\n            {\r\n                !props.disableDeleteButton && <IconButton\r\n                    disabled={props.disableDeleteButton}\r\n                    color=\"inherit\"\r\n                    style={{ color: \"white\" }}\r\n                    size=\"small\"\r\n                    onClick={() => deletePresed()}\r\n                >\r\n                    <Icon>delete</Icon>\r\n                </IconButton >\r\n            }\r\n\r\n            <IconButton\r\n                color=\"inherit\"\r\n                style={{ color: \"white\" }}\r\n                size=\"small\"\r\n                onClick={() => previewPressed()}\r\n            >\r\n                <Icon>visibility</Icon>\r\n            </IconButton >\r\n\r\n            {\r\n                !props.disableEditButton && <IconButton\r\n                    disabled={props.disableEditButton}\r\n                    color=\"inherit\"\r\n                    style={{ color: \"white\" }}\r\n                    size=\"small\"\r\n                    onClick={() => editPressed()}\r\n                >\r\n                    <Icon>edit</Icon>\r\n                </IconButton >\r\n            }\r\n        </Planet>\r\n    );\r\n}","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\commons\\Planet\\index.ts",[],"C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\commons\\Planet\\Planet.tsx",["912"],"// prettier-ignore\r\nimport { ClickAwayListener, makeStyles } from \"@material-ui/core\";\r\nimport { CreateCSSProperties, CSSProperties } from \"@material-ui/styles\";\r\nimport * as React from \"react\";\r\nimport useResizeObserver from \"use-resize-observer\";\r\nimport { Orbit } from \"./Orbit\";\r\nimport { Satellite } from \"./Satellite\";\r\n\r\nconst DEFAULT_MASS = 1;\r\nconst DEFAULT_TENSTION = 500;\r\nconst DEFAULT_FRICTION = 17;\r\nconst DEFAULT_ROTATION = 0;\r\nconst DEFAULT_OBITRADIUS = 90;\r\nconst DEFAULT_RADIUS = 60;\r\n\r\ninterface Props {\r\n    centerContent?: React.ReactNode;\r\n    children?: React.ReactNode;\r\n    open?: boolean;\r\n    onClick?: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\r\n    mass?: number;\r\n    tension?: number;\r\n    friction?: number;\r\n    orbitStyle?: (\r\n        defaultStyle: CSSProperties | CreateCSSProperties<{}>\r\n    ) => CSSProperties | CreateCSSProperties<{}>;\r\n    orbitRadius?: number;\r\n    radius?: number;\r\n    rotation?: number;\r\n    color?: string;\r\n    angle?: number;\r\n    hideOrbit?: boolean;\r\n    autoClose?: boolean;\r\n    onClose?: (\r\n        e: React.MouseEvent<Document | HTMLDivElement, MouseEvent>\r\n    ) => void;\r\n    dragablePlanet?: boolean;\r\n    dragRadiusPlanet?: number;\r\n    elevation?: number;\r\n    dragableSatellites?: boolean;\r\n    dragRadiusSatellites?: number;\r\n    bounceRadius?: number;\r\n    bounce?: boolean;\r\n    bounceOnOpen?: boolean;\r\n    bounceOnClose?: boolean;\r\n    bounceDirection?: \"TOP\" | \"BOTTOM\" | \"LEFT\" | \"RIGHT\";\r\n    satelliteOrientation?: \"DEFAULT\" | \"INSIDE\" | \"OUTSIDE\" | \"READABLE\";\r\n}\r\n\r\nexport function Planet(props: Props) {\r\n    const {\r\n        centerContent,\r\n        children,\r\n        open,\r\n        onClick,\r\n        mass,\r\n        tension,\r\n        friction,\r\n        orbitRadius,\r\n        radius,\r\n        rotation,\r\n        orbitStyle,\r\n        hideOrbit,\r\n        onClose,\r\n        autoClose,\r\n        angle,\r\n        color,\r\n        dragableSatellites,\r\n        dragRadiusSatellites,\r\n        elevation,\r\n        satelliteOrientation,\r\n    } = props;\r\n    const classes = useStyles(props);\r\n    const { ref, height = 0, width = 0 } = useResizeObserver();\r\n    const [_open, setOpen] = React.useState(!!open);\r\n\r\n    React.useEffect(() => {\r\n        if (!!open !== _open) {\r\n            setOpen(!!open);\r\n        }\r\n    }, [open]);\r\n\r\n    var satellites: (() => React.ReactElement)[] = [];\r\n    var satelliteCount = React.Children.count(children);\r\n    React.Children.forEach(children, (c, i) => {\r\n        satellites[i] = () => (\r\n            <Satellite\r\n                angle={angle ?? 360}\r\n                key={i}\r\n                index={i}\r\n                open={_open}\r\n                satelliteCount={satelliteCount}\r\n                planetHeight={height}\r\n                planetWidth={width}\r\n                mass={mass ? mass : DEFAULT_MASS}\r\n                friction={friction ? friction : DEFAULT_FRICTION}\r\n                tension={tension ? tension : DEFAULT_TENSTION}\r\n                orbitRadius={radius ? radius : DEFAULT_RADIUS}\r\n                rotation={rotation ? rotation : DEFAULT_ROTATION}\r\n                dragable={!!dragableSatellites}\r\n                dragRadius={dragRadiusSatellites}\r\n                orientation={satelliteOrientation}\r\n            >\r\n                {c}\r\n            </Satellite>\r\n        );\r\n    });\r\n\r\n    const onPlanet = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        if (onClick) {\r\n            onClick(e);\r\n        }\r\n        else {\r\n            if (_open && autoClose) {\r\n                setOpen(false);\r\n                if (onClose) {\r\n                    onClose(e);\r\n                }\r\n            }\r\n            else {\r\n                setOpen(true);\r\n            }\r\n        }\r\n    };\r\n\r\n    const onClickAway = (e: React.MouseEvent<Document, MouseEvent>) => {\r\n        if (autoClose && _open) {\r\n            setOpen(false);\r\n        }\r\n\r\n        if (onClose && _open) {\r\n            onClose(e);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ClickAwayListener onClickAway={onClickAway}>\r\n            <div className={classes.root}>\r\n                {!hideOrbit && _open && (\r\n                    <Orbit\r\n                        elevation={elevation ?? 2}\r\n                        color={color ?? \"transpalent\"}\r\n                        open={_open}\r\n                        orbitStyle={orbitStyle}\r\n                        planetHeight={height}\r\n                        planetWidth={width}\r\n                        mass={mass ? mass : DEFAULT_MASS}\r\n                        friction={friction ? friction : DEFAULT_FRICTION}\r\n                        tension={tension ? tension : DEFAULT_TENSTION}\r\n                        orbitRadius={orbitRadius ? orbitRadius : DEFAULT_OBITRADIUS}\r\n                    />\r\n                )}\r\n                {\r\n                    _open && (\r\n                        <>{satellites.map(e => e())}</>\r\n                    )\r\n                }\r\n                <div className={classes.planetContent} onClick={onPlanet}>\r\n                    <div ref={ref as any}>{centerContent}</div>\r\n                </div>\r\n            </div>\r\n        </ClickAwayListener>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        position: \"relative\",\r\n    },\r\n\r\n    planetContent: {\r\n        position: \"absolute\",\r\n        zIndex: 1,\r\n    },\r\n});\r\n","C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\commons\\Planet\\Orbit.tsx",[],"C:\\Users\\Root\\Desktop\\Develop\\maccha\\maccha.manager\\src\\Components\\commons\\Planet\\Satellite.tsx",[],{"ruleId":"913","severity":1,"message":"914","line":7,"column":10,"nodeType":"915","messageId":"916","endLine":7,"endColumn":18},{"ruleId":"917","replacedBy":"918"},{"ruleId":"919","replacedBy":"920"},{"ruleId":"921","replacedBy":"922"},{"ruleId":"913","severity":1,"message":"923","line":1,"column":17,"nodeType":"915","messageId":"916","endLine":1,"endColumn":26},{"ruleId":"913","severity":1,"message":"924","line":1,"column":28,"nodeType":"915","messageId":"916","endLine":1,"endColumn":34},{"ruleId":"913","severity":1,"message":"925","line":5,"column":10,"nodeType":"915","messageId":"916","endLine":5,"endColumn":25},{"ruleId":"913","severity":1,"message":"926","line":8,"column":10,"nodeType":"915","messageId":"916","endLine":8,"endColumn":15},{"ruleId":"913","severity":1,"message":"927","line":8,"column":17,"nodeType":"915","messageId":"916","endLine":8,"endColumn":27},{"ruleId":"913","severity":1,"message":"928","line":9,"column":10,"nodeType":"915","messageId":"916","endLine":9,"endColumn":19},{"ruleId":"913","severity":1,"message":"929","line":11,"column":10,"nodeType":"915","messageId":"916","endLine":11,"endColumn":15},{"ruleId":"913","severity":1,"message":"930","line":1,"column":17,"nodeType":"915","messageId":"916","endLine":1,"endColumn":29},{"ruleId":"913","severity":1,"message":"931","line":2,"column":10,"nodeType":"915","messageId":"916","endLine":2,"endColumn":19},{"ruleId":"913","severity":1,"message":"932","line":3,"column":10,"nodeType":"915","messageId":"916","endLine":3,"endColumn":19},{"ruleId":"913","severity":1,"message":"933","line":4,"column":10,"nodeType":"915","messageId":"916","endLine":4,"endColumn":24},{"ruleId":"913","severity":1,"message":"934","line":1,"column":27,"nodeType":"915","messageId":"916","endLine":1,"endColumn":40},{"ruleId":"913","severity":1,"message":"928","line":10,"column":17,"nodeType":"915","messageId":"916","endLine":10,"endColumn":26},{"ruleId":"913","severity":1,"message":"935","line":11,"column":10,"nodeType":"915","messageId":"916","endLine":11,"endColumn":17},{"ruleId":"913","severity":1,"message":"927","line":12,"column":10,"nodeType":"915","messageId":"916","endLine":12,"endColumn":20},{"ruleId":"913","severity":1,"message":"926","line":12,"column":22,"nodeType":"915","messageId":"916","endLine":12,"endColumn":27},{"ruleId":"936","severity":1,"message":"937","line":30,"column":8,"nodeType":"938","endLine":30,"endColumn":41,"suggestions":"939"},{"ruleId":"913","severity":1,"message":"940","line":9,"column":10,"nodeType":"915","messageId":"916","endLine":9,"endColumn":24},{"ruleId":"913","severity":1,"message":"926","line":1,"column":20,"nodeType":"915","messageId":"916","endLine":1,"endColumn":25},{"ruleId":"913","severity":1,"message":"941","line":2,"column":10,"nodeType":"915","messageId":"916","endLine":2,"endColumn":15},{"ruleId":"913","severity":1,"message":"934","line":1,"column":10,"nodeType":"915","messageId":"916","endLine":1,"endColumn":23},{"ruleId":"913","severity":1,"message":"942","line":1,"column":25,"nodeType":"915","messageId":"916","endLine":1,"endColumn":35},{"ruleId":"913","severity":1,"message":"943","line":2,"column":16,"nodeType":"915","messageId":"916","endLine":2,"endColumn":20},{"ruleId":"913","severity":1,"message":"944","line":2,"column":22,"nodeType":"915","messageId":"916","endLine":2,"endColumn":28},{"ruleId":"913","severity":1,"message":"934","line":1,"column":27,"nodeType":"915","messageId":"916","endLine":1,"endColumn":40},{"ruleId":"913","severity":1,"message":"945","line":4,"column":5,"nodeType":"915","messageId":"916","endLine":4,"endColumn":18},{"ruleId":"913","severity":1,"message":"946","line":5,"column":5,"nodeType":"915","messageId":"916","endLine":5,"endColumn":15},{"ruleId":"913","severity":1,"message":"947","line":7,"column":5,"nodeType":"915","messageId":"916","endLine":7,"endColumn":15},{"ruleId":"913","severity":1,"message":"948","line":8,"column":5,"nodeType":"915","messageId":"916","endLine":8,"endColumn":9},{"ruleId":"913","severity":1,"message":"949","line":9,"column":5,"nodeType":"915","messageId":"916","endLine":9,"endColumn":11},{"ruleId":"913","severity":1,"message":"950","line":11,"column":5,"nodeType":"915","messageId":"916","endLine":11,"endColumn":13},{"ruleId":"913","severity":1,"message":"951","line":12,"column":5,"nodeType":"915","messageId":"916","endLine":12,"endColumn":17},{"ruleId":"913","severity":1,"message":"952","line":14,"column":8,"nodeType":"915","messageId":"916","endLine":14,"endColumn":20},{"ruleId":"913","severity":1,"message":"953","line":21,"column":13,"nodeType":"915","messageId":"916","endLine":21,"endColumn":24},{"ruleId":"913","severity":1,"message":"954","line":21,"column":26,"nodeType":"915","messageId":"916","endLine":21,"endColumn":51},{"ruleId":"913","severity":1,"message":"929","line":3,"column":32,"nodeType":"915","messageId":"916","endLine":3,"endColumn":37},{"ruleId":"913","severity":1,"message":"955","line":7,"column":10,"nodeType":"915","messageId":"916","endLine":7,"endColumn":30},{"ruleId":"913","severity":1,"message":"956","line":8,"column":19,"nodeType":"915","messageId":"916","endLine":8,"endColumn":28},{"ruleId":"913","severity":1,"message":"927","line":8,"column":30,"nodeType":"915","messageId":"916","endLine":8,"endColumn":40},{"ruleId":"913","severity":1,"message":"957","line":24,"column":10,"nodeType":"915","messageId":"916","endLine":24,"endColumn":19},{"ruleId":"913","severity":1,"message":"958","line":1,"column":10,"nodeType":"915","messageId":"916","endLine":1,"endColumn":20},{"ruleId":"913","severity":1,"message":"959","line":1,"column":22,"nodeType":"915","messageId":"916","endLine":1,"endColumn":30},{"ruleId":"913","severity":1,"message":"960","line":1,"column":32,"nodeType":"915","messageId":"916","endLine":1,"endColumn":38},{"ruleId":"913","severity":1,"message":"961","line":2,"column":10,"nodeType":"915","messageId":"916","endLine":2,"endColumn":24},{"ruleId":"913","severity":1,"message":"931","line":3,"column":10,"nodeType":"915","messageId":"916","endLine":3,"endColumn":19},{"ruleId":"913","severity":1,"message":"962","line":5,"column":10,"nodeType":"915","messageId":"916","endLine":5,"endColumn":14},{"ruleId":"913","severity":1,"message":"963","line":6,"column":10,"nodeType":"915","messageId":"916","endLine":6,"endColumn":15},{"ruleId":"913","severity":1,"message":"964","line":7,"column":10,"nodeType":"915","messageId":"916","endLine":7,"endColumn":27},{"ruleId":"913","severity":1,"message":"958","line":1,"column":10,"nodeType":"915","messageId":"916","endLine":1,"endColumn":20},{"ruleId":"913","severity":1,"message":"959","line":1,"column":22,"nodeType":"915","messageId":"916","endLine":1,"endColumn":30},{"ruleId":"913","severity":1,"message":"960","line":1,"column":32,"nodeType":"915","messageId":"916","endLine":1,"endColumn":38},{"ruleId":"913","severity":1,"message":"965","line":3,"column":10,"nodeType":"915","messageId":"916","endLine":3,"endColumn":17},{"ruleId":"913","severity":1,"message":"966","line":4,"column":10,"nodeType":"915","messageId":"916","endLine":4,"endColumn":30},{"ruleId":"913","severity":1,"message":"967","line":5,"column":10,"nodeType":"915","messageId":"916","endLine":5,"endColumn":30},{"ruleId":"913","severity":1,"message":"958","line":1,"column":10,"nodeType":"915","messageId":"916","endLine":1,"endColumn":20},{"ruleId":"913","severity":1,"message":"959","line":1,"column":22,"nodeType":"915","messageId":"916","endLine":1,"endColumn":30},{"ruleId":"913","severity":1,"message":"960","line":1,"column":32,"nodeType":"915","messageId":"916","endLine":1,"endColumn":38},{"ruleId":"913","severity":1,"message":"968","line":2,"column":10,"nodeType":"915","messageId":"916","endLine":2,"endColumn":25},{"ruleId":"913","severity":1,"message":"969","line":3,"column":10,"nodeType":"915","messageId":"916","endLine":3,"endColumn":14},{"ruleId":"913","severity":1,"message":"970","line":5,"column":10,"nodeType":"915","messageId":"916","endLine":5,"endColumn":18},{"ruleId":"913","severity":1,"message":"971","line":6,"column":10,"nodeType":"915","messageId":"916","endLine":6,"endColumn":31},{"ruleId":"913","severity":1,"message":"972","line":7,"column":10,"nodeType":"915","messageId":"916","endLine":7,"endColumn":29},{"ruleId":"913","severity":1,"message":"959","line":1,"column":22,"nodeType":"915","messageId":"916","endLine":1,"endColumn":30},{"ruleId":"913","severity":1,"message":"914","line":4,"column":10,"nodeType":"915","messageId":"916","endLine":4,"endColumn":18},{"ruleId":"913","severity":1,"message":"958","line":1,"column":10,"nodeType":"915","messageId":"916","endLine":1,"endColumn":20},{"ruleId":"913","severity":1,"message":"959","line":1,"column":22,"nodeType":"915","messageId":"916","endLine":1,"endColumn":30},{"ruleId":"913","severity":1,"message":"960","line":1,"column":32,"nodeType":"915","messageId":"916","endLine":1,"endColumn":38},{"ruleId":"913","severity":1,"message":"969","line":3,"column":10,"nodeType":"915","messageId":"916","endLine":3,"endColumn":14},{"ruleId":"913","severity":1,"message":"970","line":4,"column":10,"nodeType":"915","messageId":"916","endLine":4,"endColumn":18},{"ruleId":"913","severity":1,"message":"973","line":5,"column":10,"nodeType":"915","messageId":"916","endLine":5,"endColumn":17},{"ruleId":"913","severity":1,"message":"974","line":6,"column":10,"nodeType":"915","messageId":"916","endLine":6,"endColumn":30},{"ruleId":"913","severity":1,"message":"958","line":1,"column":10,"nodeType":"915","messageId":"916","endLine":1,"endColumn":20},{"ruleId":"913","severity":1,"message":"959","line":1,"column":22,"nodeType":"915","messageId":"916","endLine":1,"endColumn":30},{"ruleId":"913","severity":1,"message":"960","line":1,"column":32,"nodeType":"915","messageId":"916","endLine":1,"endColumn":38},{"ruleId":"913","severity":1,"message":"958","line":1,"column":10,"nodeType":"915","messageId":"916","endLine":1,"endColumn":20},{"ruleId":"913","severity":1,"message":"959","line":1,"column":22,"nodeType":"915","messageId":"916","endLine":1,"endColumn":30},{"ruleId":"913","severity":1,"message":"960","line":1,"column":32,"nodeType":"915","messageId":"916","endLine":1,"endColumn":38},{"ruleId":"913","severity":1,"message":"969","line":3,"column":10,"nodeType":"915","messageId":"916","endLine":3,"endColumn":14},{"ruleId":"913","severity":1,"message":"970","line":4,"column":10,"nodeType":"915","messageId":"916","endLine":4,"endColumn":18},{"ruleId":"913","severity":1,"message":"975","line":6,"column":10,"nodeType":"915","messageId":"916","endLine":6,"endColumn":18},{"ruleId":"913","severity":1,"message":"958","line":1,"column":10,"nodeType":"915","messageId":"916","endLine":1,"endColumn":20},{"ruleId":"913","severity":1,"message":"959","line":1,"column":22,"nodeType":"915","messageId":"916","endLine":1,"endColumn":30},{"ruleId":"913","severity":1,"message":"960","line":1,"column":32,"nodeType":"915","messageId":"916","endLine":1,"endColumn":38},{"ruleId":"913","severity":1,"message":"961","line":2,"column":10,"nodeType":"915","messageId":"916","endLine":2,"endColumn":24},{"ruleId":"913","severity":1,"message":"931","line":3,"column":10,"nodeType":"915","messageId":"916","endLine":3,"endColumn":19},{"ruleId":"913","severity":1,"message":"926","line":6,"column":10,"nodeType":"915","messageId":"916","endLine":6,"endColumn":15},{"ruleId":"913","severity":1,"message":"976","line":4,"column":97,"nodeType":"915","messageId":"916","endLine":4,"endColumn":108},{"ruleId":"913","severity":1,"message":"977","line":8,"column":10,"nodeType":"915","messageId":"916","endLine":8,"endColumn":21},{"ruleId":"913","severity":1,"message":"978","line":13,"column":11,"nodeType":"915","messageId":"916","endLine":13,"endColumn":18},{"ruleId":"913","severity":1,"message":"979","line":1,"column":28,"nodeType":"915","messageId":"916","endLine":1,"endColumn":36},{"ruleId":"913","severity":1,"message":"980","line":1,"column":38,"nodeType":"915","messageId":"916","endLine":1,"endColumn":59},{"ruleId":"913","severity":1,"message":"981","line":1,"column":61,"nodeType":"915","messageId":"916","endLine":1,"endColumn":73},{"ruleId":"913","severity":1,"message":"982","line":2,"column":10,"nodeType":"915","messageId":"916","endLine":2,"endColumn":16},{"ruleId":"913","severity":1,"message":"983","line":2,"column":18,"nodeType":"915","messageId":"916","endLine":2,"endColumn":40},{"ruleId":"913","severity":1,"message":"984","line":10,"column":5,"nodeType":"915","messageId":"916","endLine":10,"endColumn":8},{"ruleId":"913","severity":1,"message":"985","line":11,"column":5,"nodeType":"915","messageId":"916","endLine":11,"endColumn":10},{"ruleId":"913","severity":1,"message":"986","line":12,"column":5,"nodeType":"915","messageId":"916","endLine":12,"endColumn":13},{"ruleId":"913","severity":1,"message":"987","line":13,"column":5,"nodeType":"915","messageId":"916","endLine":13,"endColumn":9},{"ruleId":"913","severity":1,"message":"988","line":16,"column":37,"nodeType":"915","messageId":"916","endLine":16,"endColumn":52},{"ruleId":"913","severity":1,"message":"952","line":23,"column":8,"nodeType":"915","messageId":"916","endLine":23,"endColumn":20},{"ruleId":"913","severity":1,"message":"963","line":25,"column":10,"nodeType":"915","messageId":"916","endLine":25,"endColumn":15},{"ruleId":"913","severity":1,"message":"989","line":32,"column":12,"nodeType":"915","messageId":"916","endLine":32,"endColumn":20},{"ruleId":"913","severity":1,"message":"990","line":32,"column":22,"nodeType":"915","messageId":"916","endLine":32,"endColumn":33},{"ruleId":"913","severity":1,"message":"991","line":33,"column":12,"nodeType":"915","messageId":"916","endLine":33,"endColumn":16},{"ruleId":"913","severity":1,"message":"992","line":33,"column":18,"nodeType":"915","messageId":"916","endLine":33,"endColumn":25},{"ruleId":"913","severity":1,"message":"993","line":34,"column":12,"nodeType":"915","messageId":"916","endLine":34,"endColumn":17},{"ruleId":"913","severity":1,"message":"994","line":34,"column":19,"nodeType":"915","messageId":"916","endLine":34,"endColumn":27},{"ruleId":"913","severity":1,"message":"995","line":35,"column":12,"nodeType":"915","messageId":"916","endLine":35,"endColumn":23},{"ruleId":"913","severity":1,"message":"996","line":35,"column":25,"nodeType":"915","messageId":"916","endLine":35,"endColumn":39},{"ruleId":"913","severity":1,"message":"988","line":10,"column":37,"nodeType":"915","messageId":"916","endLine":10,"endColumn":52},{"ruleId":"913","severity":1,"message":"985","line":11,"column":30,"nodeType":"915","messageId":"916","endLine":11,"endColumn":35},{"ruleId":"913","severity":1,"message":"987","line":11,"column":37,"nodeType":"915","messageId":"916","endLine":11,"endColumn":41},{"ruleId":"913","severity":1,"message":"986","line":11,"column":43,"nodeType":"915","messageId":"916","endLine":11,"endColumn":51},{"ruleId":"913","severity":1,"message":"984","line":11,"column":73,"nodeType":"915","messageId":"916","endLine":11,"endColumn":76},{"ruleId":"913","severity":1,"message":"989","line":25,"column":12,"nodeType":"915","messageId":"916","endLine":25,"endColumn":20},{"ruleId":"913","severity":1,"message":"990","line":25,"column":22,"nodeType":"915","messageId":"916","endLine":25,"endColumn":33},{"ruleId":"913","severity":1,"message":"991","line":26,"column":12,"nodeType":"915","messageId":"916","endLine":26,"endColumn":16},{"ruleId":"913","severity":1,"message":"992","line":26,"column":18,"nodeType":"915","messageId":"916","endLine":26,"endColumn":25},{"ruleId":"913","severity":1,"message":"993","line":27,"column":12,"nodeType":"915","messageId":"916","endLine":27,"endColumn":17},{"ruleId":"913","severity":1,"message":"994","line":27,"column":19,"nodeType":"915","messageId":"916","endLine":27,"endColumn":27},{"ruleId":"913","severity":1,"message":"995","line":28,"column":12,"nodeType":"915","messageId":"916","endLine":28,"endColumn":23},{"ruleId":"913","severity":1,"message":"996","line":28,"column":25,"nodeType":"915","messageId":"916","endLine":28,"endColumn":39},{"ruleId":"997","severity":1,"message":"998","line":138,"column":49,"nodeType":"999","endLine":138,"endColumn":64},{"ruleId":"1000","severity":1,"message":"1001","line":9,"column":9,"nodeType":"1002","endLine":9,"endColumn":81},{"ruleId":"913","severity":1,"message":"979","line":1,"column":28,"nodeType":"915","messageId":"916","endLine":1,"endColumn":36},{"ruleId":"913","severity":1,"message":"980","line":1,"column":38,"nodeType":"915","messageId":"916","endLine":1,"endColumn":59},{"ruleId":"913","severity":1,"message":"981","line":1,"column":61,"nodeType":"915","messageId":"916","endLine":1,"endColumn":73},{"ruleId":"913","severity":1,"message":"1003","line":3,"column":5,"nodeType":"915","messageId":"916","endLine":3,"endColumn":9},{"ruleId":"913","severity":1,"message":"1004","line":3,"column":11,"nodeType":"915","messageId":"916","endLine":3,"endColumn":14},{"ruleId":"913","severity":1,"message":"1005","line":3,"column":16,"nodeType":"915","messageId":"916","endLine":3,"endColumn":23},{"ruleId":"913","severity":1,"message":"1006","line":5,"column":5,"nodeType":"915","messageId":"916","endLine":5,"endColumn":14},{"ruleId":"913","severity":1,"message":"947","line":5,"column":21,"nodeType":"915","messageId":"916","endLine":5,"endColumn":31},{"ruleId":"913","severity":1,"message":"1007","line":5,"column":33,"nodeType":"915","messageId":"916","endLine":5,"endColumn":39},{"ruleId":"913","severity":1,"message":"949","line":5,"column":41,"nodeType":"915","messageId":"916","endLine":5,"endColumn":47},{"ruleId":"913","severity":1,"message":"969","line":7,"column":10,"nodeType":"915","messageId":"916","endLine":7,"endColumn":14},{"ruleId":"913","severity":1,"message":"1008","line":8,"column":8,"nodeType":"915","messageId":"916","endLine":8,"endColumn":22},{"ruleId":"913","severity":1,"message":"1009","line":10,"column":20,"nodeType":"915","messageId":"916","endLine":10,"endColumn":31},{"ruleId":"913","severity":1,"message":"1010","line":12,"column":10,"nodeType":"915","messageId":"916","endLine":12,"endColumn":29},{"ruleId":"913","severity":1,"message":"1011","line":13,"column":10,"nodeType":"915","messageId":"916","endLine":13,"endColumn":21},{"ruleId":"936","severity":1,"message":"1012","line":40,"column":8,"nodeType":"938","endLine":40,"endColumn":10,"suggestions":"1013"},{"ruleId":"913","severity":1,"message":"980","line":1,"column":38,"nodeType":"915","messageId":"916","endLine":1,"endColumn":59},{"ruleId":"913","severity":1,"message":"981","line":1,"column":61,"nodeType":"915","messageId":"916","endLine":1,"endColumn":73},{"ruleId":"913","severity":1,"message":"982","line":2,"column":10,"nodeType":"915","messageId":"916","endLine":2,"endColumn":16},{"ruleId":"913","severity":1,"message":"983","line":2,"column":18,"nodeType":"915","messageId":"916","endLine":2,"endColumn":40},{"ruleId":"913","severity":1,"message":"1009","line":3,"column":20,"nodeType":"915","messageId":"916","endLine":3,"endColumn":31},{"ruleId":"913","severity":1,"message":"1014","line":9,"column":5,"nodeType":"915","messageId":"916","endLine":9,"endColumn":17},{"ruleId":"913","severity":1,"message":"1015","line":10,"column":5,"nodeType":"915","messageId":"916","endLine":10,"endColumn":13},{"ruleId":"913","severity":1,"message":"1016","line":10,"column":20,"nodeType":"915","messageId":"916","endLine":10,"endColumn":29},{"ruleId":"913","severity":1,"message":"1017","line":10,"column":31,"nodeType":"915","messageId":"916","endLine":10,"endColumn":39},{"ruleId":"913","severity":1,"message":"1003","line":11,"column":5,"nodeType":"915","messageId":"916","endLine":11,"endColumn":9},{"ruleId":"913","severity":1,"message":"1004","line":11,"column":11,"nodeType":"915","messageId":"916","endLine":11,"endColumn":14},{"ruleId":"913","severity":1,"message":"987","line":15,"column":5,"nodeType":"915","messageId":"916","endLine":15,"endColumn":9},{"ruleId":"913","severity":1,"message":"1018","line":19,"column":5,"nodeType":"915","messageId":"916","endLine":19,"endColumn":9},{"ruleId":"913","severity":1,"message":"1019","line":24,"column":5,"nodeType":"915","messageId":"916","endLine":24,"endColumn":11},{"ruleId":"913","severity":1,"message":"952","line":29,"column":8,"nodeType":"915","messageId":"916","endLine":29,"endColumn":20},{"ruleId":"913","severity":1,"message":"963","line":30,"column":10,"nodeType":"915","messageId":"916","endLine":30,"endColumn":15},{"ruleId":"913","severity":1,"message":"962","line":31,"column":10,"nodeType":"915","messageId":"916","endLine":31,"endColumn":14},{"ruleId":"913","severity":1,"message":"1020","line":32,"column":20,"nodeType":"915","messageId":"916","endLine":32,"endColumn":32},{"ruleId":"913","severity":1,"message":"1008","line":33,"column":8,"nodeType":"915","messageId":"916","endLine":33,"endColumn":22},{"ruleId":"913","severity":1,"message":"970","line":35,"column":10,"nodeType":"915","messageId":"916","endLine":35,"endColumn":18},{"ruleId":"913","severity":1,"message":"926","line":37,"column":37,"nodeType":"915","messageId":"916","endLine":37,"endColumn":42},{"ruleId":"913","severity":1,"message":"1021","line":46,"column":10,"nodeType":"915","messageId":"916","endLine":46,"endColumn":18},{"ruleId":"913","severity":1,"message":"979","line":1,"column":28,"nodeType":"915","messageId":"916","endLine":1,"endColumn":36},{"ruleId":"913","severity":1,"message":"980","line":1,"column":38,"nodeType":"915","messageId":"916","endLine":1,"endColumn":59},{"ruleId":"913","severity":1,"message":"981","line":1,"column":61,"nodeType":"915","messageId":"916","endLine":1,"endColumn":73},{"ruleId":"913","severity":1,"message":"1003","line":3,"column":5,"nodeType":"915","messageId":"916","endLine":3,"endColumn":9},{"ruleId":"913","severity":1,"message":"1004","line":3,"column":11,"nodeType":"915","messageId":"916","endLine":3,"endColumn":14},{"ruleId":"913","severity":1,"message":"948","line":4,"column":5,"nodeType":"915","messageId":"916","endLine":4,"endColumn":9},{"ruleId":"913","severity":1,"message":"1006","line":5,"column":5,"nodeType":"915","messageId":"916","endLine":5,"endColumn":14},{"ruleId":"913","severity":1,"message":"1007","line":5,"column":33,"nodeType":"915","messageId":"916","endLine":5,"endColumn":39},{"ruleId":"913","severity":1,"message":"949","line":5,"column":41,"nodeType":"915","messageId":"916","endLine":5,"endColumn":47},{"ruleId":"913","severity":1,"message":"1009","line":8,"column":20,"nodeType":"915","messageId":"916","endLine":8,"endColumn":31},{"ruleId":"913","severity":1,"message":"1022","line":9,"column":25,"nodeType":"915","messageId":"916","endLine":9,"endColumn":35},{"ruleId":"913","severity":1,"message":"1023","line":13,"column":10,"nodeType":"915","messageId":"916","endLine":13,"endColumn":15},{"ruleId":"936","severity":1,"message":"1024","line":37,"column":8,"nodeType":"938","endLine":37,"endColumn":10,"suggestions":"1025"},{"ruleId":"913","severity":1,"message":"1005","line":7,"column":5,"nodeType":"915","messageId":"916","endLine":7,"endColumn":12},{"ruleId":"936","severity":1,"message":"1026","line":53,"column":8,"nodeType":"938","endLine":53,"endColumn":10,"suggestions":"1027"},{"ruleId":"913","severity":1,"message":"979","line":1,"column":17,"nodeType":"915","messageId":"916","endLine":1,"endColumn":25},{"ruleId":"913","severity":1,"message":"1028","line":2,"column":15,"nodeType":"915","messageId":"916","endLine":2,"endColumn":20},{"ruleId":"913","severity":1,"message":"1007","line":2,"column":22,"nodeType":"915","messageId":"916","endLine":2,"endColumn":28},{"ruleId":"913","severity":1,"message":"1029","line":26,"column":7,"nodeType":"915","messageId":"916","endLine":26,"endColumn":15},{"ruleId":"913","severity":1,"message":"980","line":1,"column":38,"nodeType":"915","messageId":"916","endLine":1,"endColumn":59},{"ruleId":"913","severity":1,"message":"981","line":1,"column":61,"nodeType":"915","messageId":"916","endLine":1,"endColumn":73},{"ruleId":"913","severity":1,"message":"942","line":6,"column":5,"nodeType":"915","messageId":"916","endLine":6,"endColumn":15},{"ruleId":"913","severity":1,"message":"1006","line":7,"column":5,"nodeType":"915","messageId":"916","endLine":7,"endColumn":14},{"ruleId":"913","severity":1,"message":"1030","line":12,"column":5,"nodeType":"915","messageId":"916","endLine":12,"endColumn":10},{"ruleId":"913","severity":1,"message":"1009","line":17,"column":20,"nodeType":"915","messageId":"916","endLine":17,"endColumn":31},{"ruleId":"913","severity":1,"message":"965","line":23,"column":10,"nodeType":"915","messageId":"916","endLine":23,"endColumn":17},{"ruleId":"913","severity":1,"message":"962","line":24,"column":10,"nodeType":"915","messageId":"916","endLine":24,"endColumn":14},{"ruleId":"936","severity":1,"message":"1031","line":54,"column":8,"nodeType":"938","endLine":54,"endColumn":10,"suggestions":"1032"},{"ruleId":"913","severity":1,"message":"965","line":13,"column":10,"nodeType":"915","messageId":"916","endLine":13,"endColumn":17},{"ruleId":"913","severity":1,"message":"952","line":14,"column":8,"nodeType":"915","messageId":"916","endLine":14,"endColumn":20},{"ruleId":"913","severity":1,"message":"1033","line":1,"column":17,"nodeType":"915","messageId":"916","endLine":1,"endColumn":33},{"ruleId":"913","severity":1,"message":"963","line":3,"column":10,"nodeType":"915","messageId":"916","endLine":3,"endColumn":15},{"ruleId":"913","severity":1,"message":"1034","line":4,"column":10,"nodeType":"915","messageId":"916","endLine":4,"endColumn":27},{"ruleId":"913","severity":1,"message":"965","line":5,"column":10,"nodeType":"915","messageId":"916","endLine":5,"endColumn":17},{"ruleId":"913","severity":1,"message":"964","line":6,"column":10,"nodeType":"915","messageId":"916","endLine":6,"endColumn":27},{"ruleId":"913","severity":1,"message":"1035","line":2,"column":10,"nodeType":"915","messageId":"916","endLine":2,"endColumn":14},{"ruleId":"913","severity":1,"message":"1036","line":3,"column":10,"nodeType":"915","messageId":"916","endLine":3,"endColumn":19},{"ruleId":"913","severity":1,"message":"966","line":5,"column":10,"nodeType":"915","messageId":"916","endLine":5,"endColumn":30},{"ruleId":"913","severity":1,"message":"967","line":6,"column":10,"nodeType":"915","messageId":"916","endLine":6,"endColumn":30},{"ruleId":"913","severity":1,"message":"1033","line":1,"column":17,"nodeType":"915","messageId":"916","endLine":1,"endColumn":33},{"ruleId":"913","severity":1,"message":"1037","line":2,"column":10,"nodeType":"915","messageId":"916","endLine":2,"endColumn":19},{"ruleId":"913","severity":1,"message":"1038","line":4,"column":10,"nodeType":"915","messageId":"916","endLine":4,"endColumn":23},{"ruleId":"913","severity":1,"message":"1039","line":5,"column":10,"nodeType":"915","messageId":"916","endLine":5,"endColumn":22},{"ruleId":"913","severity":1,"message":"971","line":6,"column":10,"nodeType":"915","messageId":"916","endLine":6,"endColumn":31},{"ruleId":"913","severity":1,"message":"972","line":7,"column":10,"nodeType":"915","messageId":"916","endLine":7,"endColumn":29},{"ruleId":"913","severity":1,"message":"1033","line":1,"column":17,"nodeType":"915","messageId":"916","endLine":1,"endColumn":33},{"ruleId":"913","severity":1,"message":"965","line":2,"column":10,"nodeType":"915","messageId":"916","endLine":2,"endColumn":17},{"ruleId":"913","severity":1,"message":"1040","line":3,"column":10,"nodeType":"915","messageId":"916","endLine":3,"endColumn":15},{"ruleId":"913","severity":1,"message":"969","line":4,"column":10,"nodeType":"915","messageId":"916","endLine":4,"endColumn":14},{"ruleId":"913","severity":1,"message":"1041","line":5,"column":10,"nodeType":"915","messageId":"916","endLine":5,"endColumn":31},{"ruleId":"913","severity":1,"message":"1042","line":7,"column":10,"nodeType":"915","messageId":"916","endLine":7,"endColumn":23},{"ruleId":"913","severity":1,"message":"1043","line":8,"column":10,"nodeType":"915","messageId":"916","endLine":8,"endColumn":25},{"ruleId":"913","severity":1,"message":"974","line":11,"column":10,"nodeType":"915","messageId":"916","endLine":11,"endColumn":30},{"ruleId":"913","severity":1,"message":"1044","line":2,"column":10,"nodeType":"915","messageId":"916","endLine":2,"endColumn":22},{"ruleId":"913","severity":1,"message":"957","line":1,"column":10,"nodeType":"915","messageId":"916","endLine":1,"endColumn":19},{"ruleId":"913","severity":1,"message":"1045","line":2,"column":10,"nodeType":"915","messageId":"916","endLine":2,"endColumn":15},{"ruleId":"913","severity":1,"message":"914","line":3,"column":10,"nodeType":"915","messageId":"916","endLine":3,"endColumn":18},{"ruleId":"913","severity":1,"message":"1023","line":3,"column":10,"nodeType":"915","messageId":"916","endLine":3,"endColumn":15},{"ruleId":"913","severity":1,"message":"1046","line":1,"column":10,"nodeType":"915","messageId":"916","endLine":1,"endColumn":18},{"ruleId":"913","severity":1,"message":"1047","line":1,"column":10,"nodeType":"915","messageId":"916","endLine":1,"endColumn":16},{"ruleId":"913","severity":1,"message":"1048","line":1,"column":27,"nodeType":"915","messageId":"916","endLine":1,"endColumn":44},{"ruleId":"913","severity":1,"message":"1049","line":4,"column":10,"nodeType":"915","messageId":"916","endLine":4,"endColumn":18},{"ruleId":"913","severity":1,"message":"949","line":11,"column":5,"nodeType":"915","messageId":"916","endLine":11,"endColumn":11},{"ruleId":"913","severity":1,"message":"950","line":12,"column":5,"nodeType":"915","messageId":"916","endLine":12,"endColumn":13},{"ruleId":"913","severity":1,"message":"1050","line":13,"column":5,"nodeType":"915","messageId":"916","endLine":13,"endColumn":11},{"ruleId":"913","severity":1,"message":"951","line":14,"column":5,"nodeType":"915","messageId":"916","endLine":14,"endColumn":17},{"ruleId":"913","severity":1,"message":"1015","line":15,"column":5,"nodeType":"915","messageId":"916","endLine":15,"endColumn":13},{"ruleId":"913","severity":1,"message":"1051","line":16,"column":5,"nodeType":"915","messageId":"916","endLine":16,"endColumn":9},{"ruleId":"913","severity":1,"message":"965","line":19,"column":10,"nodeType":"915","messageId":"916","endLine":19,"endColumn":17},{"ruleId":"913","severity":1,"message":"1046","line":20,"column":10,"nodeType":"915","messageId":"916","endLine":20,"endColumn":18},{"ruleId":"913","severity":1,"message":"1052","line":23,"column":11,"nodeType":"915","messageId":"916","endLine":23,"endColumn":18},{"ruleId":"1053","severity":1,"message":"1054","line":78,"column":40,"nodeType":"1055","messageId":"1056","endLine":78,"endColumn":41,"suggestions":"1057"},{"ruleId":"1053","severity":1,"message":"1058","line":78,"column":42,"nodeType":"1055","messageId":"1056","endLine":78,"endColumn":43,"suggestions":"1059"},{"ruleId":"913","severity":1,"message":"923","line":1,"column":27,"nodeType":"915","messageId":"916","endLine":1,"endColumn":36},{"ruleId":"913","severity":1,"message":"1028","line":2,"column":15,"nodeType":"915","messageId":"916","endLine":2,"endColumn":20},{"ruleId":"913","severity":1,"message":"1060","line":2,"column":48,"nodeType":"915","messageId":"916","endLine":2,"endColumn":65},{"ruleId":"913","severity":1,"message":"1061","line":4,"column":24,"nodeType":"915","messageId":"916","endLine":4,"endColumn":33},{"ruleId":"913","severity":1,"message":"1062","line":9,"column":12,"nodeType":"915","messageId":"916","endLine":9,"endColumn":22},{"ruleId":"913","severity":1,"message":"1063","line":9,"column":24,"nodeType":"915","messageId":"916","endLine":9,"endColumn":37},{"ruleId":"913","severity":1,"message":"979","line":1,"column":17,"nodeType":"915","messageId":"916","endLine":1,"endColumn":25},{"ruleId":"913","severity":1,"message":"1064","line":3,"column":5,"nodeType":"915","messageId":"916","endLine":3,"endColumn":11},{"ruleId":"913","severity":1,"message":"951","line":7,"column":5,"nodeType":"915","messageId":"916","endLine":7,"endColumn":17},{"ruleId":"913","severity":1,"message":"949","line":8,"column":5,"nodeType":"915","messageId":"916","endLine":8,"endColumn":11},{"ruleId":"913","severity":1,"message":"950","line":9,"column":5,"nodeType":"915","messageId":"916","endLine":9,"endColumn":13},{"ruleId":"913","severity":1,"message":"1020","line":15,"column":10,"nodeType":"915","messageId":"916","endLine":15,"endColumn":22},{"ruleId":"913","severity":1,"message":"1065","line":16,"column":10,"nodeType":"915","messageId":"916","endLine":16,"endColumn":22},{"ruleId":"913","severity":1,"message":"1066","line":24,"column":11,"nodeType":"915","messageId":"916","endLine":24,"endColumn":16},{"ruleId":"913","severity":1,"message":"1048","line":2,"column":27,"nodeType":"915","messageId":"916","endLine":2,"endColumn":44},{"ruleId":"913","severity":1,"message":"1017","line":6,"column":5,"nodeType":"915","messageId":"916","endLine":6,"endColumn":13},{"ruleId":"913","severity":1,"message":"965","line":10,"column":10,"nodeType":"915","messageId":"916","endLine":10,"endColumn":17},{"ruleId":"913","severity":1,"message":"953","line":20,"column":27,"nodeType":"915","messageId":"916","endLine":20,"endColumn":38},{"ruleId":"913","severity":1,"message":"954","line":20,"column":40,"nodeType":"915","messageId":"916","endLine":20,"endColumn":65},{"ruleId":"913","severity":1,"message":"1037","line":2,"column":10,"nodeType":"915","messageId":"916","endLine":2,"endColumn":19},{"ruleId":"913","severity":1,"message":"973","line":13,"column":10,"nodeType":"915","messageId":"916","endLine":13,"endColumn":17},{"ruleId":"913","severity":1,"message":"1067","line":2,"column":10,"nodeType":"915","messageId":"916","endLine":2,"endColumn":26},{"ruleId":"913","severity":1,"message":"914","line":1,"column":10,"nodeType":"915","messageId":"916","endLine":1,"endColumn":18},{"ruleId":"913","severity":1,"message":"965","line":2,"column":10,"nodeType":"915","messageId":"916","endLine":2,"endColumn":17},{"ruleId":"913","severity":1,"message":"963","line":3,"column":10,"nodeType":"915","messageId":"916","endLine":3,"endColumn":15},{"ruleId":"913","severity":1,"message":"914","line":1,"column":10,"nodeType":"915","messageId":"916","endLine":1,"endColumn":18},{"ruleId":"913","severity":1,"message":"929","line":12,"column":22,"nodeType":"915","messageId":"916","endLine":12,"endColumn":27},{"ruleId":"913","severity":1,"message":"1052","line":25,"column":11,"nodeType":"915","messageId":"916","endLine":25,"endColumn":18},{"ruleId":"913","severity":1,"message":"1028","line":2,"column":15,"nodeType":"915","messageId":"916","endLine":2,"endColumn":20},{"ruleId":"913","severity":1,"message":"1007","line":2,"column":22,"nodeType":"915","messageId":"916","endLine":2,"endColumn":28},{"ruleId":"913","severity":1,"message":"1005","line":2,"column":30,"nodeType":"915","messageId":"916","endLine":2,"endColumn":37},{"ruleId":"913","severity":1,"message":"1068","line":6,"column":10,"nodeType":"915","messageId":"916","endLine":6,"endColumn":17},{"ruleId":"913","severity":1,"message":"1069","line":6,"column":19,"nodeType":"915","messageId":"916","endLine":6,"endColumn":26},{"ruleId":"913","severity":1,"message":"941","line":7,"column":10,"nodeType":"915","messageId":"916","endLine":7,"endColumn":15},{"ruleId":"913","severity":1,"message":"1070","line":14,"column":12,"nodeType":"915","messageId":"916","endLine":14,"endColumn":23},{"ruleId":"913","severity":1,"message":"1071","line":14,"column":25,"nodeType":"915","messageId":"916","endLine":14,"endColumn":39},{"ruleId":"913","severity":1,"message":"1072","line":1,"column":21,"nodeType":"915","messageId":"916","endLine":1,"endColumn":35},{"ruleId":"913","severity":1,"message":"923","line":1,"column":17,"nodeType":"915","messageId":"916","endLine":1,"endColumn":26},{"ruleId":"913","severity":1,"message":"979","line":1,"column":28,"nodeType":"915","messageId":"916","endLine":1,"endColumn":36},{"ruleId":"913","severity":1,"message":"1048","line":2,"column":27,"nodeType":"915","messageId":"916","endLine":2,"endColumn":44},{"ruleId":"913","severity":1,"message":"984","line":5,"column":5,"nodeType":"915","messageId":"916","endLine":5,"endColumn":8},{"ruleId":"913","severity":1,"message":"1006","line":11,"column":5,"nodeType":"915","messageId":"916","endLine":11,"endColumn":14},{"ruleId":"913","severity":1,"message":"1073","line":14,"column":18,"nodeType":"915","messageId":"916","endLine":14,"endColumn":28},{"ruleId":"913","severity":1,"message":"1074","line":33,"column":11,"nodeType":"915","messageId":"916","endLine":33,"endColumn":17},{"ruleId":"913","severity":1,"message":"1075","line":35,"column":23,"nodeType":"915","messageId":"916","endLine":35,"endColumn":31},{"ruleId":"913","severity":1,"message":"1076","line":240,"column":14,"nodeType":"915","messageId":"916","endLine":240,"endColumn":35},{"ruleId":"913","severity":1,"message":"1077","line":1,"column":10,"nodeType":"915","messageId":"916","endLine":1,"endColumn":16},{"ruleId":"913","severity":1,"message":"923","line":1,"column":17,"nodeType":"915","messageId":"916","endLine":1,"endColumn":26},{"ruleId":"913","severity":1,"message":"979","line":1,"column":28,"nodeType":"915","messageId":"916","endLine":1,"endColumn":36},{"ruleId":"913","severity":1,"message":"1048","line":2,"column":27,"nodeType":"915","messageId":"916","endLine":2,"endColumn":44},{"ruleId":"913","severity":1,"message":"1078","line":3,"column":10,"nodeType":"915","messageId":"916","endLine":3,"endColumn":13},{"ruleId":"913","severity":1,"message":"947","line":3,"column":15,"nodeType":"915","messageId":"916","endLine":3,"endColumn":25},{"ruleId":"913","severity":1,"message":"1066","line":10,"column":11,"nodeType":"915","messageId":"916","endLine":10,"endColumn":16},{"ruleId":"913","severity":1,"message":"1067","line":2,"column":10,"nodeType":"915","messageId":"916","endLine":2,"endColumn":26},{"ruleId":"913","severity":1,"message":"1073","line":4,"column":10,"nodeType":"915","messageId":"916","endLine":4,"endColumn":20},{"ruleId":"913","severity":1,"message":"1077","line":5,"column":10,"nodeType":"915","messageId":"916","endLine":5,"endColumn":16},{"ruleId":"913","severity":1,"message":"1067","line":2,"column":10,"nodeType":"915","messageId":"916","endLine":2,"endColumn":26},{"ruleId":"913","severity":1,"message":"1073","line":4,"column":10,"nodeType":"915","messageId":"916","endLine":4,"endColumn":20},{"ruleId":"913","severity":1,"message":"1077","line":5,"column":10,"nodeType":"915","messageId":"916","endLine":5,"endColumn":16},{"ruleId":"913","severity":1,"message":"1067","line":2,"column":10,"nodeType":"915","messageId":"916","endLine":2,"endColumn":26},{"ruleId":"913","severity":1,"message":"1079","line":3,"column":10,"nodeType":"915","messageId":"916","endLine":3,"endColumn":29},{"ruleId":"913","severity":1,"message":"1080","line":5,"column":10,"nodeType":"915","messageId":"916","endLine":5,"endColumn":27},{"ruleId":"913","severity":1,"message":"1073","line":6,"column":10,"nodeType":"915","messageId":"916","endLine":6,"endColumn":20},{"ruleId":"913","severity":1,"message":"1077","line":7,"column":10,"nodeType":"915","messageId":"916","endLine":7,"endColumn":16},{"ruleId":"936","severity":1,"message":"1081","line":30,"column":8,"nodeType":"938","endLine":30,"endColumn":10,"suggestions":"1082"},{"ruleId":"913","severity":1,"message":"1073","line":2,"column":10,"nodeType":"915","messageId":"916","endLine":2,"endColumn":20},{"ruleId":"913","severity":1,"message":"1067","line":4,"column":10,"nodeType":"915","messageId":"916","endLine":4,"endColumn":26},{"ruleId":"913","severity":1,"message":"1077","line":5,"column":10,"nodeType":"915","messageId":"916","endLine":5,"endColumn":16},{"ruleId":"913","severity":1,"message":"1067","line":3,"column":10,"nodeType":"915","messageId":"916","endLine":3,"endColumn":26},{"ruleId":"913","severity":1,"message":"1073","line":8,"column":10,"nodeType":"915","messageId":"916","endLine":8,"endColumn":20},{"ruleId":"913","severity":1,"message":"1077","line":9,"column":10,"nodeType":"915","messageId":"916","endLine":9,"endColumn":16},{"ruleId":"913","severity":1,"message":"1073","line":3,"column":10,"nodeType":"915","messageId":"916","endLine":3,"endColumn":20},{"ruleId":"913","severity":1,"message":"1067","line":4,"column":10,"nodeType":"915","messageId":"916","endLine":4,"endColumn":26},{"ruleId":"913","severity":1,"message":"1077","line":5,"column":10,"nodeType":"915","messageId":"916","endLine":5,"endColumn":16},{"ruleId":"913","severity":1,"message":"1083","line":7,"column":10,"nodeType":"915","messageId":"916","endLine":7,"endColumn":25},{"ruleId":"913","severity":1,"message":"1073","line":2,"column":10,"nodeType":"915","messageId":"916","endLine":2,"endColumn":20},{"ruleId":"913","severity":1,"message":"1067","line":4,"column":10,"nodeType":"915","messageId":"916","endLine":4,"endColumn":26},{"ruleId":"913","severity":1,"message":"1077","line":5,"column":10,"nodeType":"915","messageId":"916","endLine":5,"endColumn":16},{"ruleId":"913","severity":1,"message":"1048","line":2,"column":27,"nodeType":"915","messageId":"916","endLine":2,"endColumn":44},{"ruleId":"913","severity":1,"message":"947","line":3,"column":15,"nodeType":"915","messageId":"916","endLine":3,"endColumn":25},{"ruleId":"913","severity":1,"message":"1006","line":3,"column":35,"nodeType":"915","messageId":"916","endLine":3,"endColumn":44},{"ruleId":"913","severity":1,"message":"1047","line":4,"column":10,"nodeType":"915","messageId":"916","endLine":4,"endColumn":16},{"ruleId":"913","severity":1,"message":"1073","line":4,"column":18,"nodeType":"915","messageId":"916","endLine":4,"endColumn":28},{"ruleId":"913","severity":1,"message":"1066","line":9,"column":11,"nodeType":"915","messageId":"916","endLine":9,"endColumn":16},{"ruleId":"913","severity":1,"message":"1048","line":1,"column":27,"nodeType":"915","messageId":"916","endLine":1,"endColumn":44},{"ruleId":"913","severity":1,"message":"924","line":2,"column":28,"nodeType":"915","messageId":"916","endLine":2,"endColumn":34},{"ruleId":"913","severity":1,"message":"1084","line":15,"column":10,"nodeType":"915","messageId":"916","endLine":15,"endColumn":29},{"ruleId":"913","severity":1,"message":"1085","line":15,"column":31,"nodeType":"915","messageId":"916","endLine":15,"endColumn":42},{"ruleId":"913","severity":1,"message":"1086","line":167,"column":7,"nodeType":"915","messageId":"916","endLine":167,"endColumn":16},{"ruleId":"913","severity":1,"message":"1080","line":3,"column":10,"nodeType":"915","messageId":"916","endLine":3,"endColumn":27},{"ruleId":"913","severity":1,"message":"1087","line":5,"column":10,"nodeType":"915","messageId":"916","endLine":5,"endColumn":22},{"ruleId":"913","severity":1,"message":"1047","line":7,"column":10,"nodeType":"915","messageId":"916","endLine":7,"endColumn":16},{"ruleId":"913","severity":1,"message":"979","line":1,"column":17,"nodeType":"915","messageId":"916","endLine":1,"endColumn":25},{"ruleId":"913","severity":1,"message":"1005","line":4,"column":5,"nodeType":"915","messageId":"916","endLine":4,"endColumn":12},{"ruleId":"913","severity":1,"message":"975","line":13,"column":10,"nodeType":"915","messageId":"916","endLine":13,"endColumn":18},{"ruleId":"913","severity":1,"message":"1088","line":1,"column":8,"nodeType":"915","messageId":"916","endLine":1,"endColumn":15},{"ruleId":"936","severity":1,"message":"1089","line":40,"column":8,"nodeType":"938","endLine":40,"endColumn":10,"suggestions":"1090"},{"ruleId":"913","severity":1,"message":"923","line":2,"column":17,"nodeType":"915","messageId":"916","endLine":2,"endColumn":26},{"ruleId":"913","severity":1,"message":"1009","line":3,"column":10,"nodeType":"915","messageId":"916","endLine":3,"endColumn":21},{"ruleId":"913","severity":1,"message":"980","line":1,"column":46,"nodeType":"915","messageId":"916","endLine":1,"endColumn":67},{"ruleId":"913","severity":1,"message":"981","line":1,"column":69,"nodeType":"915","messageId":"916","endLine":1,"endColumn":81},{"ruleId":"913","severity":1,"message":"1017","line":4,"column":5,"nodeType":"915","messageId":"916","endLine":4,"endColumn":13},{"ruleId":"913","severity":1,"message":"1078","line":5,"column":5,"nodeType":"915","messageId":"916","endLine":5,"endColumn":8},{"ruleId":"913","severity":1,"message":"1018","line":5,"column":10,"nodeType":"915","messageId":"916","endLine":5,"endColumn":14},{"ruleId":"936","severity":1,"message":"1091","line":34,"column":8,"nodeType":"938","endLine":34,"endColumn":19,"suggestions":"1092"},{"ruleId":"913","severity":1,"message":"1093","line":2,"column":10,"nodeType":"915","messageId":"916","endLine":2,"endColumn":17},{"ruleId":"913","severity":1,"message":"1094","line":3,"column":10,"nodeType":"915","messageId":"916","endLine":3,"endColumn":19},{"ruleId":"913","severity":1,"message":"1094","line":2,"column":22,"nodeType":"915","messageId":"916","endLine":2,"endColumn":31},{"ruleId":"913","severity":1,"message":"1093","line":3,"column":10,"nodeType":"915","messageId":"916","endLine":3,"endColumn":17},{"ruleId":"913","severity":1,"message":"924","line":1,"column":28,"nodeType":"915","messageId":"916","endLine":1,"endColumn":34},{"ruleId":"913","severity":1,"message":"1030","line":2,"column":10,"nodeType":"915","messageId":"916","endLine":2,"endColumn":15},{"ruleId":"913","severity":1,"message":"1016","line":2,"column":17,"nodeType":"915","messageId":"916","endLine":2,"endColumn":26},{"ruleId":"913","severity":1,"message":"1007","line":2,"column":28,"nodeType":"915","messageId":"916","endLine":2,"endColumn":34},{"ruleId":"913","severity":1,"message":"1095","line":2,"column":68,"nodeType":"915","messageId":"916","endLine":2,"endColumn":78},{"ruleId":"1096","severity":1,"message":"1097","line":83,"column":47,"nodeType":"1098","messageId":"1099","endLine":83,"endColumn":49},{"ruleId":"1096","severity":1,"message":"1097","line":83,"column":70,"nodeType":"1098","messageId":"1099","endLine":83,"endColumn":72},{"ruleId":"913","severity":1,"message":"1048","line":1,"column":27,"nodeType":"915","messageId":"916","endLine":1,"endColumn":44},{"ruleId":"913","severity":1,"message":"979","line":1,"column":28,"nodeType":"915","messageId":"916","endLine":1,"endColumn":36},{"ruleId":"913","severity":1,"message":"1100","line":22,"column":22,"nodeType":"915","messageId":"916","endLine":22,"endColumn":31},{"ruleId":"913","severity":1,"message":"969","line":24,"column":10,"nodeType":"915","messageId":"916","endLine":24,"endColumn":14},{"ruleId":"913","severity":1,"message":"1047","line":27,"column":10,"nodeType":"915","messageId":"916","endLine":27,"endColumn":16},{"ruleId":"913","severity":1,"message":"1023","line":29,"column":10,"nodeType":"915","messageId":"916","endLine":29,"endColumn":15},{"ruleId":"936","severity":1,"message":"1101","line":48,"column":8,"nodeType":"938","endLine":48,"endColumn":50,"suggestions":"1102"},{"ruleId":"913","severity":1,"message":"923","line":1,"column":17,"nodeType":"915","messageId":"916","endLine":1,"endColumn":26},{"ruleId":"913","severity":1,"message":"980","line":1,"column":38,"nodeType":"915","messageId":"916","endLine":1,"endColumn":59},{"ruleId":"913","severity":1,"message":"981","line":1,"column":61,"nodeType":"915","messageId":"916","endLine":1,"endColumn":73},{"ruleId":"913","severity":1,"message":"1003","line":3,"column":5,"nodeType":"915","messageId":"916","endLine":3,"endColumn":9},{"ruleId":"913","severity":1,"message":"1004","line":3,"column":11,"nodeType":"915","messageId":"916","endLine":3,"endColumn":14},{"ruleId":"913","severity":1,"message":"1005","line":3,"column":16,"nodeType":"915","messageId":"916","endLine":3,"endColumn":23},{"ruleId":"913","severity":1,"message":"948","line":4,"column":5,"nodeType":"915","messageId":"916","endLine":4,"endColumn":9},{"ruleId":"913","severity":1,"message":"1006","line":5,"column":5,"nodeType":"915","messageId":"916","endLine":5,"endColumn":14},{"ruleId":"913","severity":1,"message":"1007","line":5,"column":33,"nodeType":"915","messageId":"916","endLine":5,"endColumn":39},{"ruleId":"913","severity":1,"message":"969","line":7,"column":10,"nodeType":"915","messageId":"916","endLine":7,"endColumn":14},{"ruleId":"913","severity":1,"message":"1008","line":8,"column":8,"nodeType":"915","messageId":"916","endLine":8,"endColumn":22},{"ruleId":"913","severity":1,"message":"1009","line":10,"column":20,"nodeType":"915","messageId":"916","endLine":10,"endColumn":31},{"ruleId":"913","severity":1,"message":"1023","line":14,"column":10,"nodeType":"915","messageId":"916","endLine":14,"endColumn":15},{"ruleId":"913","severity":1,"message":"1047","line":15,"column":10,"nodeType":"915","messageId":"916","endLine":15,"endColumn":16},{"ruleId":"913","severity":1,"message":"1080","line":16,"column":10,"nodeType":"915","messageId":"916","endLine":16,"endColumn":27},{"ruleId":"913","severity":1,"message":"1103","line":3,"column":28,"nodeType":"915","messageId":"916","endLine":3,"endColumn":36},{"ruleId":"913","severity":1,"message":"1030","line":3,"column":38,"nodeType":"915","messageId":"916","endLine":3,"endColumn":43},{"ruleId":"913","severity":1,"message":"984","line":3,"column":66,"nodeType":"915","messageId":"916","endLine":3,"endColumn":69},{"ruleId":"913","severity":1,"message":"1007","line":3,"column":71,"nodeType":"915","messageId":"916","endLine":3,"endColumn":77},{"ruleId":"913","severity":1,"message":"970","line":6,"column":10,"nodeType":"915","messageId":"916","endLine":6,"endColumn":18},{"ruleId":"913","severity":1,"message":"1048","line":1,"column":27,"nodeType":"915","messageId":"916","endLine":1,"endColumn":44},{"ruleId":"913","severity":1,"message":"963","line":18,"column":10,"nodeType":"915","messageId":"916","endLine":18,"endColumn":15},{"ruleId":"913","severity":1,"message":"965","line":20,"column":10,"nodeType":"915","messageId":"916","endLine":20,"endColumn":17},{"ruleId":"913","severity":1,"message":"1052","line":25,"column":11,"nodeType":"915","messageId":"916","endLine":25,"endColumn":18},{"ruleId":"913","severity":1,"message":"923","line":1,"column":17,"nodeType":"915","messageId":"916","endLine":1,"endColumn":26},{"ruleId":"913","severity":1,"message":"979","line":1,"column":28,"nodeType":"915","messageId":"916","endLine":1,"endColumn":36},{"ruleId":"913","severity":1,"message":"980","line":1,"column":38,"nodeType":"915","messageId":"916","endLine":1,"endColumn":59},{"ruleId":"913","severity":1,"message":"981","line":1,"column":61,"nodeType":"915","messageId":"916","endLine":1,"endColumn":73},{"ruleId":"913","severity":1,"message":"1104","line":3,"column":5,"nodeType":"915","messageId":"916","endLine":3,"endColumn":9},{"ruleId":"913","severity":1,"message":"1103","line":5,"column":5,"nodeType":"915","messageId":"916","endLine":5,"endColumn":13},{"ruleId":"913","severity":1,"message":"1014","line":6,"column":5,"nodeType":"915","messageId":"916","endLine":6,"endColumn":17},{"ruleId":"913","severity":1,"message":"1015","line":7,"column":5,"nodeType":"915","messageId":"916","endLine":7,"endColumn":13},{"ruleId":"913","severity":1,"message":"1016","line":7,"column":15,"nodeType":"915","messageId":"916","endLine":7,"endColumn":24},{"ruleId":"913","severity":1,"message":"1017","line":7,"column":26,"nodeType":"915","messageId":"916","endLine":7,"endColumn":34},{"ruleId":"913","severity":1,"message":"1007","line":7,"column":36,"nodeType":"915","messageId":"916","endLine":7,"endColumn":42},{"ruleId":"913","severity":1,"message":"951","line":7,"column":44,"nodeType":"915","messageId":"916","endLine":7,"endColumn":56},{"ruleId":"913","severity":1,"message":"1003","line":8,"column":5,"nodeType":"915","messageId":"916","endLine":8,"endColumn":9},{"ruleId":"913","severity":1,"message":"1004","line":8,"column":11,"nodeType":"915","messageId":"916","endLine":8,"endColumn":14},{"ruleId":"913","severity":1,"message":"948","line":9,"column":5,"nodeType":"915","messageId":"916","endLine":9,"endColumn":9},{"ruleId":"913","severity":1,"message":"1005","line":11,"column":5,"nodeType":"915","messageId":"916","endLine":11,"endColumn":12},{"ruleId":"913","severity":1,"message":"1105","line":12,"column":5,"nodeType":"915","messageId":"916","endLine":12,"endColumn":9},{"ruleId":"913","severity":1,"message":"1030","line":13,"column":5,"nodeType":"915","messageId":"916","endLine":13,"endColumn":10},{"ruleId":"913","severity":1,"message":"949","line":15,"column":5,"nodeType":"915","messageId":"916","endLine":15,"endColumn":11},{"ruleId":"913","severity":1,"message":"984","line":16,"column":5,"nodeType":"915","messageId":"916","endLine":16,"endColumn":8},{"ruleId":"913","severity":1,"message":"950","line":17,"column":5,"nodeType":"915","messageId":"916","endLine":17,"endColumn":13},{"ruleId":"913","severity":1,"message":"946","line":18,"column":5,"nodeType":"915","messageId":"916","endLine":18,"endColumn":15},{"ruleId":"913","severity":1,"message":"1040","line":23,"column":10,"nodeType":"915","messageId":"916","endLine":23,"endColumn":15},{"ruleId":"913","severity":1,"message":"1106","line":25,"column":10,"nodeType":"915","messageId":"916","endLine":25,"endColumn":23},{"ruleId":"913","severity":1,"message":"1107","line":27,"column":10,"nodeType":"915","messageId":"916","endLine":27,"endColumn":24},{"ruleId":"913","severity":1,"message":"952","line":28,"column":8,"nodeType":"915","messageId":"916","endLine":28,"endColumn":20},{"ruleId":"913","severity":1,"message":"1108","line":29,"column":10,"nodeType":"915","messageId":"916","endLine":29,"endColumn":22},{"ruleId":"913","severity":1,"message":"973","line":32,"column":10,"nodeType":"915","messageId":"916","endLine":32,"endColumn":17},{"ruleId":"913","severity":1,"message":"923","line":1,"column":17,"nodeType":"915","messageId":"916","endLine":1,"endColumn":26},{"ruleId":"913","severity":1,"message":"980","line":1,"column":38,"nodeType":"915","messageId":"916","endLine":1,"endColumn":59},{"ruleId":"913","severity":1,"message":"981","line":1,"column":61,"nodeType":"915","messageId":"916","endLine":1,"endColumn":73},{"ruleId":"936","severity":1,"message":"1109","line":81,"column":8,"nodeType":"938","endLine":81,"endColumn":14,"suggestions":"1110"},"@typescript-eslint/no-unused-vars","'RoleType' is defined but never used.","Identifier","unusedVar","no-native-reassign",["1111"],"no-negated-in-lhs",["1112"],"jsx-a11y/accessible-emoji",[],"'useEffect' is defined but never used.","'useRef' is defined but never used.","'lazyWithPreload' is defined but never used.","'Route' is defined but never used.","'ChildRoute' is defined but never used.","'LazyRoute' is defined but never used.","'Theme' is defined but never used.","'AxiosAdapter' is defined but never used.","'LoginInfo' is defined but never used.","'container' is defined but never used.","'ServiceContext' is defined but never used.","'ComponentType' is defined but never used.","'History' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has an unnecessary dependency: 'services.pluginsService.plugins'. Either exclude it or remove the dependency array. Outer scope values like 'services.pluginsService.plugins' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["1113"],"'PluginsService' is defined but never used.","'timer' is defined but never used.","'makeStyles' is defined but never used.","'grey' is defined but never used.","'orange' is defined but never used.","'ThemeProvider' is defined but never used.","'IconButton' is defined but never used.","'Typography' is defined but never used.","'Icon' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'ListItemText' is defined but never used.","'ProfileImage' is defined but never used.","'authService' is assigned a value but never used.","'webSiteManagementsService' is assigned a value but never used.","'PreloadableComponent' is defined but never used.","'RouteInfo' is defined but never used.","'LoginUser' is defined but never used.","'observable' is defined but never used.","'computed' is defined but never used.","'action' is defined but never used.","'AuthRepository' is defined but never used.","'User' is defined but never used.","'IUser' is defined but never used.","'ICreateUserParams' is defined but never used.","'WebSite' is defined but never used.","'ICreateWebSiteParams' is defined but never used.","'IUpdateWebSiteParams' is defined but never used.","'PostsRepository' is defined but never used.","'Post' is defined but never used.","'PostType' is defined but never used.","'ICreatePostTypeParams' is defined but never used.","'ISavePostTypeParams' is defined but never used.","'Content' is defined but never used.","'ISearchContentParams' is defined but never used.","'Taxonomy' is defined but never used.","'FormControl' is defined but never used.","'useLocation' is defined but never used.","'history' is assigned a value but never used.","'useState' is defined but never used.","'ReactComponentElement' is defined but never used.","'cloneElement' is defined but never used.","'render' is defined but never used.","'unmountComponentAtNode' is defined but never used.","'Fab' is defined but never used.","'Modal' is defined but never used.","'Backdrop' is defined but never used.","'Fade' is defined but never used.","'TablePagination' is defined but never used.","'selected' is assigned a value but never used.","'setSelected' is assigned a value but never used.","'page' is assigned a value but never used.","'setPage' is assigned a value but never used.","'dense' is assigned a value but never used.","'setDense' is assigned a value but never used.","'rowsPerPage' is assigned a value but never used.","'setRowsPerPage' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","'Tabs' is defined but never used.","'Tab' is defined but never used.","'Divider' is defined but never used.","'TextField' is defined but never used.","'Button' is defined but never used.","'SwipeableViews' is defined but never used.","'useObserver' is defined but never used.","'PostEditOptionPanel' is defined but never used.","'RitchEditor' is defined but never used.","React Hook useEffect has missing dependencies: 'match.params.contentId', 'match.params.taxonomy', 'postEditService', and 'postManagementsService'. Either include them or remove the dependency array.",["1114"],"'ListItemIcon' is defined but never used.","'Checkbox' is defined but never used.","'InputBase' is defined but never used.","'useTheme' is defined but never used.","'Grow' is defined but never used.","'Search' is defined but never used.","'displayRoles' is defined but never used.","'TabPanel' is defined but never used.","'useHistory' is defined but never used.","'Field' is defined but never used.","React Hook useEffect has missing dependencies: 'match.params.contentId', 'match.params.taxonomy', and 'postEditService'. Either include them or remove the dependency array.",["1115"],"React Hook useEffect has a missing dependency: 'init'. Either include it or remove the dependency array.",["1116"],"'Input' is defined but never used.","'useStyle' is assigned a value but never used.","'Paper' is defined but never used.","React Hook useEffect has missing dependencies: 'authService.loginInfo.identifier', 'authService.loginInfo.userId', 'usersService', and 'webSiteManagementsService'. Either include them or remove the dependency array.",["1117"],"'repositoryConfig' is defined but never used.","'IUpdateUserParams' is defined but never used.","'from' is defined but never used.","'concatMap' is defined but never used.","'IPostType' is defined but never used.","'IPostCategory' is defined but never used.","'PostCategory' is defined but never used.","'IPost' is defined but never used.","'ISearchResultResponse' is defined but never used.","'IPostResponse' is defined but never used.","'ISavePostParams' is defined but never used.","'PluginSchema' is defined but never used.","'Token' is defined but never used.","'IWebSite' is defined but never used.","'Scheme' is defined but never used.","'DialogContentProp' is defined but never used.","'services' is defined but never used.","'Switch' is defined but never used.","'Chip' is defined but never used.","'classes' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\/.","Literal","unnecessaryEscape",["1118","1119"],"Unnecessary escape character: \\..",["1120","1121"],"'ClickAwayListener' is defined but never used.","'SearchBox' is defined but never used.","'searchText' is assigned a value but never used.","'setSearchText' is assigned a value but never used.","'Avatar' is defined but never used.","'ColorPalette' is defined but never used.","'theme' is assigned a value but never used.","'FieldEditorProps' is defined but never used.","'Flipped' is defined but never used.","'Flipper' is defined but never used.","'isAnimating' is assigned a value but never used.","'setIsAnimating' is assigned a value but never used.","'TextFieldProps' is defined but never used.","'SchemeType' is defined but never used.","'styles' is assigned a value but never used.","'onChange' is assigned a value but never used.","'handlePropertyChanged' is defined but never used.","'Editor' is defined but never used.","'Box' is defined but never used.","'ValidationTextField' is defined but never used.","'SchemeEditorProps' is defined but never used.","React Hook useEffect has missing dependencies: 'handleChange', 'props.field.field.value', and 'selection'. Either include them or remove the dependency array.",["1122"],"'showDialogAsync' is defined but never used.","'CloudUploadOutlined' is defined but never used.","'LocalDining' is defined but never used.","'useStyles' is assigned a value but never used.","'SelectScheme' is defined but never used.","'classes' is defined but never used.","React Hook useEffect has missing dependencies: 'colors' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["1123"],"React Hook useEffect has missing dependencies: 'intervalId' and 'updateWidth'. Either include them or remove the dependency array.",["1124"],"'Variant' is defined but never used.","'PropTypes' is defined but never used.","'ButtonBase' is defined but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'useParams' is defined but never used.","React Hook useEffect has a missing dependency: 'query'. Either include it or remove the dependency array. Outer scope values like 'services.postManagementsService.selected' aren't valid dependencies because mutating them doesn't re-render the component.",["1125"],"'ListItem' is defined but never used.","'List' is defined but never used.","'Menu' is defined but never used.","'PostCardImage' is defined but never used.","'PostStatusType' is defined but never used.","'confirmAsync' is defined but never used.","React Hook React.useEffect has a missing dependency: '_open'. Either include it or remove the dependency array.",["1126"],"no-global-assign","no-unsafe-negation",{"desc":"1127","fix":"1128"},{"desc":"1129","fix":"1130"},{"desc":"1131","fix":"1132"},{"desc":"1133","fix":"1134"},{"desc":"1135","fix":"1136"},{"messageId":"1137","fix":"1138","desc":"1139"},{"messageId":"1140","fix":"1141","desc":"1142"},{"messageId":"1137","fix":"1143","desc":"1139"},{"messageId":"1140","fix":"1144","desc":"1142"},{"desc":"1145","fix":"1146"},{"desc":"1147","fix":"1148"},{"desc":"1149","fix":"1150"},{"desc":"1151","fix":"1152"},{"desc":"1153","fix":"1154"},"Update the dependencies array to be: []",{"range":"1155","text":"1156"},"Update the dependencies array to be: [match.params.contentId, match.params.taxonomy, postEditService, postManagementsService]",{"range":"1157","text":"1158"},"Update the dependencies array to be: [match.params.contentId, match.params.taxonomy, postEditService]",{"range":"1159","text":"1160"},"Update the dependencies array to be: [init]",{"range":"1161","text":"1162"},"Update the dependencies array to be: [authService.loginInfo.identifier, authService.loginInfo.userId, usersService, webSiteManagementsService]",{"range":"1163","text":"1164"},"removeEscape",{"range":"1165","text":"1166"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"1167","text":"1168"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"1169","text":"1166"},{"range":"1170","text":"1168"},"Update the dependencies array to be: [handleChange, props.field.field.value, selection]",{"range":"1171","text":"1172"},"Update the dependencies array to be: [colors, props]",{"range":"1173","text":"1174"},"Update the dependencies array to be: [intervalId, itemWidth, updateWidth]",{"range":"1175","text":"1176"},"Update the dependencies array to be: [query]",{"range":"1177","text":"1178"},"Update the dependencies array to be: [_open, open]",{"range":"1179","text":"1180"},[1066,1099],"[]",[1483,1485],"[match.params.contentId, match.params.taxonomy, postEditService, postManagementsService]",[1403,1405],"[match.params.contentId, match.params.taxonomy, postEditService]",[1634,1636],"[init]",[1666,1668],"[authService.loginInfo.identifier, authService.loginInfo.userId, usersService, webSiteManagementsService]",[2528,2529],"",[2528,2528],"\\",[2530,2531],[2530,2530],[1013,1015],"[handleChange, props.field.field.value, selection]",[892,894],"[colors, props]",[1017,1028],"[intervalId, itemWidth, updateWidth]",[1769,1811],"[query]",[2315,2321],"[_open, open]"]